/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
var cdnPath = "https://b6s54eznn8xq.merlincdn.net";
(function (global, factory) {

    "use strict";

    if (typeof module === "object" && typeof module.exports === "object") {

        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory(global, true) :
            function (w) {
                if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
            };
    } else {
        factory(global);
    }

    // Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

    // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
    // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
    // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
    // enough that all such attempts are guarded in a try block.
    "use strict";

    var arr = [];

    var document = window.document;

    var getProto = Object.getPrototypeOf;

    var slice = arr.slice;

    var concat = arr.concat;

    var push = arr.push;

    var indexOf = arr.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var fnToString = hasOwn.toString;

    var ObjectFunctionString = fnToString.call(Object);

    var support = {};

    var isFunction = function isFunction(obj) {

        // Support: Chrome <=57, Firefox <=52
        // In some browsers, typeof returns "function" for HTML <object> elements
        // (i.e., `typeof document.createElement( "object" ) === "function"`).
        // We don't want to classify *any* DOM node as a function.
        return typeof obj === "function" && typeof obj.nodeType !== "number";
    };


    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };




    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };

    function DOMEval(code, node, doc) {
        doc = doc || document;

        var i, val,
            script = doc.createElement("script");

        script.text = code;
        if (node) {
            for (i in preservedScriptAttributes) {

                // Support: Firefox 64+, Edge 18+
                // Some browsers don't support the "nonce" property on scripts.
                // On the other hand, just using `getAttribute` is not enough as
                // the `nonce` attribute is reset to an empty string whenever it
                // becomes browsing-context connected.
                // See https://github.com/whatwg/html/issues/2369
                // See https://html.spec.whatwg.org/#nonce-attributes
                // The `node.getAttribute` check was added for the sake of
                // `jQuery.globalEval` so that it can fake a nonce-containing node
                // via an object.
                val = node[i] || node.getAttribute && node.getAttribute(i);
                if (val) {
                    script.setAttribute(i, val);
                }
            }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }


    function toType(obj) {
        if (obj == null) {
            return obj + "";
        }

        // Support: Android <=2.3 only (functionish RegExp)
        return typeof obj === "object" || typeof obj === "function" ?
            class2type[toString.call(obj)] || "object" :
            typeof obj;
    }
    /* global Symbol */
    // Defining this global in .eslintrc.json would create a danger of using the global
    // unguarded in another place, it seems safer to define global only for this module



    var
        version = "3.4.1",

        // Define a local copy of jQuery
        jQuery = function (selector, context) {

            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init(selector, context);
        },

        // Support: Android <=4.0 only
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

    jQuery.fn = jQuery.prototype = {

        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function () {
            return slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function (num) {

            // Return all the elements in a clean array
            if (num == null) {
                return slice.call(this);
            }

            // Return just the one element from the set
            return num < 0 ? this[num + this.length] : this[num];
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function (elems) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        each: function (callback) {
            return jQuery.each(this, callback);
        },

        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },

        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },

        first: function () {
            return this.eq(0);
        },

        last: function () {
            return this.eq(-1);
        },

        eq: function (i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        end: function () {
            return this.prevObject || this.constructor();
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;

            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !isFunction(target)) {
            target = {};
        }

        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {

            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {

                // Extend the base object
                for (name in options) {
                    copy = options[name];

                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if (name === "__proto__" || target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) ||
                        (copyIsArray = Array.isArray(copy)))) {
                        src = target[name];

                        // Ensure proper type for the source value
                        if (copyIsArray && !Array.isArray(src)) {
                            clone = [];
                        } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend({

        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function (msg) {
            throw new Error(msg);
        },

        noop: function () { },

        isPlainObject: function (obj) {
            var proto, Ctor;

            // Detect obvious negatives
            // Use toString instead of jQuery.type to catch host objects
            if (!obj || toString.call(obj) !== "[object Object]") {
                return false;
            }

            proto = getProto(obj);

            // Objects with no prototype (e.g., `Object.create( null )`) are plain
            if (!proto) {
                return true;
            }

            // Objects with prototype are plain iff they were constructed by a global Object function
            Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
            return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },

        isEmptyObject: function (obj) {
            var name;

            for (name in obj) {
                return false;
            }
            return true;
        },

        // Evaluates a script in a global context
        globalEval: function (code, options) {
            DOMEval(code, { nonce: options && options.nonce });
        },

        each: function (obj, callback) {
            var length, i = 0;

            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }

            return obj;
        },

        // Support: Android <=4.0 only
        trim: function (text) {
            return text == null ?
                "" :
                (text + "").replace(rtrim, "");
        },

        // results is for internal usage only
        makeArray: function (arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret,
                        typeof arr === "string" ?
                            [arr] : arr
                    );
                } else {
                    push.call(ret, arr);
                }
            }

            return ret;
        },

        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },

        // Support: Android <=4.0 only, PhantomJS 1 only
        // push.apply(_, arraylike) throws on ancient WebKit
        merge: function (first, second) {
            var len = +second.length,
                j = 0,
                i = first.length;

            for (; j < len; j++) {
                first[i++] = second[j];
            }

            first.length = i;

            return first;
        },

        grep: function (elems, callback, invert) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }

            return matches;
        },

        // arg is for internal usage only
        map: function (elems, callback, arg) {
            var length, value,
                i = 0,
                ret = [];

            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }

                // Go through every key on the object,
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }
            }

            // Flatten any nested arrays
            return concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });

    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function (i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });

    function isArrayLike(obj) {

        // Support: real iOS 8.2 only (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = toType(obj);

        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }

        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && (length - 1) in obj;
    }
    var Sizzle =
        /*!
         * Sizzle CSS Selector Engine v2.3.4
         * https://sizzlejs.com/
         *
         * Copyright JS Foundation and other contributors
         * Released under the MIT license
         * https://js.foundation/
         *
         * Date: 2019-04-08
         */
        (function (window) {

            var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,

                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,

                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function (a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                    }
                    return 0;
                },

                // Instance methods
                hasOwn = ({}).hasOwnProperty,
                arr = [],
                pop = arr.pop,
                push_native = arr.push,
                push = arr.push,
                slice = arr.slice,
                // Use a stripped-down indexOf as it's faster than native
                // https://jsperf.com/thor-indexof-vs-for/5
                indexOf = function (list, elem) {
                    var i = 0,
                        len = list.length;
                    for (; i < len; i++) {
                        if (list[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                },

                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",

                // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                    // Operator (capture 2)
                    "*([*^$|!~]?=)" + whitespace +
                    // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                    "*\\]",

                pseudos = ":(" + identifier + ")(?:\\((" +
                    // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                    // 1. quoted (capture 3; capture 4 or capture 5)
                    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                    // 2. simple (capture 6)
                    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                    // 3. anything else (capture 2)
                    ".*" +
                    ")\\)|)",

                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
                rdescend = new RegExp(whitespace + "|>"),

                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),

                matchExpr = {
                    "ID": new RegExp("^#(" + identifier + ")"),
                    "CLASS": new RegExp("^\\.(" + identifier + ")"),
                    "TAG": new RegExp("^(" + identifier + "|[*])"),
                    "ATTR": new RegExp("^" + attributes),
                    "PSEUDO": new RegExp("^" + pseudos),
                    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                        "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                        "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                    // For use in libraries implementing .is()
                    // We use this for POS matching in `select`
                    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                        whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                },

                rhtml = /HTML$/i,
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,

                rnative = /^[^{]+\{\s*\[native \w/,

                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                rsibling = /[+~]/,

                // CSS escapes
                // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                funescape = function (_, escaped, escapedWhitespace) {
                    var high = "0x" + escaped - 0x10000;
                    // NaN means non-codepoint
                    // Support: Firefox<24
                    // Workaround erroneous numeric interpretation of +"0x"
                    return high !== high || escapedWhitespace ?
                        escaped :
                        high < 0 ?
                            // BMP codepoint
                            String.fromCharCode(high + 0x10000) :
                            // Supplemental Plane codepoint (surrogate pair)
                            String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                },

                // CSS string/identifier serialization
                // https://drafts.csswg.org/cssom/#common-serializing-idioms
                rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
                fcssescape = function (ch, asCodePoint) {
                    if (asCodePoint) {

                        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                        if (ch === "\0") {
                            return "\uFFFD";
                        }

                        // Control characters and (dependent upon position) numbers get escaped as code points
                        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
                    }

                    // Other potentially-special ASCII characters get backslash-escaped
                    return "\\" + ch;
                },

                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function () {
                    setDocument();
                },

                inDisabledFieldset = addCombinator(
                    function (elem) {
                        return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
                    },
                    { dir: "parentNode", next: "legend" }
                );

            // Optimize for push.apply( _, NodeList )
            try {
                push.apply(
                    (arr = slice.call(preferredDoc.childNodes)),
                    preferredDoc.childNodes
                );
                // Support: Android<4.0
                // Detect silently failing push.apply
                arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
                push = {
                    apply: arr.length ?

                        // Leverage slice if possible
                        function (target, els) {
                            push_native.apply(target, slice.call(els));
                        } :

                        // Support: IE<9
                        // Otherwise append directly
                        function (target, els) {
                            var j = target.length,
                                i = 0;
                            // Can't trust NodeList.length
                            while ((target[j++] = els[i++])) { }
                            target.length = j - 1;
                        }
                };
            }

            function Sizzle(selector, context, results, seed) {
                var m, i, elem, nid, match, groups, newSelector,
                    newContext = context && context.ownerDocument,

                    // nodeType defaults to 9, since context defaults to document
                    nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (typeof selector !== "string" || !selector ||
                    nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                    return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {

                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context);
                    }
                    context = context || document;

                    if (documentIsHTML) {

                        // If the selector is sufficiently simple, try using a "get*By*" DOM method
                        // (excepting DocumentFragment context, where the methods don't exist)
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                            // ID selector
                            if ((m = match[1])) {

                                // Document context
                                if (nodeType === 9) {
                                    if ((elem = context.getElementById(m))) {

                                        // Support: IE, Opera, Webkit
                                        // TODO: identify versions
                                        // getElementById can match elements by name instead of ID
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }

                                    // Element context
                                } else {

                                    // Support: IE, Opera, Webkit
                                    // TODO: identify versions
                                    // getElementById can match elements by name instead of ID
                                    if (newContext && (elem = newContext.getElementById(m)) &&
                                        contains(context, elem) &&
                                        elem.id === m) {

                                        results.push(elem);
                                        return results;
                                    }
                                }

                                // Type selector
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results;

                                // Class selector
                            } else if ((m = match[3]) && support.getElementsByClassName &&
                                context.getElementsByClassName) {

                                push.apply(results, context.getElementsByClassName(m));
                                return results;
                            }
                        }

                        // Take advantage of querySelectorAll
                        if (support.qsa &&
                            !nonnativeSelectorCache[selector + " "] &&
                            (!rbuggyQSA || !rbuggyQSA.test(selector)) &&

                            // Support: IE 8 only
                            // Exclude object elements
                            (nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {

                            newSelector = selector;
                            newContext = context;

                            // qSA considers elements outside a scoping root when evaluating child or
                            // descendant combinators, which is not what we want.
                            // In such cases, we work around the behavior by prefixing every selector in the
                            // list with an ID selector referencing the scope context.
                            // Thanks to Andrew Dupont for this technique.
                            if (nodeType === 1 && rdescend.test(selector)) {

                                // Capture the context ID, setting it first if necessary
                                if ((nid = context.getAttribute("id"))) {
                                    nid = nid.replace(rcssescape, fcssescape);
                                } else {
                                    context.setAttribute("id", (nid = expando));
                                }

                                // Prefix every selector in the list
                                groups = tokenize(selector);
                                i = groups.length;
                                while (i--) {
                                    groups[i] = "#" + nid + " " + toSelector(groups[i]);
                                }
                                newSelector = groups.join(",");

                                // Expand context for sibling selectors
                                newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                                    context;
                            }

                            try {
                                push.apply(results,
                                    newContext.querySelectorAll(newSelector)
                                );
                                return results;
                            } catch (qsaError) {
                                nonnativeSelectorCache(selector, true);
                            } finally {
                                if (nid === expando) {
                                    context.removeAttribute("id");
                                }
                            }
                        }
                    }
                }

                // All others
                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }

            /**
             * Create key-value caches of limited size
             * @returns {function(string, object)} Returns the Object data after storing it on itself with
             *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
             *	deleting the oldest entry
             */
            function createCache() {
                var keys = [];

                function cache(key, value) {
                    // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                    if (keys.push(key + " ") > Expr.cacheLength) {
                        // Only keep the most recent entries
                        delete cache[keys.shift()];
                    }
                    return (cache[key + " "] = value);
                }
                return cache;
            }

            /**
             * Mark a function for special use by Sizzle
             * @param {Function} fn The function to mark
             */
            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }

            /**
             * Support testing using an element
             * @param {Function} fn Passed the created element and returns a boolean result
             */
            function assert(fn) {
                var el = document.createElement("fieldset");

                try {
                    return !!fn(el);
                } catch (e) {
                    return false;
                } finally {
                    // Remove from its parent by default
                    if (el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                    // release memory in IE
                    el = null;
                }
            }

            /**
             * Adds the same handler for all of the specified attrs
             * @param {String} attrs Pipe-separated list of attributes
             * @param {Function} handler The method that will be applied
             */
            function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                    i = arr.length;

                while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                }
            }

            /**
             * Checks document order of two siblings
             * @param {Element} a
             * @param {Element} b
             * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
             */
            function siblingCheck(a, b) {
                var cur = b && a,
                    diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                        a.sourceIndex - b.sourceIndex;

                // Use IE sourceIndex if available on both nodes
                if (diff) {
                    return diff;
                }

                // Check if b follows a
                if (cur) {
                    while ((cur = cur.nextSibling)) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }

                return a ? 1 : -1;
            }

            /**
             * Returns a function to use in pseudos for input types
             * @param {String} type
             */
            function createInputPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for buttons
             * @param {String} type
             */
            function createButtonPseudo(type) {
                return function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for :enabled/:disabled
             * @param {Boolean} disabled true for :disabled; false for :enabled
             */
            function createDisabledPseudo(disabled) {

                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function (elem) {

                    // Only certain elements can match :enabled or :disabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                    // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                    if ("form" in elem) {

                        // Check for inherited disabledness on relevant non-disabled elements:
                        // * listed form-associated elements in a disabled fieldset
                        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                        // * option elements in a disabled optgroup
                        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                        // All such elements have a "form" property.
                        if (elem.parentNode && elem.disabled === false) {

                            // Option elements defer to a parent optgroup if present
                            if ("label" in elem) {
                                if ("label" in elem.parentNode) {
                                    return elem.parentNode.disabled === disabled;
                                } else {
                                    return elem.disabled === disabled;
                                }
                            }

                            // Support: IE 6 - 11
                            // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                            return elem.isDisabled === disabled ||

                                // Where there is no isDisabled, check manually
                                /* jshint -W018 */
                                elem.isDisabled !== !disabled &&
                                inDisabledFieldset(elem) === disabled;
                        }

                        return elem.disabled === disabled;

                        // Try to winnow out elements that can't be disabled before trusting the disabled property.
                        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                        // even exist on them, let alone have a boolean value.
                    } else if ("label" in elem) {
                        return elem.disabled === disabled;
                    }

                    // Remaining elements are neither :enabled nor :disabled
                    return false;
                };
            }

            /**
             * Returns a function to use in pseudos for positionals
             * @param {Function} fn
             */
            function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                    argument = +argument;
                    return markFunction(function (seed, matches) {
                        var j,
                            matchIndexes = fn([], seed.length, argument),
                            i = matchIndexes.length;

                        // Match elements found at the specified indexes
                        while (i--) {
                            if (seed[(j = matchIndexes[i])]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }

            /**
             * Checks a node for validity as a Sizzle context
             * @param {Element|Object=} context
             * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
             */
            function testContext(context) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
            }

            // Expose support vars for convenience
            support = Sizzle.support = {};

            /**
             * Detects XML nodes
             * @param {Element|Object} elem An element or a document
             * @returns {Boolean} True iff elem is a non-HTML XML node
             */
            isXML = Sizzle.isXML = function (elem) {
                var namespace = elem.namespaceURI,
                    docElem = (elem.ownerDocument || elem).documentElement;

                // Support: IE <=8
                // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
                // https://bugs.jquery.com/ticket/4833
                return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
            };

            /**
             * Sets document-related variables once based on the current document
             * @param {Element|Object} [doc] An element or document object to use to set the document
             * @returns {Object} Returns the current document
             */
            setDocument = Sizzle.setDocument = function (node) {
                var hasCompare, subWindow,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                // Support: IE 9-11, Edge
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                if (preferredDoc !== document &&
                    (subWindow = document.defaultView) && subWindow.top !== subWindow) {

                    // Support: IE 11, Edge
                    if (subWindow.addEventListener) {
                        subWindow.addEventListener("unload", unloadHandler, false);

                        // Support: IE 9 - 10 only
                    } else if (subWindow.attachEvent) {
                        subWindow.attachEvent("onunload", unloadHandler);
                    }
                }

                /* Attributes
                ---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert(function (el) {
                    el.className = "i";
                    return !el.getAttribute("className");
                });

                /* getElement(s)By*
                ---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert(function (el) {
                    el.appendChild(document.createComment(""));
                    return !el.getElementsByTagName("*").length;
                });

                // Support: IE<9
                support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function (el) {
                    docElem.appendChild(el).id = expando;
                    return !document.getElementsByName || !document.getElementsByName(expando).length;
                });

                // ID filter and find
                if (support.getById) {
                    Expr.filter["ID"] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            return elem.getAttribute("id") === attrId;
                        };
                    };
                    Expr.find["ID"] = function (id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var elem = context.getElementById(id);
                            return elem ? [elem] : [];
                        }
                    };
                } else {
                    Expr.filter["ID"] = function (id) {
                        var attrId = id.replace(runescape, funescape);
                        return function (elem) {
                            var node = typeof elem.getAttributeNode !== "undefined" &&
                                elem.getAttributeNode("id");
                            return node && node.value === attrId;
                        };
                    };

                    // Support: IE 6 - 7 only
                    // getElementById is not reliable as a find shortcut
                    Expr.find["ID"] = function (id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var node, i, elems,
                                elem = context.getElementById(id);

                            if (elem) {

                                // Verify the id attribute
                                node = elem.getAttributeNode("id");
                                if (node && node.value === id) {
                                    return [elem];
                                }

                                // Fall back on getElementsByName
                                elems = context.getElementsByName(id);
                                i = 0;
                                while ((elem = elems[i++])) {
                                    node = elem.getAttributeNode("id");
                                    if (node && node.value === id) {
                                        return [elem];
                                    }
                                }
                            }

                            return [];
                        }
                    };
                }

                // Tag
                Expr.find["TAG"] = support.getElementsByTagName ?
                    function (tag, context) {
                        if (typeof context.getElementsByTagName !== "undefined") {
                            return context.getElementsByTagName(tag);

                            // DocumentFragment nodes don't have gEBTN
                        } else if (support.qsa) {
                            return context.querySelectorAll(tag);
                        }
                    } :

                    function (tag, context) {
                        var elem,
                            tmp = [],
                            i = 0,
                            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                            results = context.getElementsByTagName(tag);

                        // Filter out possible comments
                        if (tag === "*") {
                            while ((elem = results[i++])) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem);
                                }
                            }

                            return tmp;
                        }
                        return results;
                    };

                // Class
                Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
                    if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                        return context.getElementsByClassName(className);
                    }
                };

                /* QSA/matchesSelector
                ---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See https://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                    // Build QSA regex
                    // Regex strategy adopted from Diego Perini
                    assert(function (el) {
                        // Select is set to empty string on purpose
                        // This is to test IE's treatment of not explicitly
                        // setting a boolean content attribute,
                        // since its presence should be enough
                        // https://bugs.jquery.com/ticket/12359
                        docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" +
                            "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                            "<option selected=''></option></select>";

                        // Support: IE8, Opera 11-12.16
                        // Nothing should be selected when empty strings follow ^= or $= or *=
                        // The test attribute must be unknown in Opera but "safe" for WinRT
                        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                        if (el.querySelectorAll("[msallowcapture^='']").length) {
                            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                        }

                        // Support: IE8
                        // Boolean attributes and "value" are not treated correctly
                        if (!el.querySelectorAll("[selected]").length) {
                            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                        }

                        // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
                            rbuggyQSA.push("~=");
                        }

                        // Webkit/Opera - :checked should return selected option elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        // IE8 throws error here and will not see later tests
                        if (!el.querySelectorAll(":checked").length) {
                            rbuggyQSA.push(":checked");
                        }

                        // Support: Safari 8+, iOS 8+
                        // https://bugs.webkit.org/show_bug.cgi?id=136851
                        // In-page `selector#id sibling-combinator selector` fails
                        if (!el.querySelectorAll("a#" + expando + "+*").length) {
                            rbuggyQSA.push(".#.+[+~]");
                        }
                    });

                    assert(function (el) {
                        el.innerHTML = "<a href='' disabled='disabled'></a>" +
                            "<select disabled='disabled'><option/></select>";

                        // Support: Windows 8 Native Apps
                        // The type and name attributes are restricted during .innerHTML assignment
                        var input = document.createElement("input");
                        input.setAttribute("type", "hidden");
                        el.appendChild(input).setAttribute("name", "D");

                        // Support: IE8
                        // Enforce case-sensitivity of name attribute
                        if (el.querySelectorAll("[name=d]").length) {
                            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                        }

                        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                        // IE8 throws error here and will not see later tests
                        if (el.querySelectorAll(":enabled").length !== 2) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }

                        // Support: IE9-11+
                        // IE's :disabled selector does not pick up the children of disabled fieldsets
                        docElem.appendChild(el).disabled = true;
                        if (el.querySelectorAll(":disabled").length !== 2) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }

                        // Opera 10-11 does not throw on post-comma invalid pseudos
                        el.querySelectorAll("*,:x");
                        rbuggyQSA.push(",.*:");
                    });
                }

                if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                    docElem.webkitMatchesSelector ||
                    docElem.mozMatchesSelector ||
                    docElem.oMatchesSelector ||
                    docElem.msMatchesSelector)))) {

                    assert(function (el) {
                        // Check to see if it's possible to do matchesSelector
                        // on a disconnected node (IE 9)
                        support.disconnectedMatch = matches.call(el, "*");

                        // This should fail with an exception
                        // Gecko does not error, returns false instead
                        matches.call(el, "[s!='']:x");
                        rbuggyMatches.push("!=", pseudos);
                    });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                /* Contains
                ---------------------------------------------------------------------- */
                hasCompare = rnative.test(docElem.compareDocumentPosition);

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains = hasCompare || rnative.test(docElem.contains) ?
                    function (a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (
                            adown.contains ?
                                adown.contains(bup) :
                                a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                        ));
                    } :
                    function (a, b) {
                        if (b) {
                            while ((b = b.parentNode)) {
                                if (b === a) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };

                /* Sorting
                ---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare ?
                    function (a, b) {

                        // Flag for duplicate removal
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        // Sort on method existence if only one input has compareDocumentPosition
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare;
                        }

                        // Calculate position if both inputs belong to the same document
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                            a.compareDocumentPosition(b) :

                            // Otherwise we know they are disconnected
                            1;

                        // Disconnected nodes
                        if (compare & 1 ||
                            (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                            // Choose the first element that is related to our preferred document
                            if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1;
                            }

                            // Maintain original order
                            return sortInput ?
                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                0;
                        }

                        return compare & 4 ? -1 : 1;
                    } :
                    function (a, b) {
                        // Exit early if the nodes are identical
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        var cur,
                            i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];

                        // Parentless nodes are either documents or disconnected
                        if (!aup || !bup) {
                            return a === document ? -1 :
                                b === document ? 1 :
                                    aup ? -1 :
                                        bup ? 1 :
                                            sortInput ?
                                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                                0;

                            // If the nodes are siblings, we can do a quick check
                        } else if (aup === bup) {
                            return siblingCheck(a, b);
                        }

                        // Otherwise we need full lists of their ancestors for comparison
                        cur = a;
                        while ((cur = cur.parentNode)) {
                            ap.unshift(cur);
                        }
                        cur = b;
                        while ((cur = cur.parentNode)) {
                            bp.unshift(cur);
                        }

                        // Walk down the tree looking for a discrepancy
                        while (ap[i] === bp[i]) {
                            i++;
                        }

                        return i ?
                            // Do a sibling check if the nodes have a common ancestor
                            siblingCheck(ap[i], bp[i]) :

                            // Otherwise nodes in our document sort first
                            ap[i] === preferredDoc ? -1 :
                                bp[i] === preferredDoc ? 1 :
                                    0;
                    };

                return document;
            };

            Sizzle.matches = function (expr, elements) {
                return Sizzle(expr, null, null, elements);
            };

            Sizzle.matchesSelector = function (elem, expr) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                if (support.matchesSelector && documentIsHTML &&
                    !nonnativeSelectorCache[expr + " "] &&
                    (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                    (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                    try {
                        var ret = matches.call(elem, expr);

                        // IE 9's matchesSelector returns false on disconnected nodes
                        if (ret || support.disconnectedMatch ||
                            // As well, disconnected nodes are said to be in a document
                            // fragment in IE 9
                            elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) {
                        nonnativeSelectorCache(expr, true);
                    }
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
            };

            Sizzle.contains = function (context, elem) {
                // Set document vars if needed
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }
                return contains(context, elem);
            };

            Sizzle.attr = function (elem, name) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                    // Don't get fooled by Object.prototype properties (jQuery #13807)
                    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                        fn(elem, name, !documentIsHTML) :
                        undefined;

                return val !== undefined ?
                    val :
                    support.attributes || !documentIsHTML ?
                        elem.getAttribute(name) :
                        (val = elem.getAttributeNode(name)) && val.specified ?
                            val.value :
                            null;
            };

            Sizzle.escape = function (sel) {
                return (sel + "").replace(rcssescape, fcssescape);
            };

            Sizzle.error = function (msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
            };

            /**
             * Document sorting and removing duplicates
             * @param {ArrayLike} results
             */
            Sizzle.uniqueSort = function (results) {
                var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                    while ((elem = results[i++])) {
                        if (elem === results[i]) {
                            j = duplicates.push(i);
                        }
                    }
                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
            };

            /**
             * Utility function for retrieving the text value of an array of DOM nodes
             * @param {Array|Element} elem
             */
            getText = Sizzle.getText = function (elem) {
                var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                if (!nodeType) {
                    // If no nodeType, this is expected to be an array
                    while ((node = elem[i++])) {
                        // Do not traverse comment nodes
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    // Use textContent for elements
                    // innerText usage removed for consistency of new lines (jQuery #11153)
                    if (typeof elem.textContent === "string") {
                        return elem.textContent;
                    } else {
                        // Traverse its children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
                // Do not include comment or processing instruction nodes

                return ret;
            };

            Expr = Sizzle.selectors = {

                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                    ">": { dir: "parentNode", first: true },
                    " ": { dir: "parentNode" },
                    "+": { dir: "previousSibling", first: true },
                    "~": { dir: "previousSibling" }
                },

                preFilter: {
                    "ATTR": function (match) {
                        match[1] = match[1].replace(runescape, funescape);

                        // Move the given value to match[3] whether quoted or unquoted
                        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                        if (match[2] === "~=") {
                            match[3] = " " + match[3] + " ";
                        }

                        return match.slice(0, 4);
                    },

                    "CHILD": function (match) {
                        /* matches from matchExpr["CHILD"]
                            1 type (only|nth|...)
                            2 what (child|of-type)
                            3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                            4 xn-component of xn+y argument ([+-]?\d*n|)
                            5 sign of xn-component
                            6 x of xn-component
                            7 sign of y-component
                            8 y of y-component
                        */
                        match[1] = match[1].toLowerCase();

                        if (match[1].slice(0, 3) === "nth") {
                            // nth-* requires argument
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }

                            // numeric x and y parameters for Expr.filter.CHILD
                            // remember that false/true cast respectively to 0/1
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                            match[5] = +((match[7] + match[8]) || match[3] === "odd");

                            // other types prohibit arguments
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }

                        return match;
                    },

                    "PSEUDO": function (match) {
                        var excess,
                            unquoted = !match[6] && match[2];

                        if (matchExpr["CHILD"].test(match[0])) {
                            return null;
                        }

                        // Accept quoted arguments as-is
                        if (match[3]) {
                            match[2] = match[4] || match[5] || "";

                            // Strip excess characters from unquoted arguments
                        } else if (unquoted && rpseudo.test(unquoted) &&
                            // Get excess from tokenize (recursively)
                            (excess = tokenize(unquoted, true)) &&
                            // advance to the next closing parenthesis
                            (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                            // excess is a negative index
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }

                        // Return only captures needed by the pseudo filter method (type and argument)
                        return match.slice(0, 3);
                    }
                },

                filter: {

                    "TAG": function (nodeNameSelector) {
                        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                        return nodeNameSelector === "*" ?
                            function () { return true; } :
                            function (elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            };
                    },

                    "CLASS": function (className) {
                        var pattern = classCache[className + " "];

                        return pattern ||
                            (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                            classCache(className, function (elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                            });
                    },

                    "ATTR": function (name, operator, check) {
                        return function (elem) {
                            var result = Sizzle.attr(elem, name);

                            if (result == null) {
                                return operator === "!=";
                            }
                            if (!operator) {
                                return true;
                            }

                            result += "";

                            return operator === "=" ? result === check :
                                operator === "!=" ? result !== check :
                                    operator === "^=" ? check && result.indexOf(check) === 0 :
                                        operator === "*=" ? check && result.indexOf(check) > -1 :
                                            operator === "$=" ? check && result.slice(-check.length) === check :
                                                operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                                                    operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                                                        false;
                        };
                    },

                    "CHILD": function (type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth",
                            forward = type.slice(-4) !== "last",
                            ofType = what === "of-type";

                        return first === 1 && last === 0 ?

                            // Shortcut for :nth-*(n)
                            function (elem) {
                                return !!elem.parentNode;
                            } :

                            function (elem, context, xml) {
                                var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType,
                                    diff = false;

                                if (parent) {

                                    // :(first|last|only)-(child|of-type)
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while ((node = node[dir])) {
                                                if (ofType ?
                                                    node.nodeName.toLowerCase() === name :
                                                    node.nodeType === 1) {

                                                    return false;
                                                }
                                            }
                                            // Reverse direction for :only-* (if we haven't yet done so)
                                            start = dir = type === "only" && !start && "nextSibling";
                                        }
                                        return true;
                                    }

                                    start = [forward ? parent.firstChild : parent.lastChild];

                                    // non-xml :nth-child(...) stores cache data on `parent`
                                    if (forward && useCache) {

                                        // Seek `elem` from a previously-cached index

                                        // ...in a gzip-friendly way
                                        node = parent;
                                        outerCache = node[expando] || (node[expando] = {});

                                        // Support: IE <9 only
                                        // Defend against cloned attroperties (jQuery gh-1709)
                                        uniqueCache = outerCache[node.uniqueID] ||
                                            (outerCache[node.uniqueID] = {});

                                        cache = uniqueCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = nodeIndex && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];

                                        while ((node = ++nodeIndex && node && node[dir] ||

                                            // Fallback to seeking `elem` from the start
                                            (diff = nodeIndex = 0) || start.pop())) {

                                            // When found, cache indexes on `parent` and break
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                uniqueCache[type] = [dirruns, nodeIndex, diff];
                                                break;
                                            }
                                        }

                                    } else {
                                        // Use previously-cached element index if available
                                        if (useCache) {
                                            // ...in a gzip-friendly way
                                            node = elem;
                                            outerCache = node[expando] || (node[expando] = {});

                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] ||
                                                (outerCache[node.uniqueID] = {});

                                            cache = uniqueCache[type] || [];
                                            nodeIndex = cache[0] === dirruns && cache[1];
                                            diff = nodeIndex;
                                        }

                                        // xml :nth-child(...)
                                        // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                        if (diff === false) {
                                            // Use the same loop as above to seek `elem` from the start
                                            while ((node = ++nodeIndex && node && node[dir] ||
                                                (diff = nodeIndex = 0) || start.pop())) {

                                                if ((ofType ?
                                                    node.nodeName.toLowerCase() === name :
                                                    node.nodeType === 1) &&
                                                    ++diff) {

                                                    // Cache the index of each encountered element
                                                    if (useCache) {
                                                        outerCache = node[expando] || (node[expando] = {});

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[node.uniqueID] ||
                                                            (outerCache[node.uniqueID] = {});

                                                        uniqueCache[type] = [dirruns, diff];
                                                    }

                                                    if (node === elem) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    // Incorporate the offset, then check against cycle size
                                    diff -= last;
                                    return diff === first || (diff % first === 0 && diff / first >= 0);
                                }
                            };
                    },

                    "PSEUDO": function (pseudo, argument) {
                        // pseudo-class names are case-insensitive
                        // http://www.w3.org/TR/selectors/#pseudo-classes
                        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                        // Remember that setFilters inherits from pseudos
                        var args,
                            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                                Sizzle.error("unsupported pseudo: " + pseudo);

                        // The user may use createPseudo to indicate that
                        // arguments are needed to create the filter function
                        // just as Sizzle does
                        if (fn[expando]) {
                            return fn(argument);
                        }

                        // But maintain support for old signatures
                        if (fn.length > 1) {
                            args = [pseudo, pseudo, "", argument];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                                markFunction(function (seed, matches) {
                                    var idx,
                                        matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i]);
                                    }
                                }) :
                                function (elem) {
                                    return fn(elem, 0, args);
                                };
                        }

                        return fn;
                    }
                },

                pseudos: {
                    // Potentially complex pseudos
                    "not": markFunction(function (selector) {
                        // Trim the selector passed to compile
                        // to avoid treating leading and trailing
                        // spaces as combinators
                        var input = [],
                            results = [],
                            matcher = compile(selector.replace(rtrim, "$1"));

                        return matcher[expando] ?
                            markFunction(function (seed, matches, context, xml) {
                                var elem,
                                    unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;

                                // Match elements unmatched by `matcher`
                                while (i--) {
                                    if ((elem = unmatched[i])) {
                                        seed[i] = !(matches[i] = elem);
                                    }
                                }
                            }) :
                            function (elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                // Don't keep the element (issue #299)
                                input[0] = null;
                                return !results.pop();
                            };
                    }),

                    "has": markFunction(function (selector) {
                        return function (elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),

                    "contains": markFunction(function (text) {
                        text = text.replace(runescape, funescape);
                        return function (elem) {
                            return (elem.textContent || getText(elem)).indexOf(text) > -1;
                        };
                    }),

                    // "Whether an element is represented by a :lang() selector
                    // is based solely on the element's language value
                    // being equal to the identifier C,
                    // or beginning with the identifier C immediately followed by "-".
                    // The matching of C against the element's language value is performed case-insensitively.
                    // The identifier C does not have to be a valid language name."
                    // http://www.w3.org/TR/selectors/#lang-pseudo
                    "lang": markFunction(function (lang) {
                        // lang value must be a valid identifier
                        if (!ridentifier.test(lang || "")) {
                            Sizzle.error("unsupported lang: " + lang);
                        }
                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function (elem) {
                            var elemLang;
                            do {
                                if ((elemLang = documentIsHTML ?
                                    elem.lang :
                                    elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                            return false;
                        };
                    }),

                    // Miscellaneous
                    "target": function (elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },

                    "root": function (elem) {
                        return elem === docElem;
                    },

                    "focus": function (elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },

                    // Boolean properties
                    "enabled": createDisabledPseudo(false),
                    "disabled": createDisabledPseudo(true),

                    "checked": function (elem) {
                        // In CSS3, :checked should return both checked and selected elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        var nodeName = elem.nodeName.toLowerCase();
                        return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                    },

                    "selected": function (elem) {
                        // Accessing this property makes selected-by-default
                        // options in Safari work properly
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }

                        return elem.selected === true;
                    },

                    // Contents
                    "empty": function (elem) {
                        // http://www.w3.org/TR/selectors/#empty-pseudo
                        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                        //   but not by others (comment: 8; processing instruction: 7; etc.)
                        // nodeType < 6 works because attributes (2) do not appear as children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeType < 6) {
                                return false;
                            }
                        }
                        return true;
                    },

                    "parent": function (elem) {
                        return !Expr.pseudos["empty"](elem);
                    },

                    // Element/input types
                    "header": function (elem) {
                        return rheader.test(elem.nodeName);
                    },

                    "input": function (elem) {
                        return rinputs.test(elem.nodeName);
                    },

                    "button": function (elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },

                    "text": function (elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" &&
                            elem.type === "text" &&

                            // Support: IE<8
                            // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                            ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                    },

                    // Position-in-collection
                    "first": createPositionalPseudo(function () {
                        return [0];
                    }),

                    "last": createPositionalPseudo(function (matchIndexes, length) {
                        return [length - 1];
                    }),

                    "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
                        return [argument < 0 ? argument + length : argument];
                    }),

                    "even": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 0;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "odd": createPositionalPseudo(function (matchIndexes, length) {
                        var i = 1;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ?
                            argument + length :
                            argument > length ?
                                length :
                                argument;
                        for (; --i >= 0;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; ++i < length;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    })
                }
            };

            Expr.pseudos["nth"] = Expr.pseudos["eq"];

            // Add button/input type pseudos
            for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }

            // Easy API for creating new setFilters
            function setFilters() { }
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();

            tokenize = Sizzle.tokenize = function (selector, parseOnly) {
                var matched, match, tokens, type,
                    soFar, groups, preFilters,
                    cached = tokenCache[selector + " "];

                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {

                    // Comma and first run
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            // Don't consume trailing commas as valid
                            soFar = soFar.slice(match[0].length) || soFar;
                        }
                        groups.push((tokens = []));
                    }

                    matched = false;

                    // Combinators
                    if ((match = rcombinators.exec(soFar))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            // Cast descendant combinators to space
                            type: match[0].replace(rtrim, " ")
                        });
                        soFar = soFar.slice(matched.length);
                    }

                    // Filters
                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                            (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }

                    if (!matched) {
                        break;
                    }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly ?
                    soFar.length :
                    soFar ?
                        Sizzle.error(selector) :
                        // Cache the tokens
                        tokenCache(selector, groups).slice(0);
            };

            function toSelector(tokens) {
                var i = 0,
                    len = tokens.length,
                    selector = "";
                for (; i < len; i++) {
                    selector += tokens[i].value;
                }
                return selector;
            }

            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                    skip = combinator.next,
                    key = skip || dir,
                    checkNonElements = base && key === "parentNode",
                    doneName = done++;

                return combinator.first ?
                    // Check against closest ancestor/preceding element
                    function (elem, context, xml) {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml);
                            }
                        }
                        return false;
                    } :

                    // Check against all ancestor/preceding elements
                    function (elem, context, xml) {
                        var oldCache, uniqueCache, outerCache,
                            newCache = [dirruns, doneName];

                        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                        if (xml) {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true;
                                    }
                                }
                            }
                        } else {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});

                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                                    if (skip && skip === elem.nodeName.toLowerCase()) {
                                        elem = elem[dir] || elem;
                                    } else if ((oldCache = uniqueCache[key]) &&
                                        oldCache[0] === dirruns && oldCache[1] === doneName) {

                                        // Assign to newCache so results back-propagate to previous elements
                                        return (newCache[2] = oldCache[2]);
                                    } else {
                                        // Reuse newcache so results back-propagate to previous elements
                                        uniqueCache[key] = newCache;

                                        // A match means we're done; a fail means we have to keep checking
                                        if ((newCache[2] = matcher(elem, context, xml))) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                        return false;
                    };
            }

            function elementMatcher(matchers) {
                return matchers.length > 1 ?
                    function (elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false;
                            }
                        }
                        return true;
                    } :
                    matchers[0];
            }

            function multipleContexts(selector, contexts, results) {
                var i = 0,
                    len = contexts.length;
                for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }
                return results;
            }

            function condense(unmatched, map, filter, context, xml) {
                var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                for (; i < len; i++) {
                    if ((elem = unmatched[i])) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);
                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }

                return newUnmatched;
            }

            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                    var temp, i, elem,
                        preMap = [],
                        postMap = [],
                        preexisting = results.length,

                        // Get initial elements from seed or context
                        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                        // Prefilter to get matcher input, preserving a map for seed-results synchronization
                        matcherIn = preFilter && (seed || !selector) ?
                            condense(elems, preMap, preFilter, context, xml) :
                            elems,

                        matcherOut = matcher ?
                            // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                            postFinder || (seed ? preFilter : preexisting || postFilter) ?

                                // ...intermediate processing is necessary
                                [] :

                                // ...otherwise use results directly
                                results :
                            matcherIn;

                    // Find primary matches
                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }

                    // Apply postFilter
                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);

                        // Un-match failing elements by moving them back to matcherIn
                        i = temp.length;
                        while (i--) {
                            if ((elem = temp[i])) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }

                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                temp = [];
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i])) {
                                        // Restore matcherIn since elem is not yet a final match
                                        temp.push((matcherIn[i] = elem));
                                    }
                                }
                                postFinder(null, (matcherOut = []), temp, xml);
                            }

                            // Move matched elements from seed to results to keep them synchronized
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i]) &&
                                    (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }

                        // Add elements to results, through postFinder if defined
                    } else {
                        matcherOut = condense(
                            matcherOut === results ?
                                matcherOut.splice(preexisting, matcherOut.length) :
                                matcherOut
                        );
                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }

            function matcherFromTokens(tokens) {
                var checkContext, matcher, j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[tokens[0].type],
                    implicitRelative = leadingRelative || Expr.relative[" "],
                    i = leadingRelative ? 1 : 0,

                    // The foundational matcher ensures that elements are reachable from top-level context(s)
                    matchContext = addCombinator(function (elem) {
                        return elem === checkContext;
                    }, implicitRelative, true),
                    matchAnyContext = addCombinator(function (elem) {
                        return indexOf(checkContext, elem) > -1;
                    }, implicitRelative, true),
                    matchers = [function (elem, context, xml) {
                        var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                            (checkContext = context).nodeType ?
                                matchContext(elem, context, xml) :
                                matchAnyContext(elem, context, xml));
                        // Avoid hanging onto element (issue #299)
                        checkContext = null;
                        return ret;
                    }];

                for (; i < len; i++) {
                    if ((matcher = Expr.relative[tokens[i].type])) {
                        matchers = [addCombinator(elementMatcher(matchers), matcher)];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                        // Return special upon seeing a positional matcher
                        if (matcher[expando]) {
                            // Find the next relative operator (if any) for proper handling
                            j = ++i;
                            for (; j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }
                            return setMatcher(
                                i > 1 && elementMatcher(matchers),
                                i > 1 && toSelector(
                                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                    tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })
                                ).replace(rtrim, "$1"),
                                matcher,
                                i < j && matcherFromTokens(tokens.slice(i, j)),
                                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                                j < len && toSelector(tokens)
                            );
                        }
                        matchers.push(matcher);
                    }
                }

                return elementMatcher(matchers);
            }

            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function (seed, context, xml, results, outermost) {
                        var elem, j, matcher,
                            matchedCount = 0,
                            i = "0",
                            unmatched = seed && [],
                            setMatched = [],
                            contextBackup = outermostContext,
                            // We must always have either seed elements or outermost context
                            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                            // Use integer dirruns iff this is the outermost matcher
                            dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                            len = elems.length;

                        if (outermost) {
                            outermostContext = context === document || context || outermost;
                        }

                        // Add elements passing elementMatchers directly to results
                        // Support: IE<9, Safari
                        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                        for (; i !== len && (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                j = 0;
                                if (!context && elem.ownerDocument !== document) {
                                    setDocument(elem);
                                    xml = !documentIsHTML;
                                }
                                while ((matcher = elementMatchers[j++])) {
                                    if (matcher(elem, context || document, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }
                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                }
                            }

                            // Track unmatched elements for set filters
                            if (bySet) {
                                // They will have gone through all possible matchers
                                if ((elem = !matcher && elem)) {
                                    matchedCount--;
                                }

                                // Lengthen the array for every element, matched or not
                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }

                        // `i` is now the count of elements visited above, and adding it to `matchedCount`
                        // makes the latter nonnegative.
                        matchedCount += i;

                        // Apply set filters to unmatched elements
                        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                        // no element matchers and no seed.
                        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                        // numerically zero.
                        if (bySet && i !== matchedCount) {
                            j = 0;
                            while ((matcher = setMatchers[j++])) {
                                matcher(unmatched, setMatched, context, xml);
                            }

                            if (seed) {
                                // Reintegrate element matches to eliminate the need for sorting
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }

                                // Discard index placeholder values to get only actual matches
                                setMatched = condense(setMatched);
                            }

                            // Add matches to results
                            push.apply(results, setMatched);

                            // Seedless set matches succeeding multiple successful matchers stipulate sorting
                            if (outermost && !seed && setMatched.length > 0 &&
                                (matchedCount + setMatchers.length) > 1) {

                                Sizzle.uniqueSort(results);
                            }
                        }

                        // Override manipulation of globals by nested matchers
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }

                        return unmatched;
                    };

                return bySet ?
                    markFunction(superMatcher) :
                    superMatcher;
            }

            compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
                var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[selector + " "];

                if (!cached) {
                    // Generate a function of recursive functions that can be used to check each element
                    if (!match) {
                        match = tokenize(selector);
                    }
                    i = match.length;
                    while (i--) {
                        cached = matcherFromTokens(match[i]);
                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }

                    // Cache the compiled function
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                    // Save selector and tokenization
                    cached.selector = selector;
                }
                return cached;
            };

            /**
             * A low-level selection function that works with Sizzle's compiled
             *  selector functions
             * @param {String|Function} selector A selector or a pre-compiled
             *  selector function built with Sizzle.compile
             * @param {Element} context
             * @param {Array} [results]
             * @param {Array} [seed] A set of elements to match against
             */
            select = Sizzle.select = function (selector, context, results, seed) {
                var i, tokens, token, type, find,
                    compiled = typeof selector === "function" && selector,
                    match = !seed && tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {

                    // Reduce context if the leading compound selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;

                            // Precompiled matchers will still verify ancestry, so step up a level
                        } else if (compiled) {
                            context = context.parentNode;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(
                                token.matches[0].replace(runescape, funescape),
                                rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                            ))) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                    seed,
                    context,
                    !documentIsHTML,
                    results,
                    !context || rsibling.test(selector) && testContext(context.parentNode) || context
                );
                return results;
            };

            // One-time assignments

            // Sort stability
            support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

            // Support: Chrome 14-35+
            // Always assume duplicates if they aren't passed to the comparison function
            support.detectDuplicates = !!hasDuplicate;

            // Initialize against the default document
            setDocument();

            // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
            // Detached nodes confoundingly follow *each other*
            support.sortDetached = assert(function (el) {
                // Should return 1, but returns 4 (following)
                return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
            });

            // Support: IE<8
            // Prevent attribute/property "interpolation"
            // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
            if (!assert(function (el) {
                el.innerHTML = "<a href='#'></a>";
                return el.firstChild.getAttribute("href") === "#";
            })) {
                addHandle("type|href|height|width", function (elem, name, isXML) {
                    if (!isXML) {
                        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                    }
                });
            }

            // Support: IE<9
            // Use defaultValue in place of getAttribute("value")
            if (!support.attributes || !assert(function (el) {
                el.innerHTML = "<input/>";
                el.firstChild.setAttribute("value", "");
                return el.firstChild.getAttribute("value") === "";
            })) {
                addHandle("value", function (elem, name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === "input") {
                        return elem.defaultValue;
                    }
                });
            }

            // Support: IE<9
            // Use getAttributeNode to fetch booleans when getAttribute lies
            if (!assert(function (el) {
                return el.getAttribute("disabled") == null;
            })) {
                addHandle(booleans, function (elem, name, isXML) {
                    var val;
                    if (!isXML) {
                        return elem[name] === true ? name.toLowerCase() :
                            (val = elem.getAttributeNode(name)) && val.specified ?
                                val.value :
                                null;
                    }
                });
            }

            return Sizzle;

        })(window);



    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;

    // Deprecated
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;




    var dir = function (elem, dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };


    var siblings = function (n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }

        return matched;
    };


    var rneedsContext = jQuery.expr.match.needsContext;



    function nodeName(elem, name) {

        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

    };
    var rsingleTag = (/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i);



    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }

        // Single element
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not;
            });
        }

        // Arraylike of elements (jQuery, arguments, Array)
        if (typeof qualifier !== "string") {
            return jQuery.grep(elements, function (elem) {
                return (indexOf.call(qualifier, elem) > -1) !== not;
            });
        }

        // Filtered directly for both simple and complex selectors
        return jQuery.filter(qualifier, elements, not);
    }

    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];

        if (not) {
            expr = ":not(" + expr + ")";
        }

        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }

        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };

    jQuery.fn.extend({
        find: function (selector) {
            var i, ret,
                len = this.length,
                self = this;

            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            ret = this.pushStack([]);

            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }

            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test(selector) ?
                    jQuery(selector) :
                    selector || [],
                false
            ).length;
        }
    });


    // Initialize a jQuery object


    // A central reference to the root jQuery(document)
    var rootjQuery,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        // Shortcut simple #id case for speed
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

        init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }

            // Method init() accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;

            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector[0] === "<" &&
                    selector[selector.length - 1] === ">" &&
                    selector.length >= 3) {

                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];

                } else {
                    match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {

                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        // Option to run scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge(this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ));

                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {

                                // Properties of context are called as methods if possible
                                if (isFunction(this[match])) {
                                    this[match](context[match]);

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById(match[2]);

                        if (elem) {

                            // Inject the element directly into the jQuery object
                            this[0] = elem;
                            this.length = 1;
                        }
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if (isFunction(selector)) {
                return root.ready !== undefined ?
                    root.ready(selector) :

                    // Execute immediately if ready is not present
                    selector(jQuery);
            }

            return jQuery.makeArray(selector, this);
        };

    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

    // Initialize central reference
    rootjQuery = jQuery(document);


    var rparentsprev = /^(?:parents|prev(?:Until|All))/,

        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this),
                l = targets.length;

            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        closest: function (selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                targets = typeof selectors !== "string" && jQuery(selectors);

            // Positional selectors never match, since there's no _selection_ context
            if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

                        // Always skip document fragments
                        if (cur.nodeType < 11 && (targets ?
                            targets.index(cur) > -1 :

                            // Don't pass non-elements to Sizzle
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))) {

                            matched.push(cur);
                            break;
                        }
                    }
                }
            }

            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },

        // Determine the position of an element within the set
        index: function (elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // Index in selector
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }

            // Locate the position of the desired element
            return indexOf.call(this,

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem
            );
        },

        add: function (selector, context) {
            return this.pushStack(
                jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                )
            );
        },

        addBack: function (selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) { }
        return cur;
    }

    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function (elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function (elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function (elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function (elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function (elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function (elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function (elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function (elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return siblings(elem.firstChild);
        },
        contents: function (elem) {
            if (typeof elem.contentDocument !== "undefined") {
                return elem.contentDocument;
            }

            // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
            // Treat the template element as a regular one in browsers that
            // don't support it.
            if (nodeName(elem, "template")) {
                elem = elem.content || elem;
            }

            return jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);

            if (name.slice(-5) !== "Until") {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }

            if (this.length > 1) {

                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }

                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }

            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = (/[^\x20\t\r\n\f]+/g);



    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function (options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            createOptions(options) :
            jQuery.extend({}, options);

        var // Flag to know if list is currently firing
            firing,

            // Last fire value for non-forgettable lists
            memory,

            // Flag to know if list was already fired
            fired,

            // Flag to prevent firing
            locked,

            // Actual callback list
            list = [],

            // Queue of execution data for repeatable lists
            queue = [],

            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,

            // Fire callbacks
            fire = function () {

                // Enforce single-firing
                locked = locked || options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {

                        // Run callback and check for early termination
                        if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                            options.stopOnFalse) {

                            // Jump to end and forget the data so .add doesn't re-fire
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }

                // Forget the data if we're done with it
                if (!options.memory) {
                    memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if (locked) {

                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                        list = [];

                        // Otherwise, this object is spent
                    } else {
                        list = "";
                    }
                }
            },

            // Actual Callbacks object
            self = {

                // Add a callback or a collection of callbacks to the list
                add: function () {
                    if (list) {

                        // If we have memory from a past run, we should fire after adding
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }

                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && toType(arg) !== "string") {

                                    // Inspect recursively
                                    add(arg);
                                }
                            });
                        })(arguments);

                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Remove a callback from the list
                remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);

                            // Handle firing indexes
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function (fn) {
                    return fn ?
                        jQuery.inArray(fn, list) > -1 :
                        list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function () {
                    if (list) {
                        list = [];
                    }
                    return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function () {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function () {
                    return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                        list = memory = "";
                    }
                    return this;
                },
                locked: function () {
                    return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function (context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [context, args.slice ? args.slice() : args];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Call all the callbacks with the given arguments
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function () {
                    return !!fired;
                }
            };

        return self;
    };


    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }

    function adoptValue(value, resolve, reject, noValue) {
        var method;

        try {

            // Check for promise aspect first to privilege synchronous behavior
            if (value && isFunction((method = value.promise))) {
                method.call(value).done(resolve).fail(reject);

                // Other thenables
            } else if (value && isFunction((method = value.then))) {
                method.call(value, resolve, reject);

                // Other non-thenables
            } else {

                // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                // * false: [ value ].slice( 0 ) => resolve( value )
                // * true: [ value ].slice( 1 ) => resolve()
                resolve.apply(undefined, [value].slice(noValue));
            }

            // For Promises/A+, convert exceptions into rejections
            // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
            // Deferred#then to conditionally suppress rejection.
        } catch (value) {

            // Support: Android 4.0 only
            // Strict mode functions invoked without .call/.apply get global-object context
            reject.apply(undefined, [value]);
        }
    }

    jQuery.extend({

        Deferred: function (func) {
            var tuples = [

                // action, add listener, callbacks,
                // ... .then handlers, argument index, [final state]
                ["notify", "progress", jQuery.Callbacks("memory"),
                    jQuery.Callbacks("memory"), 2],
                ["resolve", "done", jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"), 0, "resolved"],
                ["reject", "fail", jQuery.Callbacks("once memory"),
                    jQuery.Callbacks("once memory"), 1, "rejected"]
            ],
                state = "pending",
                promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    "catch": function (fn) {
                        return promise.then(null, fn);
                    },

                    // Keep pipe for back-compat
                    pipe: function ( /* fnDone, fnFail, fnProgress */) {
                        var fns = arguments;

                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {

                                // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                                // deferred.progress(function() { bind to newDefer or newDefer.notify })
                                // deferred.done(function() { bind to newDefer or newDefer.resolve })
                                // deferred.fail(function() { bind to newDefer or newDefer.reject })
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && isFunction(returned.promise)) {
                                        returned.promise()
                                            .progress(newDefer.notify)
                                            .done(newDefer.resolve)
                                            .fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + "With"](
                                            this,
                                            fn ? [returned] : arguments
                                        );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                        var maxDepth = 0;
                        function resolve(depth, deferred, handler, special) {
                            return function () {
                                var that = this,
                                    args = arguments,
                                    mightThrow = function () {
                                        var returned, then;

                                        // Support: Promises/A+ section 2.3.3.3.3
                                        // https://promisesaplus.com/#point-59
                                        // Ignore double-resolution attempts
                                        if (depth < maxDepth) {
                                            return;
                                        }

                                        returned = handler.apply(that, args);

                                        // Support: Promises/A+ section 2.3.1
                                        // https://promisesaplus.com/#point-48
                                        if (returned === deferred.promise()) {
                                            throw new TypeError("Thenable self-resolution");
                                        }

                                        // Support: Promises/A+ sections 2.3.3.1, 3.5
                                        // https://promisesaplus.com/#point-54
                                        // https://promisesaplus.com/#point-75
                                        // Retrieve `then` only once
                                        then = returned &&

                                            // Support: Promises/A+ section 2.3.4
                                            // https://promisesaplus.com/#point-64
                                            // Only check objects and functions for thenability
                                            (typeof returned === "object" ||
                                                typeof returned === "function") &&
                                            returned.then;

                                        // Handle a returned thenable
                                        if (isFunction(then)) {

                                            // Special processors (notify) just wait for resolution
                                            if (special) {
                                                then.call(
                                                    returned,
                                                    resolve(maxDepth, deferred, Identity, special),
                                                    resolve(maxDepth, deferred, Thrower, special)
                                                );

                                                // Normal processors (resolve) also hook into progress
                                            } else {

                                                // ...and disregard older resolution values
                                                maxDepth++;

                                                then.call(
                                                    returned,
                                                    resolve(maxDepth, deferred, Identity, special),
                                                    resolve(maxDepth, deferred, Thrower, special),
                                                    resolve(maxDepth, deferred, Identity,
                                                        deferred.notifyWith)
                                                );
                                            }

                                            // Handle all other returned values
                                        } else {

                                            // Only substitute handlers pass on context
                                            // and multiple values (non-spec behavior)
                                            if (handler !== Identity) {
                                                that = undefined;
                                                args = [returned];
                                            }

                                            // Process the value(s)
                                            // Default process is resolve
                                            (special || deferred.resolveWith)(that, args);
                                        }
                                    },

                                    // Only normal processors (resolve) catch and reject exceptions
                                    process = special ?
                                        mightThrow :
                                        function () {
                                            try {
                                                mightThrow();
                                            } catch (e) {

                                                if (jQuery.Deferred.exceptionHook) {
                                                    jQuery.Deferred.exceptionHook(e,
                                                        process.stackTrace);
                                                }

                                                // Support: Promises/A+ section 2.3.3.3.4.1
                                                // https://promisesaplus.com/#point-61
                                                // Ignore post-resolution exceptions
                                                if (depth + 1 >= maxDepth) {

                                                    // Only substitute handlers pass on context
                                                    // and multiple values (non-spec behavior)
                                                    if (handler !== Thrower) {
                                                        that = undefined;
                                                        args = [e];
                                                    }

                                                    deferred.rejectWith(that, args);
                                                }
                                            }
                                        };

                                // Support: Promises/A+ section 2.3.3.3.1
                                // https://promisesaplus.com/#point-57
                                // Re-resolve promises immediately to dodge false rejection from
                                // subsequent errors
                                if (depth) {
                                    process();
                                } else {

                                    // Call an optional hook to record the stack, in case of exception
                                    // since it's otherwise lost when execution goes async
                                    if (jQuery.Deferred.getStackHook) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout(process);
                                }
                            };
                        }

                        return jQuery.Deferred(function (newDefer) {

                            // progress_handlers.add( ... )
                            tuples[0][3].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction(onProgress) ?
                                        onProgress :
                                        Identity,
                                    newDefer.notifyWith
                                )
                            );

                            // fulfilled_handlers.add( ... )
                            tuples[1][3].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction(onFulfilled) ?
                                        onFulfilled :
                                        Identity
                                )
                            );

                            // rejected_handlers.add( ... )
                            tuples[2][3].add(
                                resolve(
                                    0,
                                    newDefer,
                                    isFunction(onRejected) ?
                                        onRejected :
                                        Thrower
                                )
                            );
                        }).promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                },
                deferred = {};

            // Add list-specific methods
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2],
                    stateString = tuple[5];

                // promise.progress = list.add
                // promise.done = list.add
                // promise.fail = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                    list.add(
                        function () {

                            // state = "resolved" (i.e., fulfilled)
                            // state = "rejected"
                            state = stateString;
                        },

                        // rejected_callbacks.disable
                        // fulfilled_callbacks.disable
                        tuples[3 - i][2].disable,

                        // rejected_handlers.disable
                        // fulfilled_handlers.disable
                        tuples[3 - i][3].disable,

                        // progress_callbacks.lock
                        tuples[0][2].lock,

                        // progress_handlers.lock
                        tuples[0][3].lock
                    );
                }

                // progress_handlers.fire
                // fulfilled_handlers.fire
                // rejected_handlers.fire
                list.add(tuple[3].fire);

                // deferred.notify = function() { deferred.notifyWith(...) }
                // deferred.resolve = function() { deferred.resolveWith(...) }
                // deferred.reject = function() { deferred.rejectWith(...) }
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
                    return this;
                };

                // deferred.notifyWith = list.fireWith
                // deferred.resolveWith = list.fireWith
                // deferred.rejectWith = list.fireWith
                deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise(deferred);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function (singleValue) {
            var

                // count of uncompleted subordinates
                remaining = arguments.length,

                // count of unprocessed arguments
                i = remaining,

                // subordinate fulfillment data
                resolveContexts = Array(i),
                resolveValues = slice.call(arguments),

                // the master Deferred
                master = jQuery.Deferred(),

                // subordinate callback factory
                updateFunc = function (i) {
                    return function (value) {
                        resolveContexts[i] = this;
                        resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (!(--remaining)) {
                            master.resolveWith(resolveContexts, resolveValues);
                        }
                    };
                };

            // Single- and empty arguments are adopted like Promise.resolve
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject,
                    !remaining);

                // Use .then() to unwrap secondary thenables (cf. gh-3000)
                if (master.state() === "pending" ||
                    isFunction(resolveValues[i] && resolveValues[i].then)) {

                    return master.then();
                }
            }

            // Multiple arguments are aggregated like Promise.all array elements
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }

            return master.promise();
        }
    });


    // These usually indicate a programmer mistake during development,
    // warn about them ASAP rather than swallowing them by default.
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

    jQuery.Deferred.exceptionHook = function (error, stack) {

        // Support: IE 8 - 9 only
        // Console exists when dev tools are open, which can happen at any time
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
        }
    };




    //jQuery.readyException = function( error ) {
    //	window.setTimeout( function() {
    //		throw error;
    //	} );
    //};




    // The deferred used on DOM ready
    var readyList = jQuery.Deferred();

    jQuery.fn.ready = function (fn) {

        readyList
            .then(fn)

            // Wrap jQuery.readyException in a function so that the lookup
            // happens at the time of error handling instead of callback
            // registration.
            .catch(function (error) {
                jQuery.readyException(error);
            });

        return this;
    };

    jQuery.extend({

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Handle when the DOM is ready
        ready: function (wait) {

            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);
        }
    });

    jQuery.ready.then = readyList.then;

    // The ready event handler and self cleanup method
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }

    // Catch cases where $(document).ready() is called
    // after the browser event has already occurred.
    // Support: IE <=9 - 10 only
    // Older IE sometimes signals "interactive" too soon
    if (document.readyState === "complete" ||
        (document.readyState !== "loading" && !document.documentElement.doScroll)) {

        // Handle it asynchronously to allow scripts the opportunity to delay ready
        window.setTimeout(jQuery.ready);

    } else {

        // Use the handy event callback
        document.addEventListener("DOMContentLoaded", completed);

        // A fallback to window.onload, that will always work
        window.addEventListener("load", completed);
    }




    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null;

        // Sets many values
        if (toType(key) === "object") {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }

            // Sets one value
        } else if (value !== undefined) {
            chainable = true;

            if (!isFunction(value)) {
                raw = true;
            }

            if (bulk) {

                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function (elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }

            if (fn) {
                for (; i < len; i++) {
                    fn(
                        elems[i], key, raw ?
                        value :
                        value.call(elems[i], i, fn(elems[i], key))
                    );
                }
            }
        }

        if (chainable) {
            return elems;
        }

        // Gets
        if (bulk) {
            return fn.call(elems);
        }

        return len ? fn(elems[0], key) : emptyGet;
    };


    // Matches dashed string for camelizing
    var rmsPrefix = /^-ms-/,
        rdashAlpha = /-([a-z])/g;

    // Used by camelCase as callback to replace()
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }

    // Convert dashed to camelCase; used by the css and data modules
    // Support: IE <=9 - 11, Edge 12 - 15
    // Microsoft forgot to hump their vendor prefix (#9572)
    function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function (owner) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
    };




    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;

    Data.prototype = {

        cache: function (owner) {

            // Check if the owner object already has a cache
            var value = owner[this.expando];

            // If not, create one
            if (!value) {
                value = {};

                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {

                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) {
                        owner[this.expando] = value;

                        // Otherwise secure it in a non-enumerable property
                        // configurable must be true to allow the property to be
                        // deleted when data is removed
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }

            return value;
        },
        set: function (owner, data, value) {
            var prop,
                cache = this.cache(owner);

            // Handle: [ owner, key, value ] args
            // Always use camelCase key (gh-2257)
            if (typeof data === "string") {
                cache[camelCase(data)] = value;

                // Handle: [ owner, { properties } ] args
            } else {

                // Copy the properties one-by-one to the cache object
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function (owner, key) {
            return key === undefined ?
                this.cache(owner) :

                // Always use camelCase key (gh-2257)
                owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function (owner, key, value) {

            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined ||
                ((key && typeof key === "string") && value === undefined)) {

                return this.get(owner, key);
            }

            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);

            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i,
                cache = owner[this.expando];

            if (cache === undefined) {
                return;
            }

            if (key !== undefined) {

                // Support array or space separated string of keys
                if (Array.isArray(key)) {

                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ?
                        [key] :
                        (key.match(rnothtmlwhite) || []);
                }

                i = key.length;

                while (i--) {
                    delete cache[key[i]];
                }
            }

            // Remove the expando if there's no more data
            if (key === undefined || jQuery.isEmptyObject(cache)) {

                // Support: Chrome <=35 - 45
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function (owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();

    var dataUser = new Data();



    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;

    function getData(data) {
        if (data === "true") {
            return true;
        }

        if (data === "false") {
            return false;
        }

        if (data === "null") {
            return null;
        }

        // Only convert to a number if it doesn't change the string
        if (data === +data + "") {
            return +data;
        }

        if (rbrace.test(data)) {
            return JSON.parse(data);
        }

        return data;
    }

    function dataAttr(elem, key, data) {
        var name;

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = getData(data);
                } catch (e) { }

                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }

    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },

        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },

        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },

        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },

        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });

    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data,
                elem = this[0],
                attrs = elem && elem.attributes;

            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);

                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {

                            // Support: IE 11 only
                            // The attrs elements can be null (#14894)
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }

                return data;
            }

            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }

            return access(this, function (value) {
                var data;

                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {

                    // Attempt to get data from the cache
                    // The key will always be camelCased in Data
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }

                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }

                    // We tried really hard, but the data doesn't exist.
                    return;
                }

                // Set the data...
                this.each(function () {

                    // We always store the camelCased key
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },

        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });


    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },

        dequeue: function (elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function () {
                    jQuery.dequeue(elem, type);
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },

        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function (elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function () {
                    dataPriv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ?
                this :
                this.each(function () {
                    var queue = jQuery.queue(this, type, data);

                    // Ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || "fx", []);
        },

        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function (type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function () {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


    var cssExpand = ["Top", "Right", "Bottom", "Left"];

    var documentElement = document.documentElement;



    var isAttached = function (elem) {
        return jQuery.contains(elem.ownerDocument, elem);
    },
        composed = { composed: true };

    // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    // Check attachment across shadow DOM boundaries when possible (gh-3504)
    // Support: iOS 10.0-10.2 only
    // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    // leading to errors. We need to check for `getRootNode`.
    if (documentElement.getRootNode) {
        isAttached = function (elem) {
            return jQuery.contains(elem.ownerDocument, elem) ||
                elem.getRootNode(composed) === elem.ownerDocument;
        };
    }
    var isHiddenWithinTree = function (elem, el) {

        // isHiddenWithinTree might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;

        // Inline style trumps all
        return elem.style.display === "none" ||
            elem.style.display === "" &&

            // Otherwise, check computed style
            // Support: Firefox <=43 - 45
            // Disconnected elements can have computed display: none, so first confirm that elem is
            // in the document.
            isAttached(elem) &&

            jQuery.css(elem, "display") === "none";
    };

    var swap = function (elem, options, callback, args) {
        var ret, name,
            old = {};

        // Remember the old values, and insert the new ones
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        // Revert the old values
        for (name in options) {
            elem.style[name] = old[name];
        }

        return ret;
    };




    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale,
            maxIterations = 20,
            currentValue = tween ?
                function () {
                    return tween.cur();
                } :
                function () {
                    return jQuery.css(elem, prop, "");
                },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

            // Starting value computation is required for potential unit mismatches
            initialInUnit = elem.nodeType &&
                (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
                rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {

            // Support: Firefox <=54
            // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
            initial = initial / 2;

            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];

            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;

            while (maxIterations--) {

                // Evaluate and update our best guess (doubling guesses that zero out).
                // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;

            }

            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);

            // Make sure we update the tween properties later on
            valueParts = valueParts || [];
        }

        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;

            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ?
                initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }


    var defaultDisplayMap = {};

    function getDefaultDisplay(elem) {
        var temp,
            doc = elem.ownerDocument,
            nodeName = elem.nodeName,
            display = defaultDisplayMap[nodeName];

        if (display) {
            return display;
        }

        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, "display");

        temp.parentNode.removeChild(temp);

        if (display === "none") {
            display = "block";
        }
        defaultDisplayMap[nodeName] = display;

        return display;
    }

    function showHide(elements, show) {
        var display, elem,
            values = [],
            index = 0,
            length = elements.length;

        // Determine new display value for elements that need to change
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }

            display = elem.style.display;
            if (show) {

                // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                // check is required in this first loop unless we have a nonempty display value (either
                // inline or about-to-be-restored)
                if (display === "none") {
                    values[index] = dataPriv.get(elem, "display") || null;
                    if (!values[index]) {
                        elem.style.display = "";
                    }
                }
                if (elem.style.display === "" && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== "none") {
                    values[index] = "none";

                    // Remember what we're overwriting
                    dataPriv.set(elem, "display", display);
                }
            }
        }

        // Set the display of the elements in a second loop to avoid constant reflow
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }

        return elements;
    }

    jQuery.fn.extend({
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }

            return this.each(function () {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = (/^(?:checkbox|radio)$/i);

    var rtagName = (/<([a-z][^\/\0>\x20\t\r\n\f]*)/i);

    var rscriptType = (/^$|^module$|\/(?:java|ecma)script/i);



    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {

        // Support: IE <=9 only
        option: [1, "<select multiple='multiple'>", "</select>"],

        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

        _default: [0, "", ""]
    };

    // Support: IE <=9 only
    wrapMap.optgroup = wrapMap.option;

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;


    function getAll(context, tag) {

        // Support: IE <=9 - 11 only
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret;

        if (typeof context.getElementsByTagName !== "undefined") {
            ret = context.getElementsByTagName(tag || "*");

        } else if (typeof context.querySelectorAll !== "undefined") {
            ret = context.querySelectorAll(tag || "*");

        } else {
            ret = [];
        }

        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }

        return ret;
    }


    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;

        for (; i < l; i++) {
            dataPriv.set(
                elems[i],
                "globalEval",
                !refElements || dataPriv.get(refElements[i], "globalEval")
            );
        }
    }


    var rhtml = /<|&#?\w+;/;

    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for (; i < l; i++) {
            elem = elems[i];

            if (elem || elem === 0) {

                // Add nodes directly
                if (toType(elem) === "object") {

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ((elem = nodes[i++])) {

            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }

            attached = isAttached(elem);

            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");

            // Preserve script evaluation history
            if (attached) {
                setGlobalEval(tmp);
            }

            // Capture executables
            if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }

        return fragment;
    }


    (function () {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input");

        // Support: Android 4.0 - 4.3 only
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");

        div.appendChild(input);

        // Support: Android <=4.1 only
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE <=11 only
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();


    var
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    // Support: IE <=9 - 11+
    // focus() and blur() are asynchronous, except when they are no-op.
    // So expect focus to be synchronous when the element is already active,
    // and blur to be synchronous when the element is not already active.
    // (focus and blur are always synchronous in other supported browsers,
    // this just defines when we can count on it).
    function expectSync(elem, type) {
        return (elem === safeActiveElement()) === (type === "focus");
    }

    // Support: IE <=9 only
    // Accessing document.activeElement can throw unexpectedly
    // https://bugs.jquery.com/ticket/13393
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) { }
    }

    function on(elem, types, selector, data, fn, one) {
        var origFn, type;

        // Types can be a map of types/handlers
        if (typeof types === "object") {

            // ( types-Object, selector, data )
            if (typeof selector !== "string") {

                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }

        if (data == null && fn == null) {

            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {

                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {

                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }

        if (one === 1) {
            origFn = fn;
            fn = function (event) {

                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        global: {},

        add: function (elem, types, handler, data, selector) {

            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.get(elem);

            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Ensure that invalid selectors throw exceptions at attach time
            // Evaluate against documentElement in case elem is a non-element node (e.g., document)
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {

                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                        jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }

            // Handle multiple events separated by a space
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup ||
                        special.setup.call(elem, data, namespaces, eventHandle) === false) {

                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }

        },

        // Detach an event or set of events from an element
        remove: function (elem, types, handler, selector, mappedTypes) {

            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnothtmlwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] &&
                    new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector ||
                            selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown ||
                        special.teardown.call(elem, namespaces, elemData.handle) === false) {

                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }

            // Remove data and the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
            }
        },

        dispatch: function (nativeEvent) {

            // Make a writable jQuery.Event from the native event object
            var event = jQuery.event.fix(nativeEvent);

            var i, j, ret, matched, handleObj, handlerQueue,
                args = new Array(arguments.length),
                handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;

            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }

            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()) {

                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if (!event.rnamespace || handleObj.namespace === false ||
                        event.rnamespace.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                            handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        handlers: function (event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Find delegate handlers
            if (delegateCount &&

                // Support: IE <=9
                // Black-hole SVG <use> instance trees (trac-13180)
                cur.nodeType &&

                // Support: Firefox <=42
                // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                // Support: IE 11 only
                // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                !(event.type === "click" && event.button >= 1)) {

                for (; cur !== this; cur = cur.parentNode || this) {

                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) > -1 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
            }

            return handlerQueue;
        },

        addProp: function (name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,

                get: isFunction(hook) ?
                    function () {
                        if (this.originalEvent) {
                            return hook(this.originalEvent);
                        }
                    } :
                    function () {
                        if (this.originalEvent) {
                            return this.originalEvent[name];
                        }
                    },

                set: function (value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },

        fix: function (originalEvent) {
            return originalEvent[jQuery.expando] ?
                originalEvent :
                new jQuery.Event(originalEvent);
        },

        special: {
            load: {

                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            click: {

                // Utilize native event to ensure correct state for checkable inputs
                setup: function (data) {

                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Claim the first handler
                    if (rcheckableType.test(el.type) &&
                        el.click && nodeName(el, "input")) {

                        // dataPriv.set( el, "click", ... )
                        leverageNative(el, "click", returnTrue);
                    }

                    // Return false to allow normal processing in the caller
                    return false;
                },
                trigger: function (data) {

                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Force setup before triggering a click
                    if (rcheckableType.test(el.type) &&
                        el.click && nodeName(el, "input")) {

                        leverageNative(el, "click");
                    }

                    // Return non-false to allow normal event-path propagation
                    return true;
                },

                // For cross-browser consistency, suppress native .click() on links
                // Also prevent it if we're currently inside a leveraged native-event stack
                _default: function (event) {
                    var target = event.target;
                    return rcheckableType.test(target.type) &&
                        target.click && nodeName(target, "input") &&
                        dataPriv.get(target, "click") ||
                        nodeName(target, "a");
                }
            },

            beforeunload: {
                postDispatch: function (event) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };

    // Ensure the presence of an event listener that handles manually-triggered
    // synthetic events by interrupting progress until reinvoked in response to
    // *native* events that it fires directly, ensuring that state changes have
    // already occurred before other listeners are invoked.
    function leverageNative(el, type, expectSync) {

        // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
        if (!expectSync) {
            if (dataPriv.get(el, type) === undefined) {
                jQuery.event.add(el, type, returnTrue);
            }
            return;
        }

        // Register the controller as a special universal handler for all event namespaces
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
            namespace: false,
            handler: function (event) {
                var notAsync, result,
                    saved = dataPriv.get(this, type);

                if ((event.isTrigger & 1) && this[type]) {

                    // Interrupt processing of the outer synthetic .trigger()ed event
                    // Saved data should be false in such cases, but might be a leftover capture object
                    // from an async native handler (gh-4350)
                    if (!saved.length) {

                        // Store arguments for use when handling the inner native event
                        // There will always be at least one argument (an event object), so this array
                        // will not be confused with a leftover capture object.
                        saved = slice.call(arguments);
                        dataPriv.set(this, type, saved);

                        // Trigger the native event and capture its result
                        // Support: IE <=9 - 11+
                        // focus() and blur() are asynchronous
                        notAsync = expectSync(this, type);
                        this[type]();
                        result = dataPriv.get(this, type);
                        if (saved !== result || notAsync) {
                            dataPriv.set(this, type, false);
                        } else {
                            result = {};
                        }
                        if (saved !== result) {

                            // Cancel the outer synthetic event
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            return result.value;
                        }

                        // If this is an inner synthetic event for an event with a bubbling surrogate
                        // (focus or blur), assume that the surrogate already propagated from triggering the
                        // native event and prevent that from happening again here.
                        // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                        // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                        // less bad than duplication.
                    } else if ((jQuery.event.special[type] || {}).delegateType) {
                        event.stopPropagation();
                    }

                    // If this is a native event triggered above, everything is now in order
                    // Fire an inner synthetic event with the original arguments
                } else if (saved.length) {

                    // ...and capture the result
                    dataPriv.set(this, type, {
                        value: jQuery.event.trigger(

                            // Support: IE <=9 - 11+
                            // Extend with the prototype to reset the above stopImmediatePropagation()
                            jQuery.extend(saved[0], jQuery.Event.prototype),
                            saved.slice(1),
                            this
                        )
                    });

                    // Abort handling of the native event
                    event.stopImmediatePropagation();
                }
            }
        });
    }

    jQuery.removeEvent = function (elem, type, handle) {

        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };

    jQuery.Event = function (src, props) {

        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&

                // Support: Android <=2.3 only
                src.returnValue === false ?
                returnTrue :
                returnFalse;

            // Create target properties
            // Support: Safari <=6 - 7 only
            // Target should not be a text node (#504, #13143)
            this.target = (src.target && src.target.nodeType === 3) ?
                src.target.parentNode :
                src.target;

            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || Date.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
    };

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,

        preventDefault: function () {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;

            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;

            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;

            this.isImmediatePropagationStopped = returnTrue;

            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

    // Includes all common event props including KeyEvent and MouseEvent specific props
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,

        which: function (event) {
            var button = event.button;

            // Add which for key events
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }

            // Add which for click: 1 === left; 2 === middle; 3 === right
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }

                if (button & 2) {
                    return 3;
                }

                if (button & 4) {
                    return 2;
                }

                return 0;
            }

            return event.which;
        }
    }, jQuery.event.addProp);

    jQuery.each({ focus: "focusin", blur: "focusout" }, function (type, delegateType) {
        jQuery.event.special[type] = {

            // Utilize native event if possible so blur/focus sequence is correct
            setup: function () {

                // Claim the first handler
                // dataPriv.set( this, "focus", ... )
                // dataPriv.set( this, "blur", ... )
                leverageNative(this, type, expectSync);

                // Return false to allow normal processing in the caller
                return false;
            },
            trigger: function () {

                // Force setup before trigger
                leverageNative(this, type);

                // Return non-false to allow normal event-path propagation
                return true;
            },

            delegateType: delegateType
        };
    });

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function (event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    jQuery.fn.extend({

        on: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {

                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ?
                        handleObj.origType + "." + handleObj.namespace :
                        handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if (typeof types === "object") {

                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {

                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });


    var

        /* eslint-disable max-len */

        // See https://github.com/eslint/eslint/issues/3229
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

        /* eslint-enable */

        // Support: IE <=10 - 11, Edge 12 - 13 only
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,

        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    // Prefer a tbody over its parent table for containing new rows
    function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") &&
            nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

            return jQuery(elem).children("tbody")[0] || elem;
        }

        return elem;
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute("type");
        }

        return elem;
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
            return;
        }

        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;

            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};

                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }

        // 2. Copy user data
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);

            dataUser.set(dest, udataCur);
        }
    }

    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();

        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;

            // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    function domManip(collection, args, callback, ignored) {

        // Flatten any nested arrays
        args = concat.apply([], args);

        var fragment, first, scripts, hasScripts, node, doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            valueIsFunction = isFunction(value);

        // We can't cloneNode fragments that contain checked, in WebKit
        if (valueIsFunction ||
            (l > 1 && typeof value === "string" &&
                !support.checkClone && rchecked.test(value))) {
            return collection.each(function (index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }

        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;

            if (fragment.childNodes.length === 1) {
                fragment = first;
            }

            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);

                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) {

                            // Support: Android <=4.0 only, PhantomJS 1 only
                            // push.apply(_, arraylike) throws on ancient WebKit
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }

                    callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") &&
                            !dataPriv.access(node, "globalEval") &&
                            jQuery.contains(doc, node)) {

                            if (node.src && (node.type || "").toLowerCase() !== "module") {

                                // Optional AJAX dependency, but won't run scripts if not present
                                if (jQuery._evalUrl && !node.noModule) {
                                    jQuery._evalUrl(node.src, {
                                        nonce: node.nonce || node.getAttribute("nonce")
                                    });
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                            }
                        }
                    }
                }
            }
        }

        return collection;
    }

    function remove(elem, selector, keepData) {
        var node,
            nodes = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }

            if (node.parentNode) {
                if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
            }
        }

        return elem;
    }

    jQuery.extend({
        htmlPrefilter: function (html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },

        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements,
                clone = elem.cloneNode(true),
                inPage = isAttached(elem);

            // Fix IE cloning issues
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
                !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            // Return the cloned set
            return clone;
        },

        cleanData: function (elems) {
            var data, elem, type,
                special = jQuery.event.special,
                i = 0;

            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if ((data = elem[dataPriv.expando])) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }

                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {

                        // Support: Chrome <=35 - 45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });

    jQuery.fn.extend({
        detach: function (selector) {
            return remove(this, selector, true);
        },

        remove: function (selector) {
            return remove(this, selector);
        },

        text: function (value) {
            return access(this, function (value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().each(function () {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            this.textContent = value;
                        }
                    });
            }, null, value, arguments.length);
        },

        append: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },

        prepend: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },

        before: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },

        after: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },

        empty: function () {
            var elem,
                i = 0;

            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {

                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }

            return this;
        },

        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = jQuery.htmlPrefilter(value);

                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};

                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) { }
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith: function () {
            var ignored = [];

            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;

                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }

                // Force callback invocation
            }, ignored);
        }
    });

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1,
                i = 0;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Support: Android <=4.0 only, PhantomJS 1 only
                // .get() because push.apply(_, arraylike) throws on ancient WebKit
                push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

    var getStyles = function (elem) {

        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if (!view || !view.opener) {
            view = window;
        }

        return view.getComputedStyle(elem);
    };

    var rboxStyle = new RegExp(cssExpand.join("|"), "i");



    (function () {

        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {

            // This is a singleton, we need to execute it only once
            if (!div) {
                return;
            }

            container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
                "margin-top:1px;padding:0;border:0";
            div.style.cssText =
                "position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
                "margin:auto;border:1px;padding:1px;" +
                "width:60%;top:1%";
            documentElement.appendChild(container).appendChild(div);

            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";

            // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

            // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
            // Some styles come back with percentage values, even though they shouldn't
            div.style.right = "60%";
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

            // Support: IE 9 - 11 only
            // Detect misreporting of content dimensions for box-sizing:border-box elements
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

            // Support: IE 9 only
            // Detect overflow:scroll screwiness (gh-3699)
            // Support: Chrome <=64
            // Don't get tricked when zoom affects offsetWidth (gh-4029)
            div.style.position = "absolute";
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

            documentElement.removeChild(container);

            // Nullify the div so it wouldn't be stored in the memory and
            // it will also be a sign that checks already performed
            div = null;
        }

        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }

        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
            reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div");

        // Finish early in limited (non-browser) environments
        if (!div.style) {
            return;
        }

        // Support: IE <=9 - 11 only
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        jQuery.extend(support, {
            boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function () {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function () {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    })();


    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret,

            // Support: Firefox 51+
            // Retrieving style before computed somehow
            // fixes an issue with getting wrong values
            // on detached elements
            style = elem.style;

        computed = computed || getStyles(elem);

        // getPropertyValue is needed for:
        //   .css('filter') (IE 9 only, #12537)
        //   .css('--customProperty) (#3144)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];

            if (ret === "" && !isAttached(elem)) {
                ret = jQuery.style(elem, name);
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // https://drafts.csswg.org/cssom/#resolved-values
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret !== undefined ?

            // Support: IE <=9 - 11 only
            // IE returns zIndex value as an integer.
            ret + "" :
            ret;
    }


    function addGetHookIf(conditionFn, hookFn) {

        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function () {
                if (conditionFn()) {

                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }


    var cssPrefixes = ["Webkit", "Moz", "ms"],
        emptyStyle = document.createElement("div").style,
        vendorProps = {};

    // Return a vendor-prefixed property or undefined
    function vendorPropName(name) {

        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }

    // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];

        if (final) {
            return final;
        }
        if (name in emptyStyle) {
            return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
    }


    var

        // Swappable if display is none or starts with table
        // except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rcustomProp = /^--/,
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        };

    function setPositiveNumber(elem, value, subtract) {

        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ?

            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
            value;
    }

    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0,
            extra = 0,
            delta = 0;

        // Adjustment may not be necessary
        if (box === (isBorderBox ? "border" : "content")) {
            return 0;
        }

        for (; i < 4; i += 2) {

            // Both box models exclude margin
            if (box === "margin") {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }

            // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
            if (!isBorderBox) {

                // Add padding
                delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // For "border" or "margin", add border
                if (box !== "padding") {
                    delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);

                    // But still keep track of it otherwise
                } else {
                    extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }

                // If we get here with a border-box (content + padding + border), we're seeking "content" or
                // "padding" or "margin"
            } else {

                // For "content", subtract padding
                if (box === "content") {
                    delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // For "content" or "padding", subtract border
                if (box !== "margin") {
                    delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        // Account for positive content-box scroll gutter when requested by providing computedVal
        if (!isBorderBox && computedVal >= 0) {

            // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
            // Assuming integer scroll gutter, subtract the rest and round down
            delta += Math.max(0, Math.ceil(
                elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
                computedVal -
                delta -
                extra -
                0.5

                // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                // Use an explicit zero to avoid NaN (gh-3964)
            )) || 0;
        }

        return delta;
    }

    function getWidthOrHeight(elem, dimension, extra) {

        // Start with computed style
        var styles = getStyles(elem),

            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
            // Fake content-box until we know it's needed to know the true value.
            boxSizingNeeded = !support.boxSizingReliable() || extra,
            isBorderBox = boxSizingNeeded &&
                jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            valueIsBorderBox = isBorderBox,

            val = curCSS(elem, dimension, styles),
            offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);

        // Support: Firefox <=54
        // Return a confounding non-pixel value or feign ignorance, as appropriate.
        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }
            val = "auto";
        }


        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        // Support: IE 9-11 only
        // Also use offsetWidth/offsetHeight for when box sizing is unreliable
        // We use getClientRects() to check for hidden/disconnected.
        // In those cases, the computed value can be trusted to be border-box
        if ((!support.boxSizingReliable() && isBorderBox ||
            val === "auto" ||
            !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") &&
            elem.getClientRects().length) {

            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

            // Where available, offsetWidth/offsetHeight approximate border box dimensions.
            // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
            // retrieved value as a content box dimension.
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
                val = elem[offsetProp];
            }
        }

        // Normalize "" and auto
        val = parseFloat(val) || 0;

        // Adjust for the element's box model
        return (val +
            boxModelAdjustment(
                elem,
                dimension,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles,

                // Provide the current computed size to request scroll gutter calculation (gh-3589)
                val
            )
        ) + "px";
    }

    jQuery.extend({

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {

                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "gridArea": true,
            "gridColumn": true,
            "gridColumnEnd": true,
            "gridColumnStart": true,
            "gridRow": true,
            "gridRowEnd": true,
            "gridRowStart": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {},

        // Get and set the style property on a DOM Node
        style: function (elem, name, value, extra) {

            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name),
                style = elem.style;

            // Make sure that we're working with the right name. We don't
            // want to query the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) {
                name = finalPropName(origName);
            }

            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) {
                    return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                // "px" to a few hardcoded values.
                if (type === "number" && !isCustomProp) {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }

                // background-* props affect original clone's values
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined) {

                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }

            } else {

                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined) {

                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
            }
        },

        css: function (elem, name, extra, styles) {
            var val, num, hooks,
                origName = camelCase(name),
                isCustomProp = rcustomProp.test(name);

            // Make sure that we're working with the right name. We don't
            // want to modify the value if it is a CSS custom property
            // since they are user-defined.
            if (!isCustomProp) {
                name = finalPropName(origName);
            }

            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }

            return val;
        }
    });

    jQuery.each(["height", "width"], function (i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function (elem, computed, extra) {
                if (computed) {

                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, "display")) &&

                        // Support: Safari 8+
                        // Table columns in Safari have non-zero offsetWidth & zero
                        // getBoundingClientRect().width unless display is changed.
                        // Support: IE <=11 only
                        // Running getBoundingClientRect on a disconnected node
                        // in IE throws an error.
                        (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ?
                        swap(elem, cssShow, function () {
                            return getWidthOrHeight(elem, dimension, extra);
                        }) :
                        getWidthOrHeight(elem, dimension, extra);
                }
            },

            set: function (elem, value, extra) {
                var matches,
                    styles = getStyles(elem),

                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy = !support.scrollboxSize() &&
                        styles.position === "absolute",

                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox = boxSizingNeeded &&
                        jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                    subtract = extra ?
                        boxModelAdjustment(
                            elem,
                            dimension,
                            extra,
                            isBorderBox,
                            styles
                        ) :
                        0;

                // Account for unreliable border-box dimensions by comparing offset* to computed and
                // faking a content-box to get border and padding (gh-3699)
                if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(
                        elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] -
                        parseFloat(styles[dimension]) -
                        boxModelAdjustment(elem, dimension, "border", false, styles) -
                        0.5
                    );
                }

                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) &&
                    (matches[3] || "px") !== "px") {

                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }

                return setPositiveNumber(elem, value, subtract);
            }
        };
    });

    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
        function (elem, computed) {
            if (computed) {
                return (parseFloat(curCSS(elem, "marginLeft")) ||
                    elem.getBoundingClientRect().left -
                    swap(elem, { marginLeft: 0 }, function () {
                        return elem.getBoundingClientRect().left;
                    })
                ) + "px";
            }
        }
    );

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0,
                    expanded = {},

                    // Assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (prefix !== "margin") {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });

    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len,
                    map = {},
                    i = 0;

                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });


    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased,
                hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 ||
                    tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function (tween) {

                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (
                    jQuery.cssHooks[tween.prop] ||
                    tween.elem.style[finalPropName(tween.prop)] != null)) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Support: IE <=9 only
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };

    jQuery.fx = Tween.prototype.init;

    // Back compat <1.8 extension point
    jQuery.fx.step = {};




    var
        fxNow, inProgress,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }

            jQuery.fx.tick();
        }
    }

    // Animations created synchronously will run synchronously
    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return (fxNow = Date.now());
    }

    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = { height: type };

        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {

                // We're done with this property
                return tween;
            }
        }
    }

    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
            isBox = "width" in props || "height" in props,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHiddenWithinTree(elem),
            dataShow = dataPriv.get(elem, "fxshow");

        // Queue-skipping animations hijack the fx hooks
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function () {

                // Ensure the complete handler is called before this completes
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // Detect show/hide animations
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {

                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;

                        // Ignore all other no-op show/hide data
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }

        // Bail out if this is a no-op like .hide().hide()
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }

        // Restrict "overflow" and "display" styles during box animations
        if (isBox && elem.nodeType === 1) {

            // Support: IE <=9 - 11, Edge 12 - 15
            // Record all 3 overflow attributes because IE does not infer the shorthand
            // from identically-valued overflowX and overflowY and Edge just mirrors
            // the overflowX value there.
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Identify a display type, preferring old show/hide data over the CSS cascade
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, "display");
            }
            display = jQuery.css(elem, "display");
            if (display === "none") {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {

                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, "display");
                    showHide([elem]);
                }
            }

            // Animate inline elements as inline-block
            if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
                if (jQuery.css(elem, "float") === "none") {

                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                        anim.done(function () {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === "none" ? "" : display;
                        }
                    }
                    style.display = "inline-block";
                }
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }

        // Implement show/hide animations
        propTween = false;
        for (prop in orig) {

            // General show/hide setup for this element animation
            if (!propTween) {
                if (dataShow) {
                    if ("hidden" in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
                }

                // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                if (toggle) {
                    dataShow.hidden = !hidden;
                }

                // Show elements before animating them
                if (hidden) {
                    showHide([elem], true);
                }

                /* eslint-disable no-loop-func */

                anim.done(function () {

                    /* eslint-enable no-loop-func */

                    // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) {
                        showHide([elem]);
                    }
                    dataPriv.remove(elem, "fxshow");
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }

            // Per-property setup
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function () {

                // Don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                // If there's more to do, yield
                if (percent < 1 && length) {
                    return remaining;
                }

                // If this was an empty animation, synthesize a final progress notification
                if (!length) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                }

                // Resolve the animation and report its conclusion
                deferred.resolveWith(elem, [animation]);
                return false;
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end,
                        animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0,

                        // If we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [animation, 1, 0]);
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                        result.stop.bind(result);
                }
                return result;
            }
        }

        jQuery.map(props, createTween, animation);

        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        // Attach callbacks from options
        animation
            .progress(animation.opts.progress)
            .done(animation.opts.done, animation.opts.complete)
            .fail(animation.opts.fail)
            .always(animation.opts.always);

        jQuery.fx.timer(
            jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );

        return animation;
    }

    jQuery.Animation = jQuery.extend(Animation, {

        tweeners: {
            "*": [function (prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            }]
        },

        tweener: function (props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.match(rnothtmlwhite);
            }

            var prop,
                index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },

        prefilters: [defaultPrefilter],

        prefilter: function (callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });

    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing ||
                isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };

        // Go to the end state if fx are off
        if (jQuery.fx.off) {
            opt.duration = 0;

        } else {
            if (typeof opt.duration !== "number") {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];

                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }

        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function () {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        return opt;
    };

    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {

            // Show any hidden elements after setting opacity to 0
            return this.filter(isHiddenWithinTree).css("opacity", 0).show()

                // Animate to the value specified
                .end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function () {

                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || dataPriv.get(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function () {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this &&
                        (type == null || timers[index].queue === type)) {

                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function () {
                var index,
                    data = dataPriv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }

                // Look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // Look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // Turn off finishing flag
                delete data.finish;
            });
        }
    });

    jQuery.each(["toggle", "show", "hide"], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer,
            i = 0,
            timers = jQuery.timers;

        fxNow = Date.now();

        for (; i < timers.length; i++) {
            timer = timers[i];

            // Run the timer and safely remove it when done (allowing for external removal)
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };

    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (inProgress) {
            return;
        }

        inProgress = true;
        schedule();
    };

    jQuery.fx.stop = function () {
        inProgress = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,

        // Default speed
        _default: 400
    };


    // Based off of the plugin by Clint Helfers, with permission.
    // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";

        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };


    (function () {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));

        input.type = "checkbox";

        // Support: Android <=4.3 only
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";

        // Support: IE <=11 only
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;

        // Support: IE <=11 only
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();


    var boolHook,
        attrHandle = jQuery.expr.attrHandle;

    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });

    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }

            // Attribute hooks are determined by the lowercase version
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }

            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }

                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            ret = jQuery.find.attr(elem, name);

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },

        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === "radio" &&
                        nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        removeAttr: function (elem, value) {
            var name,
                i = 0,

                // Attribute names can contain non-HTML whitespace characters
                // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                attrNames = value && value.match(rnothtmlwhite);

            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    elem.removeAttribute(name);
                }
            }
        }
    });

    // Hooks for boolean attributes
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {

                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };

    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle,
                lowercaseName = name.toLowerCase();

            if (!isXML) {

                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ?
                    lowercaseName :
                    null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });




    var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;

    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });

    jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                return (elem[name] = value);
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            return elem[name];
        },

        propHooks: {
            tabIndex: {
                get: function (elem) {

                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }

                    if (
                        rfocusable.test(elem.nodeName) ||
                        rclickable.test(elem.nodeName) &&
                        elem.href
                    ) {
                        return 0;
                    }

                    return -1;
                }
            }
        },

        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });

    // Support: IE <=11 only
    // Accessing the selectedIndex property
    // forces the browser to respect setting selected
    // on the option
    // The getter ensures a default option is selected
    // when in an optgroup
    // eslint rule "no-unused-expressions" is disabled for this code
    // since it considers such accessions noop
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function (elem) {

                /* eslint no-unused-expressions: "off" */

                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;

                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }

    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });




    // Strip and collapse whitespace according to HTML spec
    // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
    }


    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }

    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }
        if (typeof value === "string") {
            return value.match(rnothtmlwhite) || [];
        }
        return [];
    }

    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }

            classes = classesToArray(value);

            if (classes.length) {
                while ((elem = this[i++])) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }

            if (!arguments.length) {
                return this.attr("class", "");
            }

            classes = classesToArray(value);

            if (classes.length) {
                while ((elem = this[i++])) {
                    curValue = getClass(elem);

                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && (" " + stripAndCollapse(curValue) + " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {

                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        toggleClass: function (value, stateVal) {
            var type = typeof value,
                isValidValue = type === "string" || Array.isArray(value);

            if (typeof stateVal === "boolean" && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }

            if (isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(
                        value.call(this, i, getClass(this), stateVal),
                        stateVal
                    );
                });
            }

            return this.each(function () {
                var className, i, self, classNames;

                if (isValidValue) {

                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);

                    while ((className = classNames[i++])) {

                        // Check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }

                    // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {

                        // Store className if set
                        dataPriv.set(this, "__className__", className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) {
                        this.setAttribute("class",
                            className || value === false ?
                                "" :
                                dataPriv.get(this, "__className__") || ""
                        );
                    }
                }
            });
        },

        hasClass: function (selector) {
            var className, elem,
                i = 0;

            className = " " + selector + " ";
            while ((elem = this[i++])) {
                if (elem.nodeType === 1 &&
                    (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
                    return true;
                }
            }

            return false;
        }
    });




    var rreturn = /\r/g;

    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, valueIsFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] ||
                        jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (hooks &&
                        "get" in hooks &&
                        (ret = hooks.get(elem, "value")) !== undefined
                    ) {
                        return ret;
                    }

                    ret = elem.value;

                    // Handle most common string cases
                    if (typeof ret === "string") {
                        return ret.replace(rreturn, "");
                    }

                    // Handle cases where value is null/undef or number
                    return ret == null ? "" : ret;
                }

                return;
            }

            valueIsFunction = isFunction(value);

            return this.each(function (i) {
                var val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";

                } else if (typeof val === "number") {
                    val += "";

                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {

                    var val = jQuery.find.attr(elem, "value");
                    return val != null ?
                        val :

                        // Support: IE <=10 - 11 only
                        // option.text throws exceptions (#14686, #14858)
                        // Strip and collapse whitespace
                        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                        stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function (elem) {
                    var value, option, i,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one",
                        values = one ? null : [],
                        max = one ? index + 1 : options.length;

                    if (index < 0) {
                        i = max;

                    } else {
                        i = one ? index : 0;
                    }

                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];

                        // Support: IE <=9 only
                        // IE8-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) &&

                            // Don't return options that are disabled or in a disabled optgroup
                            !option.disabled &&
                            (!option.parentNode.disabled ||
                                !nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    return values;
                },

                set: function (elem, value) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;

                    while (i--) {
                        option = options[i];

                        /* eslint-disable no-cond-assign */

                        if (option.selected =
                            jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
                        ) {
                            optionSet = true;
                        }

                        /* eslint-enable no-cond-assign */
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });

    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (Array.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });




    // Return jQuery for attributes-only inclusion


    support.focusin = "onfocusin" in window;


    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        stopPropagationCallback = function (e) {
            e.stopPropagation();
        };

    jQuery.extend(jQuery.event, {

        trigger: function (event, data, elem, onlyHandlers) {

            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

            cur = lastElement = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") > -1) {

                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [event] :
                jQuery.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = (dataPriv.get(cur, "events") || {})[event.type] &&
                    dataPriv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default ||
                    special._default.apply(eventPath.pop(), data) === false) &&
                    acceptData(elem)) {

                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;

                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }

                        elem[type]();

                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }

                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        // Piggyback on a donor event to simulate a different one
        // Used only for `focus(in | out)` events
        simulate: function (type, elem, event) {
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                {
                    type: type,
                    isSimulated: true
                }
            );

            jQuery.event.trigger(e, null, elem);
        }

    });

    jQuery.fn.extend({

        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });


    // Support: Firefox <=44
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    if (!support.focusin) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };

            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix);

                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix) - 1;

                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);

                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;

    var nonce = Date.now();

    var rquery = (/\?/);



    // Cross-browser xml parsing
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== "string") {
            return null;
        }

        // Support: IE 9 - 11 only
        // IE throws on parseFromString with invalid input.
        try {
            xml = (new window.DOMParser()).parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };


    var
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (Array.isArray(obj)) {

            // Serialize array item.
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {

                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {

                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                        prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                        v,
                        traditional,
                        add
                    );
                }
            });

        } else if (!traditional && toType(obj) === "object") {

            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }

        } else {

            // Serialize scalar item.
            add(prefix, obj);
        }
    }

    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function (a, traditional) {
        var prefix,
            s = [],
            add = function (key, valueOrFunction) {

                // If value is a function, invoke it and use its return value
                var value = isFunction(valueOrFunction) ?
                    valueOrFunction() :
                    valueOrFunction;

                s[s.length] = encodeURIComponent(key) + "=" +
                    encodeURIComponent(value == null ? "" : value);
            };

        if (a == null) {
            return "";
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

            // Serialize the form elements
            jQuery.each(a, function () {
                add(this.name, this.value);
            });

        } else {

            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join("&");
    };

    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {

                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this;
            })
                .filter(function () {
                    var type = this.type;

                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                    return this.name && !jQuery(this).is(":disabled") &&
                        rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                        (this.checked || !rcheckableType.test(type));
                })
                .map(function (i, elem) {
                    var val = jQuery(this).val();

                    if (val == null) {
                        return null;
                    }

                    if (Array.isArray(val)) {
                        return jQuery.map(val, function (val) {
                            return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                        });
                    }

                    return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
                }).get();
        }
    });


    var
        r20 = /%20/g,
        rhash = /#.*$/,
        rantiCache = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*"),

        // Anchor tag for parsing the document origin
        originAnchor = document.createElement("a");
    originAnchor.href = location.href;

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function (dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

            if (isFunction(func)) {

                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {

                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
            seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[dataTypeOrTransport]) {

                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {

        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {

            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }

            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev,
            converters = {},

            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while (current) {

            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }

            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }

            prev = current;
            current = dataTypes.shift();

            if (current) {

                // There's only work to do if current dataType is non-auto
                if (current === "*") {

                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {

                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return { state: "success", data: response };
    }

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",

            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": JSON.parse,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function (target, settings) {
            return settings ?

                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function (url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var transport,

                // URL without anti-cache param
                cacheURL,

                // Response headers
                responseHeadersString,
                responseHeaders,

                // timeout handle
                timeoutTimer,

                // Url cleanup var
                urlAnchor,

                // Request state (becomes false upon send and true upon completion)
                completed,

                // To know if global events are to be dispatched
                fireGlobals,

                // Loop variable
                i,

                // uncached part of the url
                uncached,

                // Create the final options object
                s = jQuery.ajaxSetup({}, options),

                // Callbacks context
                callbackContext = s.context || s,

                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                    (callbackContext.nodeType || callbackContext.jquery) ?
                    jQuery(callbackContext) :
                    jQuery.event,

                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),

                // Status-dependent callbacks
                statusCode = s.statusCode || {},

                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},

                // Default abort message
                strAbort = "canceled",

                // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function (key) {
                        var match;
                        if (completed) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase() + " "] =
                                        (responseHeaders[match[1].toLowerCase() + " "] || [])
                                            .concat(match[2]);
                                }
                            }
                            match = responseHeaders[key.toLowerCase() + " "];
                        }
                        return match == null ? null : match.join(", ");
                    },

                    // Raw string
                    getAllResponseHeaders: function () {
                        return completed ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function (name, value) {
                        if (completed == null) {
                            name = requestHeadersNames[name.toLowerCase()] =
                                requestHeadersNames[name.toLowerCase()] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function (type) {
                        if (completed == null) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (completed) {

                                // Execute the appropriate callbacks
                                jqXHR.always(map[jqXHR.status]);
                            } else {

                                // Lazy-add the new callbacks in a way that preserves old ones
                                for (code in map) {
                                    statusCode[code] = [statusCode[code], map[code]];
                                }
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise(jqXHR);

            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "")
                .replace(rprotocol, location.protocol + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                // Support: IE <=8 - 11, Edge 12 - 15
                // IE throws exception on accessing the href property if url is malformed,
                // e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;

                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                        urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {

                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (completed) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            // Remove hash to simplify url manipulation
            cacheURL = s.url.replace(rhash, "");

            // More options handling for requests with no content
            if (!s.hasContent) {

                // Remember the hash so we can put it back
                uncached = s.url.slice(cacheURL.length);

                // If data is available and should be processed, append data to url
                if (s.data && (s.processData || typeof s.data === "string")) {
                    cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add or update anti-cache param if needed
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, "$1");
                    uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + (nonce++) + uncached;
                }

                // Put hash and anti-cache on the URL that will be requested (gh-1732)
                s.url = cacheURL + uncached;

                // Change '%20' to '+' if this is encoded form body content (gh-2658)
            } else if (s.data && s.processData &&
                (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                s.data = s.data.replace(r20, "+");
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                    s.accepts[s.dataTypes[0]] +
                    (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                    s.accepts["*"]
            );

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

                // Abort if not done already and return
                return jqXHR.abort();
            }

            // Aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                // If request was aborted inside ajaxSend, stop there
                if (completed) {
                    return jqXHR;
                }

                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {

                    // Rethrow post-completion exceptions
                    if (completed) {
                        throw e;
                    }

                    // Propagate others as results
                    done(-1, e);
                }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Ignore repeat invocations
                if (completed) {
                    return;
                }

                completed = true;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";

                        // if not modified
                    } else if (status === 304) {
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {

                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError",
                        [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },

        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });

    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {

            // Shift arguments if data argument was omitted
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });


    jQuery._evalUrl = function (url, options) {
        return jQuery.ajax({
            url: url,

            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,

            // Only evaluate the response if it is successful (gh-4126)
            // dataFilter is not invoked for failure responses, so using it instead
            // of the default converter is kludgy but it works.
            converters: {
                "text script": function () { }
            },
            dataFilter: function (response) {
                jQuery.globalEval(response, options);
            }
        });
    };


    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;

            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }

                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function () {
                    var elem = this;

                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner: function (html) {
            if (isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function () {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap: function (html) {
            var htmlIsFunction = isFunction(html);

            return this.each(function (i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },

        unwrap: function (selector) {
            this.parent(selector).not("body").each(function () {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });


    jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };




    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) { }
    };

    var xhrSuccessStatus = {

        // File protocol always yields status code 0, assume 200
        0: 200,

        // Support: IE <=9 only
        // #1450: sometimes IE returns 1223 when it should be 204
        1223: 204
    },
        xhrSupported = jQuery.ajaxSettings.xhr();

    support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    support.ajax = xhrSupported = !!xhrSupported;

    jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;

        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i,
                        xhr = options.xhr();

                    xhr.open(
                        options.type,
                        options.url,
                        options.async,
                        options.username,
                        options.password
                    );

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                callback = errorCallback = xhr.onload =
                                    xhr.onerror = xhr.onabort = xhr.ontimeout =
                                    xhr.onreadystatechange = null;

                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {

                                    // Support: IE <=9 only
                                    // On a manual native abort, IE9 throws
                                    // errors on any property access that is not readyState
                                    if (typeof xhr.status !== "number") {
                                        complete(0, "error");
                                    } else {
                                        complete(

                                            // File: protocol always yields status 0; see #8605, #14207
                                            xhr.status,
                                            xhr.statusText
                                        );
                                    }
                                } else {
                                    complete(
                                        xhrSuccessStatus[xhr.status] || xhr.status,
                                        xhr.statusText,

                                        // Support: IE <=9 only
                                        // IE9 has no XHR2 but throws on binary (trac-11426)
                                        // For XHR2 non-text, let the caller handle it (gh-2498)
                                        (xhr.responseType || "text") !== "text" ||
                                            typeof xhr.responseText !== "string" ?
                                            { binary: xhr.response } :
                                            { text: xhr.responseText },
                                        xhr.getAllResponseHeaders()
                                    );
                                }
                            }
                        };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback("error");

                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {

                            // Check readyState before timeout as it changes
                            if (xhr.readyState === 4) {

                                // Allow onerror to be called first,
                                // but that will not handle a native abort
                                // Also, save errorCallback to a variable
                                // as xhr.onerror cannot be accessed
                                window.setTimeout(function () {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }

                    // Create the abort callback
                    callback = callback("abort");

                    try {

                        // Do send the request (this may raise an exception)
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {

                        // #14683: Only rethrow if this hasn't been notified as an error yet
                        if (callback) {
                            throw e;
                        }
                    }
                },

                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });




    // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });

    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function (s) {

        // This transport only deals with cross domain or forced-by-attrs requests
        if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery("<script>")
                        .attr(s.scriptAttrs || {})
                        .prop({ charset: s.scriptCharset, src: s.url })
                        .on("load error", callback = function (evt) {
                            script.remove();
                            callback = null;
                            if (evt) {
                                complete(evt.type === "error" ? 404 : 200, evt.type);
                            }
                        });

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });




    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" &&
                (s.contentType || "")
                    .indexOf("application/x-www-form-urlencoded") === 0 &&
                rjsonp.test(s.data) && "data"
            );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            // Force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function () {

                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);

                    // Otherwise restore preexisting value
                } else {
                    window[callbackName] = overwritten;
                }

                // Save back as free
                if (s[callbackName]) {

                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });




    // Support: Safari 8 only
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = (function () {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    })();


    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== "string") {
            return [];
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }

        var base, parsed, scripts;

        if (!context) {

            // Stop scripts or inline event handlers from being executed immediately
            // by using document.implementation
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument("");

                // Set the base href for the created document
                // so any parsed elements with URLs
                // are based on the document's URL (gh-2965)
                base = context.createElement("base");
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }

        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];

        // Single tag
        if (parsed) {
            return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
    };


    /**
     * Load a url into a page
     */
    jQuery.fn.load = function (url, params, callback) {
        var selector, type, response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }

        // If it's a function
        if (isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if (params && typeof params === "object") {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,

                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function (responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                    // Otherwise use the full result
                    responseText);

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                });
            });
        }

        return this;
    };




    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });




    jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };




    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

            // Set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") &&
                (curCSSTop + curCSSLeft).indexOf("auto") > -1;

            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;

            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (isFunction(options)) {

                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);

            } else {
                curElem.css(props);
            }
        }
    };

    jQuery.fn.extend({

        // offset() relates an element's border box to the document origin
        offset: function (options) {

            // Preserve chaining for setter
            if (arguments.length) {
                return options === undefined ?
                    this :
                    this.each(function (i) {
                        jQuery.offset.setOffset(this, options, i);
                    });
            }

            var rect, win,
                elem = this[0];

            if (!elem) {
                return;
            }

            // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
            // Support: IE <=11 only
            // Running getBoundingClientRect on a
            // disconnected node in IE throws an error
            if (!elem.getClientRects().length) {
                return { top: 0, left: 0 };
            }

            // Get document-relative position by adding viewport scroll to viewport-relative gBCR
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },

        // position() relates an element's margin box to its offset parent's padding box
        // This corresponds to the behavior of CSS absolute positioning
        position: function () {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset, doc,
                elem = this[0],
                parentOffset = { top: 0, left: 0 };

            // position:fixed elements are offset from the viewport, which itself always has zero offset
            if (jQuery.css(elem, "position") === "fixed") {

                // Assume position:fixed implies availability of getBoundingClientRect
                offset = elem.getBoundingClientRect();

            } else {
                offset = this.offset();

                // Account for the *real* offset parent, which can be the document or its root element
                // when a statically positioned element is identified
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (offsetParent &&
                    (offsetParent === doc.body || offsetParent === doc.documentElement) &&
                    jQuery.css(offsetParent, "position") === "static") {

                    offsetParent = offsetParent.parentNode;
                }
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {

                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
                    parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
                }
            }

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent;

                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
            });
        }
    });

    // Create scrollLeft and scrollTop methods
    jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {

                // Coalesce documents and windows
                var win;
                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }

                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }

                if (win) {
                    win.scrollTo(
                        !top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                    );

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });

    // Support: Safari <=7 - 9.1, Chrome <=37 - 49
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each(["top", "left"], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
            function (elem, computed) {
                if (computed) {
                    computed = curCSS(elem, prop);

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed) ?
                        jQuery(elem).position()[prop] + "px" :
                        computed;
                }
            }
        );
    });


    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
        jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name },
            function (defaultExtra, funcName) {

                // Margin is only for outerHeight, outerWidth
                jQuery.fn[funcName] = function (margin, value) {
                    var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                        extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                    return access(this, function (elem, type, value) {
                        var doc;

                        if (isWindow(elem)) {

                            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                            return funcName.indexOf("outer") === 0 ?
                                elem["inner" + name] :
                                elem.document.documentElement["client" + name];
                        }

                        // Get document width or height
                        if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            return Math.max(
                                elem.body["scroll" + name], doc["scroll" + name],
                                elem.body["offset" + name], doc["offset" + name],
                                doc["client" + name]
                            );
                        }

                        return value === undefined ?

                            // Get width or height on the element, requesting but not forcing parseFloat
                            jQuery.css(elem, type, extra) :

                            // Set width or height on the element
                            jQuery.style(elem, type, value, extra);
                    }, type, chainable ? margin : undefined, chainable);
                };
            });
    });


    jQuery.each(("blur focus focusin focusout resize scroll click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup contextmenu").split(" "),
        function (i, name) {

            // Handle event binding
            jQuery.fn[name] = function (data, fn) {
                return arguments.length > 0 ?
                    this.on(name, null, data, fn) :
                    this.trigger(name);
            };
        });

    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });




    jQuery.fn.extend({

        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },

        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {

            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ?
                this.off(selector, "**") :
                this.off(types, selector || "**", fn);
        }
    });

    // Bind a function to a context, optionally partially applying any
    // arguments.
    // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    // However, it is not slated for removal any time soon
    jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;

        if (typeof context === "string") {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }

        // Quick check to determine if target is callable, in the spec
        // this throws a TypeError, but we will just return undefined.
        if (!isFunction(fn)) {
            return undefined;
        }

        // Simulated bind
        args = slice.call(arguments, 2);
        proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };

        // Set the guid of unique handler to the same of original handler, so it can be removed
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;

        return proxy;
    };

    jQuery.holdReady = function (hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;

    jQuery.now = Date.now;

    jQuery.isNumeric = function (obj) {

        // As of jQuery 3.0, isNumeric is limited to
        // strings and numbers (primitives or objects)
        // that can be coerced to finite numbers (gh-2662)
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") &&

            // parseFloat NaNs numeric-cast false positives ("")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            !isNaN(obj - parseFloat(obj));
    };




    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.

    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if (typeof define === "function" && define.amd) {
        define("jquery", [], function () {
            return jQuery;
        });
    }




    var

        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$;

    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    };

    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }




    return jQuery;
});

//var commonVal = 'COMMON VALLL';

//test('bundle testttttt 22');

function hasScroll(el, direction) {

    direction = (direction === 'vertical') ? 'scrollTop' : 'scrollLeft';
    var result = !!el[direction];

    if (!result) {
        el[direction] = 1;
        result = !!el[direction];
        el[direction] = 0;
    }
    return result;
}

function elementExist(id) {
    return ($('#' + id).length > 0);
}

function ClearSession(id) {
    $.ajax({
        type: 'POST',
        url: '/home/clearsessionseat?id=' + id,
        success: function (result) {

        }
    });
}

function GetUsersCity() {

    var usercity = localStorage.getItem("city");

    if (usercity) {
        usercity = JSON.parse(usercity);
        return usercity;
    }

    return null;
}

function GetUsersCityId() {

    var usercity = localStorage.getItem("city");

    if (usercity) {
        usercity = JSON.parse(usercity);
        return usercity.id;
    }

    return null;
}

function GetUsersCityName() {

    var usercity = localStorage.getItem("city");

    if (usercity) {
        usercity = JSON.parse(usercity);
        return usercity.name;
    }

    return null;
}

function GetQsValue(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function checkCategoryFilter() {
    return sessionStorage.getItem('lastFilterCityId');
}

function GetUserArea(url, target) {

    $.ajax({
        url: url,
        dataType: "html",
        success: function (data) {

            $("#" + target).html(data);

            //$("#UserAreaDesktop a:first:not(.userName), #UserAreaMobile .loginActions a:first").text("Giriş Yap");
            //$("#UserAreaDesktop a:last:not(.userName), #UserAreaMobile .loginActions a:last").text("Üye Ol");
            //console.log("replaced", data);
        }
    });
}

function IsAndroid() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/android/i.test(userAgent)) {
        return "Android";
    }

    return false;
}

function IsIPhone() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/iPhone/.test(userAgent) && !window.MSStream) {
        return "iOS";
    }

    return false;
}

function ShowMobileAppSuggestion(appType) {

    if ($("#mobileapp-suggest").length > 0) { // && !sessionStorage.getItem("MobileAppAsked"

        $("body").on("click", ".reject", function (e) {
            $("#mobileapp-suggest").hide("slow");
        });

        $("#mobileapp-suggest").addClass(appType);
        $("#mobileapp-suggest").fadeIn("slow");
        $("#mobileapp-suggest ." + appType).show();

        sessionStorage.setItem("MobileAppAsked", true);
    }
}

(function ($, window, document, undefined) {

    if (IsIPhone()) {
        ShowMobileAppSuggestion("ios");
    }

    if (IsAndroid()) {

        ShowMobileAppSuggestion("android");
    }

    var userCity = GetUsersCity();
    //var userCityId = GetUsersCityId();

    if (userCity) {

        var removedCityId = sessionStorage.getItem("removedCityId");

        /*  console.log({ removedCityId }, { userCityId });*/

        $(".siteNav a[href], .shortCuts a[href]").each(function (index) {

            var href = $(this).attr("href");

            hrefClear = href.substring(6);

            if (hrefClear.indexOf("cityId") <= 0 && !hrefClear.startsWith("/spor") && !hrefClear.startsWith("/sport") && !hrefClear.startsWith("/etkinlikleri") && !hrefClear.startsWith("/events") && !hrefClear.startsWith("/etkinlik-takvimi") && !hrefClear.startsWith("/event-calendar") && !hrefClear.startsWith("/mekan")) {

                if (removedCityId != userCity.id) {

                    if ($(this).attr("id") != "aWebLogin" && $(this).attr("id") != "aWebRegister") {

                        if (userCity.url !== undefined) {

                            $(this).attr("href", href + "/" + userCity.url);
                        }
                        else {
                            $(this).attr("href", href + "?cityId=" + userCity.id);
                        }
                    }

                    $(this, "a.logo").attr("data-instant", "prefect");
                    $(this, "a.logo").attr("rel", "prefect");
                }
            }
            else if (hrefClear.startsWith("/etkinlik-takvimi") || hrefClear.startsWith("/event-calendar")) {

                if (removedCityId != userCity.id) {

                    if ($(this).attr("id") != "aWebLogin" && $(this).attr("id") != "aWebRegister") {
                        $(this).attr("href", href + "?cityId=" + userCity.id);
                    }
                    $(this, "a.logo").attr("data-instant", "prefect");
                    $(this, "a.logo").attr("rel", "prefect");

                }
            }
        });
    }

    var region = "tr-tr";
    if (typeof $('#hdnRegion').val() != 'undefined') {
        region = $('#hdnRegion').val();
    }
    //var url = "/" + (langCode != null ? langCode : "tr") + '/User/GetUser';
    var url = "/" + region + '/User/GetUser';
    var target = 'UserAreaMobile';

    if ($(window).width() > 980) {

        //url = "/" + (langCode != null ? langCode : "tr") + '/User/GetUserDesktop';


        url = "/" + region + '/User/GetUserDesktop';
        target = 'UserAreaDesktop';
    }

    if (controller != "Seat" && controller != "odeme" && controller != "WebLogin") {
        GetUserArea(url, target);
    }


    $(function () {
        // FireShell
        //console.log("doc ready 44");
    });

})(jQuery, window, document);

/*
 * EasyAutocomplete - Configuration 
 */
var EasyAutocomplete = (function (scope) {

    scope.Configuration = function Configuration(options) {
        var defaults = {
            data: "list-required",
            url: "list-required",
            dataType: "json",

            listLocation: function (data) {
                return data;
            },

            xmlElementName: "",

            getValue: function (element) {
                return element;
            },

            autocompleteOff: true,

            placeholder: false,

            ajaxCallback: function () { },

            matchResponseProperty: false,

            list: {
                sort: {
                    enabled: false,
                    method: function (a, b) {
                        a = defaults.getValue(a);
                        b = defaults.getValue(b);
                        if (a < b) {
                            return -1;
                        }
                        if (a > b) {
                            return 1;
                        }
                        return 0;
                    }
                },

                maxNumberOfElements: 6,

                hideOnEmptyPhrase: true,

                match: {
                    enabled: false,
                    caseSensitive: false,
                    method: function (element, phrase) {

                        if (element.search(phrase) > -1) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                },

                showAnimation: {
                    type: "normal", //normal|slide|fade
                    time: 400,
                    callback: function () { }
                },

                hideAnimation: {
                    type: "normal",
                    time: 400,
                    callback: function () { }
                },

                /* Events */
                onClickEvent: function () { },
                onSelectItemEvent: function () { },
                onLoadEvent: function () { },
                onChooseEvent: function () { },
                onKeyEnterEvent: function () { },
                onMouseOverEvent: function () { },
                onMouseOutEvent: function () { },
                onShowListEvent: function () { },
                onHideListEvent: function () { }
            },

            highlightPhrase: true,

            theme: "",

            cssClasses: "",

            minCharNumber: 0,

            requestDelay: 0,

            adjustWidth: true,

            ajaxSettings: {},

            preparePostData: function (data, inputPhrase) { return data; },

            loggerEnabled: true,

            template: "",

            categoriesAssigned: false,

            categories: [{
                maxNumberOfElements: 4
            }]

        };

        var externalObjects = ["ajaxSettings", "template"];

        this.get = function (propertyName) {
            return defaults[propertyName];
        };

        this.equals = function (name, value) {
            if (isAssigned(name)) {
                if (defaults[name] === value) {
                    return true;
                }
            }

            return false;
        };

        this.checkDataUrlProperties = function () {
            if (defaults.url === "list-required" && defaults.data === "list-required") {
                return false;
            }
            return true;
        };
        this.checkRequiredProperties = function () {
            for (var propertyName in defaults) {
                if (defaults[propertyName] === "required") {
                    logger.error("Option " + propertyName + " must be defined");
                    return false;
                }
            }
            return true;
        };

        this.printPropertiesThatDoesntExist = function (consol, optionsToCheck) {
            printPropertiesThatDoesntExist(consol, optionsToCheck);
        };


        prepareDefaults();

        mergeOptions();

        if (defaults.loggerEnabled === true) {
            printPropertiesThatDoesntExist(console, options);
        }

        addAjaxSettings();

        processAfterMerge();
        function prepareDefaults() {

            if (options.dataType === "xml") {

                if (!options.getValue) {

                    options.getValue = function (element) {
                        return $(element).text();
                    };
                }


                if (!options.list) {

                    options.list = {};
                }

                if (!options.list.sort) {
                    options.list.sort = {};
                }


                options.list.sort.method = function (a, b) {
                    a = options.getValue(a);
                    b = options.getValue(b);
                    if (a < b) {
                        return -1;
                    }
                    if (a > b) {
                        return 1;
                    }
                    return 0;
                };

                if (!options.list.match) {
                    options.list.match = {};
                }

                options.list.match.method = function (element, phrase) {

                    if (element.search(phrase) > -1) {
                        return true;
                    } else {
                        return false;
                    }
                };

            }
            if (options.categories !== undefined && options.categories instanceof Array) {

                var categories = [];

                for (var i = 0, length = options.categories.length; i < length; i += 1) {

                    var category = options.categories[i];

                    for (var property in defaults.categories[0]) {

                        if (category[property] === undefined) {
                            category[property] = defaults.categories[0][property];
                        }
                    }

                    categories.push(category);
                }

                options.categories = categories;
            }
        }

        function mergeOptions() {

            defaults = mergeObjects(defaults, options);

            function mergeObjects(source, target) {
                var mergedObject = source || {};

                for (var propertyName in source) {
                    if (target[propertyName] !== undefined && target[propertyName] !== null) {

                        if (typeof target[propertyName] !== "object" ||
                            target[propertyName] instanceof Array) {
                            mergedObject[propertyName] = target[propertyName];
                        } else {
                            mergeObjects(source[propertyName], target[propertyName]);
                        }
                    }
                }

                /* If data is an object */
                if (target.data !== undefined && target.data !== null && typeof target.data === "object") {
                    mergedObject.data = target.data;
                }

                return mergedObject;
            }
        }


        function processAfterMerge() {

            if (defaults.url !== "list-required" && typeof defaults.url !== "function") {
                var defaultUrl = defaults.url;
                defaults.url = function () {
                    return defaultUrl;
                };
            }

            if (defaults.ajaxSettings.url !== undefined && typeof defaults.ajaxSettings.url !== "function") {
                var defaultUrl = defaults.ajaxSettings.url;
                defaults.ajaxSettings.url = function () {
                    return defaultUrl;
                };
            }

            if (typeof defaults.listLocation === "string") {
                var defaultlistLocation = defaults.listLocation;

                if (defaults.dataType.toUpperCase() === "XML") {
                    defaults.listLocation = function (data) {
                        return $(data).find(defaultlistLocation);
                    };
                } else {
                    defaults.listLocation = function (data) {
                        return data[defaultlistLocation];
                    };
                }
            }

            if (typeof defaults.getValue === "string") {
                var defaultsGetValue = defaults.getValue;
                defaults.getValue = function (element) {
                    return element[defaultsGetValue];
                };
            }

            if (options.categories !== undefined) {
                defaults.categoriesAssigned = true;
            }

        }

        function addAjaxSettings() {

            if (options.ajaxSettings !== undefined && typeof options.ajaxSettings === "object") {
                defaults.ajaxSettings = options.ajaxSettings;
            } else {
                defaults.ajaxSettings = {};
            }

        }

        function isAssigned(name) {
            if (defaults[name] !== undefined && defaults[name] !== null) {
                return true;
            } else {
                return false;
            }
        }
        function printPropertiesThatDoesntExist(consol, optionsToCheck) {

            checkPropertiesIfExist(defaults, optionsToCheck);

            function checkPropertiesIfExist(source, target) {
                for (var property in target) {
                    if (source[property] === undefined) {
                        consol.log("Property '" + property + "' does not exist in EasyAutocomplete options API.");
                    }

                    if (typeof source[property] === "object" && $.inArray(property, externalObjects) === -1) {
                        checkPropertiesIfExist(source[property], target[property]);
                    }
                }
            }
        }
    };

    return scope;

})(EasyAutocomplete || {});


/*
 * EasyAutocomplete - Logger 
 */
var EasyAutocomplete = (function (scope) {

    scope.Logger = function Logger() {

        this.error = function (message) {
            //console.log("ERROR: " + message);
        };

        this.warning = function (message) {
            //console.log("WARNING: " + message);
        };
    };

    return scope;

})(EasyAutocomplete || {});


/*
 * EasyAutocomplete - Constans
 */
var EasyAutocomplete = (function (scope) {

    scope.Constans = function Constans() {
        var constants = {
            CONTAINER_CLASS: "easy-autocomplete-container",
            CONTAINER_ID: "eac-container-",

            WRAPPER_CSS_CLASS: "easy-autocomplete"
        };

        this.getValue = function (propertyName) {
            return constants[propertyName];
        };

    };

    return scope;

})(EasyAutocomplete || {});

/*
 * EasyAutocomplete - ListBuilderService 
 *
 * @author Łukasz Pawełczak 
 *
 */
var EasyAutocomplete = (function (scope) {

    scope.ListBuilderService = function ListBuilderService(configuration, proccessResponseData) {


        this.init = function (data) {
            var listBuilder = [],
                builder = {};

            builder.data = configuration.get("listLocation")(data);
            builder.getValue = configuration.get("getValue");
            builder.maxListSize = configuration.get("list").maxNumberOfElements;


            listBuilder.push(builder);

            return listBuilder;
        };

        this.updateCategories = function (listBuilder, data) {

            if (configuration.get("categoriesAssigned")) {

                listBuilder = [];

                for (var i = 0; i < configuration.get("categories").length; i += 1) {

                    var builder = convertToListBuilder(configuration.get("categories")[i], data);

                    listBuilder.push(builder);
                }

            }

            return listBuilder;
        };

        this.convertXml = function (listBuilder) {
            if (configuration.get("dataType").toUpperCase() === "XML") {

                for (var i = 0; i < listBuilder.length; i += 1) {
                    listBuilder[i].data = convertXmlToList(listBuilder[i]);
                }
            }

            return listBuilder;
        };

        this.processData = function (listBuilder, inputPhrase) {

            for (var i = 0, length = listBuilder.length; i < length; i += 1) {
                listBuilder[i].data = proccessResponseData(configuration, listBuilder[i], inputPhrase);
            }

            return listBuilder;
        };

        this.checkIfDataExists = function (listBuilders) {

            for (var i = 0, length = listBuilders.length; i < length; i += 1) {

                if (listBuilders[i].data !== undefined && listBuilders[i].data instanceof Array) {
                    if (listBuilders[i].data.length > 0) {
                        return true;
                    }
                }
            }

            return false;
        };


        function convertToListBuilder(category, data) {

            var builder = {};

            if (configuration.get("dataType").toUpperCase() === "XML") {

                builder = convertXmlToListBuilder();
            } else {

                builder = convertDataToListBuilder();
            }


            if (category.header !== undefined) {
                builder.header = category.header;
            }

            if (category.maxNumberOfElements !== undefined) {
                builder.maxNumberOfElements = category.maxNumberOfElements;
            }

            if (configuration.get("list").maxNumberOfElements !== undefined) {

                builder.maxListSize = configuration.get("list").maxNumberOfElements;
            }

            if (category.getValue !== undefined) {

                if (typeof category.getValue === "string") {
                    var defaultsGetValue = category.getValue;
                    builder.getValue = function (element) {
                        return element[defaultsGetValue];
                    };
                } else if (typeof category.getValue === "function") {
                    builder.getValue = category.getValue;
                }

            } else {
                builder.getValue = configuration.get("getValue");
            }


            return builder;


            function convertXmlToListBuilder() {

                var builder = {},
                    listLocation;

                if (category.xmlElementName !== undefined) {
                    builder.xmlElementName = category.xmlElementName;
                }

                if (category.listLocation !== undefined) {

                    listLocation = category.listLocation;
                } else if (configuration.get("listLocation") !== undefined) {

                    listLocation = configuration.get("listLocation");
                }

                if (listLocation !== undefined) {
                    if (typeof listLocation === "string") {
                        builder.data = $(data).find(listLocation);
                    } else if (typeof listLocation === "function") {

                        builder.data = listLocation(data);
                    }
                } else {

                    builder.data = data;
                }

                return builder;
            }


            function convertDataToListBuilder() {

                var builder = {};

                if (category.listLocation !== undefined) {

                    if (typeof category.listLocation === "string") {
                        builder.data = data[category.listLocation];
                    } else if (typeof category.listLocation === "function") {
                        builder.data = category.listLocation(data);
                    }
                } else {
                    builder.data = data;
                }

                return builder;
            }
        }

        function convertXmlToList(builder) {
            var simpleList = [];

            if (builder.xmlElementName === undefined) {
                builder.xmlElementName = configuration.get("xmlElementName");
            }


            $(builder.data).find(builder.xmlElementName).each(function () {
                simpleList.push(this);
            });

            return simpleList;
        }

    };

    return scope;

})(EasyAutocomplete || {});


/*
 * EasyAutocomplete - Data proccess module
 *
 * Process list to display:
 * - sort 
 * - decrease number to specific number
 * - show only matching list
 *
 */
var EasyAutocomplete = (function (scope) {

    scope.proccess = function proccessData(config, listBuilder, phrase) {

        scope.proccess.match = match;

        var list = listBuilder.data,
            inputPhrase = phrase;//TODO REFACTOR

        list = findMatch(list, inputPhrase);
        list = reduceElementsInList(list);
        list = sort(list);

        return list;


        function findMatch(list, phrase) {
            var preparedList = [],
                value = "";

            if (config.get("list").match.enabled) {

                for (var i = 0, length = list.length; i < length; i += 1) {

                    value = config.get("getValue")(list[i]);

                    if (match(value, phrase)) {
                        preparedList.push(list[i]);
                    }

                }

            } else {
                preparedList = list;
            }

            return preparedList;
        }

        function match(value, phrase) {

            if (!config.get("list").match.caseSensitive) {

                if (typeof value === "string") {
                    value = value.toLowerCase();
                }

                phrase = phrase.toLowerCase();
            }
            if (config.get("list").match.method(value, phrase)) {
                return true;
            } else {
                return false;
            }
        }

        function reduceElementsInList(list) {
            if (listBuilder.maxNumberOfElements !== undefined && list.length > listBuilder.maxNumberOfElements) {
                list = list.slice(0, listBuilder.maxNumberOfElements);
            }

            return list;
        }

        function sort(list) {
            if (config.get("list").sort.enabled) {
                list.sort(config.get("list").sort.method);
            }

            return list;
        }

    };


    return scope;


})(EasyAutocomplete || {});


/*
 * EasyAutocomplete - Template 
 *
 * 
 *
 */
var EasyAutocomplete = (function (scope) {

    scope.Template = function Template(options) {


        var genericTemplates = {
            basic: {
                type: "basic",
                method: function (element) { return element; },
                cssClass: ""
            },
            description: {
                type: "description",
                fields: {
                    description: "description"
                },
                method: function (element) { return element + " - description"; },
                cssClass: "eac-description"
            },
            iconLeft: {
                type: "iconLeft",
                fields: {
                    icon: ""
                },
                method: function (element) {
                    return element;
                },
                cssClass: "eac-icon-left"
            },
            iconRight: {
                type: "iconRight",
                fields: {
                    iconSrc: ""
                },
                method: function (element) {
                    return element;
                },
                cssClass: "eac-icon-right"
            },
            links: {
                type: "links",
                fields: {
                    link: ""
                },
                method: function (element) {
                    return element;
                },
                cssClass: ""
            },
            custom: {
                type: "custom",
                method: function () { },
                cssClass: ""
            }
        },



            /*
             * Converts method with {{text}} to function
             */
            convertTemplateToMethod = function (template) {


                var _fields = template.fields,
                    buildMethod;

                if (template.type === "description") {

                    buildMethod = genericTemplates.description.method;

                    if (typeof _fields.description === "string") {
                        buildMethod = function (elementValue, element) {
                            return elementValue + " - <span>" + element[_fields.description] + "</span>";
                        };
                    } else if (typeof _fields.description === "function") {
                        buildMethod = function (elementValue, element) {
                            return elementValue + " - <span>" + _fields.description(element) + "</span>";
                        };
                    }

                    return buildMethod;
                }

                if (template.type === "iconRight") {

                    if (typeof _fields.iconSrc === "string") {
                        buildMethod = function (elementValue, element) {
                            return elementValue + "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />";
                        };
                    } else if (typeof _fields.iconSrc === "function") {
                        buildMethod = function (elementValue, element) {
                            return elementValue + "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />";
                        };
                    }

                    return buildMethod;
                }


                if (template.type === "iconLeft") {

                    if (typeof _fields.iconSrc === "string") {
                        buildMethod = function (elementValue, element) {
                            return "<img class='eac-icon' src='" + element[_fields.iconSrc] + "' />" + elementValue;
                        };
                    } else if (typeof _fields.iconSrc === "function") {
                        buildMethod = function (elementValue, element) {
                            return "<img class='eac-icon' src='" + _fields.iconSrc(element) + "' />" + elementValue;
                        };
                    }

                    return buildMethod;
                }

                if (template.type === "links") {

                    if (typeof _fields.link === "string") {
                        buildMethod = function (elementValue, element) {
                            return "<a href='" + element[_fields.link] + "' >" + elementValue + "</a>";
                        };
                    } else if (typeof _fields.link === "function") {
                        buildMethod = function (elementValue, element) {
                            return "<a href='" + _fields.link(element) + "' >" + elementValue + "</a>";
                        };
                    }

                    return buildMethod;
                }


                if (template.type === "custom") {

                    return template.method;
                }

                return genericTemplates.basic.method;

            },


            prepareBuildMethod = function (options) {
                if (!options || !options.type) {

                    return genericTemplates.basic.method;
                }

                if (options.type && genericTemplates[options.type]) {

                    return convertTemplateToMethod(options);
                } else {

                    return genericTemplates.basic.method;
                }

            },

            templateClass = function (options) {
                var emptyStringFunction = function () { return ""; };

                if (!options || !options.type) {

                    return emptyStringFunction;
                }

                if (options.type && genericTemplates[options.type]) {
                    return (function () {
                        var _cssClass = genericTemplates[options.type].cssClass;
                        return function () { return _cssClass; };
                    })();
                } else {
                    return emptyStringFunction;
                }
            };


        this.getTemplateClass = templateClass(options);

        this.build = prepareBuildMethod(options);


    };

    return scope;

})(EasyAutocomplete || {});


/*
 * EasyAutocomplete - jQuery plugin for autocompletion
 *
 */
var EasyAutocomplete = (function (scope) {


    scope.main = function Core($input, options) {

        var module = {
            name: "EasyAutocomplete",
            shortcut: "eac"
        };

        var consts = new scope.Constans(),
            config = new scope.Configuration(options),
            logger = new scope.Logger(),
            template = new scope.Template(options.template),
            listBuilderService = new scope.ListBuilderService(config, scope.proccess),
            checkParam = config.equals,

            $field = $input,
            $container = "",
            elementsList = [],
            selectedElement = -1,
            requestDelayTimeoutId;

        scope.consts = consts;

        this.getConstants = function () {
            return consts;
        };

        this.getConfiguration = function () {
            return config;
        };

        this.getContainer = function () {
            return $container;
        };

        this.getSelectedItemIndex = function () {
            return selectedElement;
        };

        this.getItems = function () {
            return elementsList;
        };

        this.getItemData = function (index) {

            if (elementsList.length < index || elementsList[index] === undefined) {
                return -1;
            } else {
                return elementsList[index];
            }
        };

        this.getSelectedItemData = function () {
            return this.getItemData(selectedElement);
        };

        this.build = function () {
            prepareField();
        };

        this.init = function () {
            init();
        };
        function init() {

            if ($field.length === 0) {
                logger.error("Input field doesn't exist.");
                return;
            }

            if (!config.checkDataUrlProperties()) {
                logger.error("One of options variables 'data' or 'url' must be defined.");
                return;
            }

            if (!config.checkRequiredProperties()) {
                logger.error("Will not work without mentioned properties.");
                return;
            }


            prepareField();
            bindEvents();

        }
        function prepareField() {


            if ($field.parent().hasClass(consts.getValue("WRAPPER_CSS_CLASS"))) {
                removeContainer();
                removeWrapper();
            }

            createWrapper();
            createContainer();

            $container = $("#" + getContainerId());
            if (config.get("placeholder")) {
                $field.attr("placeholder", config.get("placeholder"));
            }


            function createWrapper() {
                var $wrapper = $("<div>"),
                    classes = consts.getValue("WRAPPER_CSS_CLASS");


                if (config.get("theme") && config.get("theme") !== "") {
                    classes += " eac-" + config.get("theme");
                }

                if (config.get("cssClasses") && config.get("cssClasses") !== "") {
                    classes += " " + config.get("cssClasses");
                }

                if (template.getTemplateClass() !== "") {
                    classes += " " + template.getTemplateClass();
                }


                $wrapper
                    .addClass(classes);
                $field.wrap($wrapper);


                if (config.get("adjustWidth") === true) {
                    adjustWrapperWidth();
                }


            }

            function adjustWrapperWidth() {
                var fieldWidth = $field.outerWidth();

                $field.parent().css("width", fieldWidth);
            }

            function removeWrapper() {
                $field.unwrap();
            }

            function createContainer() {
                var $elements_container = $("<div>").addClass(consts.getValue("CONTAINER_CLASS"));

                $elements_container
                    .attr("id", getContainerId())
                    .prepend($("<ul>"));


                (function () {

                    $elements_container
                        /* List show animation */
                        .on("show.eac", function () {

                            switch (config.get("list").showAnimation.type) {

                                case "slide":
                                    var animationTime = config.get("list").showAnimation.time,
                                        callback = config.get("list").showAnimation.callback;

                                    $elements_container.find("ul").slideDown(animationTime, callback);
                                    break;

                                case "fade":
                                    var animationTime = config.get("list").showAnimation.time,
                                        callback = config.get("list").showAnimation.callback;

                                    $elements_container.find("ul").fadeIn(animationTime), callback;
                                    break;

                                default:
                                    $elements_container.find("ul").show();
                                    break;
                            }

                            config.get("list").onShowListEvent();

                        })
                        /* List hide animation */
                        .on("hide.eac", function () {

                            switch (config.get("list").hideAnimation.type) {

                                case "slide":
                                    var animationTime = config.get("list").hideAnimation.time,
                                        callback = config.get("list").hideAnimation.callback;

                                    $elements_container.find("ul").slideUp(animationTime, callback);
                                    break;

                                case "fade":
                                    var animationTime = config.get("list").hideAnimation.time,
                                        callback = config.get("list").hideAnimation.callback;

                                    $elements_container.find("ul").fadeOut(animationTime, callback);
                                    break;

                                default:
                                    $elements_container.find("ul").hide();
                                    break;
                            }

                            config.get("list").onHideListEvent();

                        })
                        .on("selectElement.eac", function () {
                            $elements_container.find("ul li").removeClass("selected");
                            $elements_container.find("ul li").eq(selectedElement).addClass("selected");

                            config.get("list").onSelectItemEvent();
                        })
                        .on("loadElements.eac", function (event, listBuilders, phrase) {


                            var $item = "",
                                $listContainer = $elements_container.find("ul");

                            $listContainer
                                .empty()
                                .detach();

                            elementsList = [];
                            var counter = 0;
                            for (var builderIndex = 0, listBuildersLength = listBuilders.length; builderIndex < listBuildersLength; builderIndex += 1) {

                                var listData = listBuilders[builderIndex].data;

                                if (listData.length === 0) {
                                    continue;
                                }

                                if (listBuilders[builderIndex].header !== undefined && listBuilders[builderIndex].header.length > 0) {
                                    $listContainer.append("<div class='eac-category' >" + listBuilders[builderIndex].header + "</div>");
                                }

                                for (var i = 0, listDataLength = listData.length; i < listDataLength && counter < listBuilders[builderIndex].maxListSize; i += 1) {
                                    $item = $("<li><div class='eac-item'></div></li>");


                                    (function () {
                                        var j = i,
                                            itemCounter = counter,
                                            elementsValue = listBuilders[builderIndex].getValue(listData[j]);

                                        $item.find(" > div")
                                            .on("click", function () {

                                                $field.val(elementsValue).trigger("change");

                                                selectedElement = itemCounter;
                                                selectElement(itemCounter);

                                                config.get("list").onClickEvent();
                                                config.get("list").onChooseEvent();
                                            })
                                            .mouseover(function () {

                                                selectedElement = itemCounter;
                                                selectElement(itemCounter);

                                                config.get("list").onMouseOverEvent();
                                            })
                                            .mouseout(function () {
                                                config.get("list").onMouseOutEvent();
                                            })
                                            .html(template.build(highlight(elementsValue, phrase), listData[j]));
                                    })();

                                    $listContainer.append($item);
                                    elementsList.push(listData[i]);
                                    counter += 1;
                                }
                            }

                            $elements_container.append($listContainer);

                            config.get("list").onLoadEvent();
                        });

                })();

                $field.after($elements_container);
            }

            function removeContainer() {
                $field.next("." + consts.getValue("CONTAINER_CLASS")).remove();
            }

            function highlight(string, phrase) {

                if (config.get("highlightPhrase") && phrase !== "") {
                    return highlightPhrase(string, phrase);
                } else {
                    return string;
                }

            }

            function escapeRegExp(str) {
                return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
            }

            function highlightPhrase(string, phrase) {
                var escapedPhrase = escapeRegExp(phrase);
                return (string + "").replace(new RegExp("(" + escapedPhrase + ")", "gi"), "<b>$1</b>");
            }



        }
        function getContainerId() {

            var elementId = $field.attr("id");

            elementId = consts.getValue("CONTAINER_ID") + elementId;

            return elementId;
        }
        function bindEvents() {

            bindAllEvents();


            function bindAllEvents() {
                if (checkParam("autocompleteOff", true)) {
                    removeAutocomplete();
                }

                bindFocusOut();
                bindKeyup();
                bindKeydown();
                bindKeypress();
                bindFocus();
                bindBlur();
            }

            function bindFocusOut() {
                $field.focusout(function () {

                    var fieldValue = $field.val(),
                        phrase;

                    if (!config.get("list").match.caseSensitive) {
                        fieldValue = fieldValue.toLowerCase();
                    }

                    for (var i = 0, length = elementsList.length; i < length; i += 1) {

                        phrase = config.get("getValue")(elementsList[i]);
                        if (!config.get("list").match.caseSensitive) {
                            phrase = phrase.toLowerCase();
                        }

                        if (phrase === fieldValue) {
                            selectedElement = i;
                            selectElement(selectedElement);
                            return;
                        }
                    }
                });
            }

            function bindKeyup() {
                $field
                    .off("keyup")
                    .keyup(function (event) {

                        switch (event.keyCode) {

                            case 27:

                                hideContainer();
                                loseFieldFocus();
                                break;

                            case 38:

                                event.preventDefault();

                                if (elementsList.length > 0 && selectedElement > 0) {

                                    selectedElement -= 1;

                                    $field.val(config.get("getValue")(elementsList[selectedElement]));

                                    selectElement(selectedElement);

                                }
                                break;

                            case 40:

                                event.preventDefault();

                                if (elementsList.length > 0 && selectedElement < elementsList.length - 1) {

                                    selectedElement += 1;

                                    $field.val(config.get("getValue")(elementsList[selectedElement]));

                                    selectElement(selectedElement);

                                }

                                break;

                            default:

                                if (event.keyCode > 40 || event.keyCode === 8) {

                                    var inputPhrase = $field.val();

                                    if (!(config.get("list").hideOnEmptyPhrase === true && event.keyCode === 8 && inputPhrase === "")) {

                                        if (config.get("requestDelay") > 0) {
                                            if (requestDelayTimeoutId !== undefined) {
                                                clearTimeout(requestDelayTimeoutId);
                                            }

                                            requestDelayTimeoutId = setTimeout(function () { loadData(inputPhrase); }, config.get("requestDelay"));
                                        } else {
                                            loadData(inputPhrase);
                                        }

                                    } else {
                                        hideContainer();
                                    }

                                }


                                break;
                        }


                        function loadData(inputPhrase) {


                            if (inputPhrase.length < config.get("minCharNumber")) {
                                return;
                            }


                            if (config.get("data") !== "list-required") {

                                var data = config.get("data");

                                var listBuilders = listBuilderService.init(data);

                                listBuilders = listBuilderService.updateCategories(listBuilders, data);

                                listBuilders = listBuilderService.processData(listBuilders, inputPhrase);

                                loadElements(listBuilders, inputPhrase);

                                if ($field.parent().find("li").length > 0) {
                                    showContainer();
                                } else {
                                    hideContainer();
                                }

                            }

                            var settings = createAjaxSettings();

                            if (settings.url === undefined || settings.url === "") {
                                settings.url = config.get("url");
                            }

                            if (settings.dataType === undefined || settings.dataType === "") {
                                settings.dataType = config.get("dataType");
                            }


                            if (settings.url !== undefined && settings.url !== "list-required") {

                                settings.url = settings.url(inputPhrase);

                                settings.data = config.get("preparePostData")(settings.data, inputPhrase);

                                $.ajax(settings)
                                    .done(function (data) {

                                        var listBuilders = listBuilderService.init(data);

                                        listBuilders = listBuilderService.updateCategories(listBuilders, data);

                                        listBuilders = listBuilderService.convertXml(listBuilders);
                                        if (checkInputPhraseMatchResponse(inputPhrase, data)) {

                                            listBuilders = listBuilderService.processData(listBuilders, inputPhrase);

                                            loadElements(listBuilders, inputPhrase);

                                        }

                                        if (listBuilderService.checkIfDataExists(listBuilders) && $field.parent().find("li").length > 0) {
                                            showContainer();
                                        } else {
                                            hideContainer();
                                        }

                                        config.get("ajaxCallback")();

                                    })
                                    .fail(function () {
                                        logger.warning("Fail to load response data");
                                    })
                                    .always(function () {

                                    });
                            }



                            function createAjaxSettings() {

                                var settings = {},
                                    ajaxSettings = config.get("ajaxSettings") || {};

                                for (var set in ajaxSettings) {
                                    settings[set] = ajaxSettings[set];
                                }

                                return settings;
                            }

                            function checkInputPhraseMatchResponse(inputPhrase, data) {

                                if (config.get("matchResponseProperty") !== false) {
                                    if (typeof config.get("matchResponseProperty") === "string") {
                                        return (data[config.get("matchResponseProperty")] === inputPhrase);
                                    }

                                    if (typeof config.get("matchResponseProperty") === "function") {
                                        return (config.get("matchResponseProperty")(data) === inputPhrase);
                                    }

                                    return true;
                                } else {
                                    return true;
                                }

                            }

                        }


                    });
            }

            function bindKeydown() {
                $field
                    .on("keydown", function (evt) {
                        evt = evt || window.event;
                        var keyCode = evt.keyCode;
                        if (keyCode === 38) {
                            suppressKeypress = true;
                            return false;
                        }
                    })
                    .keydown(function (event) {

                        if (event.keyCode === 13 && selectedElement > -1) {

                            $field.val(config.get("getValue")(elementsList[selectedElement]));

                            config.get("list").onKeyEnterEvent();
                            config.get("list").onChooseEvent();

                            selectedElement = -1;
                            hideContainer();

                            event.preventDefault();
                        }
                    });
            }

            function bindKeypress() {
                $field
                    .off("keypress");
            }

            function bindFocus() {
                $field.focus(function () {

                    if ($field.val() !== "" && elementsList.length > 0) {

                        selectedElement = -1;
                        showContainer();
                    }

                });
            }

            function bindBlur() {
                $field.blur(function () {
                    setTimeout(function () {

                        selectedElement = -1;
                        hideContainer();
                    }, 250);
                });
            }

            function removeAutocomplete() {
                $field.attr("autocomplete", "off");
            }

        }

        function showContainer() {
            $container.trigger("show.eac");
        }

        function hideContainer() {
            $container.trigger("hide.eac");
        }

        function selectElement(index) {

            $container.trigger("selectElement.eac", index);
        }

        function loadElements(list, phrase) {
            $container.trigger("loadElements.eac", [list, phrase]);
        }

        function loseFieldFocus() {
            $field.trigger("blur");
        }


    };
    scope.eacHandles = [];

    scope.getHandle = function (id) {
        return scope.eacHandles[id];
    };

    scope.inputHasId = function (input) {

        if ($(input).attr("id") !== undefined && $(input).attr("id").length > 0) {
            return true;
        } else {
            return false;
        }

    };

    scope.assignRandomId = function (input) {

        var fieldId = "";

        do {
            fieldId = "eac-" + Math.floor(Math.random() * 10000);
        } while ($("#" + fieldId).length !== 0);

        elementId = scope.consts.getValue("CONTAINER_ID") + fieldId;

        $(input).attr("id", fieldId);

    };

    scope.setHandle = function (handle, id) {
        scope.eacHandles[id] = handle;
    };


    return scope;

})(EasyAutocomplete || {});

(function ($) {

    $.fn.easyAutocomplete = function (options) {

        return this.each(function () {
            var $this = $(this),
                eacHandle = new EasyAutocomplete.main($this, options);

            if (!EasyAutocomplete.inputHasId($this)) {
                EasyAutocomplete.assignRandomId($this);
            }

            eacHandle.init();

            EasyAutocomplete.setHandle(eacHandle, $this.attr("id"));

        });
    };

    $.fn.getSelectedItemIndex = function () {

        var inputId = $(this).attr("id");

        if (inputId !== undefined) {
            return EasyAutocomplete.getHandle(inputId).getSelectedItemIndex();
        }

        return -1;
    };

    $.fn.getItems = function () {

        var inputId = $(this).attr("id");

        if (inputId !== undefined) {
            return EasyAutocomplete.getHandle(inputId).getItems();
        }

        return -1;
    };

    $.fn.getItemData = function (index) {

        var inputId = $(this).attr("id");

        if (inputId !== undefined && index > -1) {
            return EasyAutocomplete.getHandle(inputId).getItemData(index);
        }

        return -1;
    };

    $.fn.getSelectedItemData = function () {

        var inputId = $(this).attr("id");

        if (inputId !== undefined) {
            return EasyAutocomplete.getHandle(inputId).getSelectedItemData();
        }

        return -1;
    };

})(jQuery);

function test(message) {
    //console.log(message);
}

function getLangAndRegion() {
    var region = "tr-tr";
    if (typeof $('#hdnRegion').val() != 'undefined') {
        region = $('#hdnRegion').val();
    }
    return region;
}

(function ($, window, document, undefined) {

    //$("#etkinlik").html('bbb');

    //console.log(commonVal);

    $(function () {
        // FireShell
        //console.log("doc ready 44");
    });

})(jQuery, window, document);

(function ($, window, document, undefined) {

    var $heroSearch = $('.searchForm input:first'); //.searchBar input:first, 
    var $topSearch = $('.searchBar input:first'); //.searchBar input:first, 

    var heroOptions = {

        minCharNumber: 3,
        url: function (phrase) {
            return "/" + getLangAndRegion() + "/Search/Complete";
        },

        getValue: function (element) {
            return element.FilmName;
        },

        ajaxSettings: {
            dataType: "json",
            method: "GET",
            data: {
                //dataType: "json"
            }
        },

        preparePostData: function (data) {
            data.term = $heroSearch.val();
            return data;
        },


        template: {
            type: "custom",
            method: function (value, item) {


                return (

                    ((item.ItemType == "Cinema") ? ("<a href='" + item.Link + "'>") : ("<a href='/" + item.OrganizerTypeUrl + '/' + item.SeoUrl + "'>"))
                    + (item.ImageUrlCdn ? "<img src='" + item.ImageUrlCdn + "' style='width:50px;' /> " : "<span class='no-image'></span>")
                    + "<div>"
                    + "<span class='event-name'>" + item.FilmName
                    + ((item.MadeYear != null && item.MadeYear != "0") ? (" <span class='made-year'> (" + item.MadeYear + ')</span>') : "")
                    + "</span>"
                    + ((item.ItemType == "Mekan" && item.CityName) ? (" <p class='place'>" + item.CityName + '</p>') : "")

                    + ((item.People != null && item.People.length > 5) ? (" <span class='people'>" + item.People + '</span>') : "")
                    + (((item.People == null || item.People.length <= 5) && item.FilmCities != null && item.FilmCities != "") ? " <span class='cities'>" + item.FilmCities + '</span>' : "")
                    + "<span class='badge badge_" + item.OrganizerType + "'>" + item.OrganizerTypeStr + "</span>"
                    + "</div></a>");
            }
        },

        //theme: "dark",

        requestDelay: 400
    };

    var topSearchOptions = {
        minCharNumber: 3,

        url: function (phrase) {
            return "/Search/Complete";
        },

        getValue: function (element) {
            return element.FilmName;
        },

        ajaxSettings: {
            dataType: "json",
            method: "GET",
            data: {
                //dataType: "json"
            }
        },

        preparePostData: function (data) {
            data.term = $topSearch.val();
            return data;
        },


        template: {
            type: "custom",
            method: function (value, item) {
                return ((item.ItemType == "Cinema") ? ("<a href='" + item.Link + "'>") : ("<a href='/" + item.OrganizerTypeUrl + '/' + item.SeoUrl + "'>"))
                    + (item.ImageUrlCdn ? "<img src='" + item.ImageUrlCdn + "' style='width:50px;' /> " : "<span class='no-image'></span>")
                    + "<div>"
                    + "<span class='event-name'>" + item.FilmName
                    + ((item.MadeYear != null && item.MadeYear != "0") ? (" <span class='made-year'> (" + item.MadeYear + ')</span>') : "")
                    + "</span>"
                    + ((item.ItemType == "Mekan" && item.CityName) ? (" <p class='place'>" + item.CityName + '</p>') : "")
                    + ((item.People != null && item.People.length > 5) ? (" <span class='people'>" + item.People.replace(',', ', ') + '</span>') : "")
                    + (((item.People == null || item.People.length <= 5) && item.FilmCities != null && item.FilmCities != "") ? " <span class='cities'>" + item.FilmCities.replace(',', ', ') + '</span>' : "")
                    + "<span class='badge badge_" + item.OrganizerType + "'>" + item.OrganizerTypeStr
                    + "</span></div></a>";
            }
        },


        //theme: "dark",

        requestDelay: 400
    };





    if ($(window).width() > 980) {

        $heroSearch.easyAutocomplete(heroOptions);

    } else {

        $(".heroSearch .searchInput").click(function (e) {
            $(".gSearch").trigger("click");
        });
    }


    $topSearch.easyAutocomplete(topSearchOptions);

})(jQuery, window, document);

isAllSeancesAlreadyOpen = false;
function showMap() {

    if ($('.gallery').hasClass('active')) {
        $('.gallery').removeClass('active');
        $('#toggleGallery').removeClass('active');
    }

    $('.placeMap').toggleClass('active');
    $('#toggleMap').toggleClass('active');
    return false;
}
function showGallery() {

    if ($('.placeMap').hasClass('active')) {
        $('.placeMap').removeClass('active');
        $('#toggleMap').removeClass('active');
    }

    $('.gallery').toggleClass('active');
    $('#toggleGallery').toggleClass('active');
    return false;
}
var _cityStates = {
    categoryFilterCase: checkCategoryFilter(),
    globalCityCase: GetUsersCityId(),
    globalCityName: GetUsersCityName(),
    seanceFilterCase: null,
}
function manageCityStates() {
    if (_cityStates.seanceFilterCase === null) {
        if (_cityStates.categoryFilterCase === null) {
            return _cityStates.globalCityCase;
        }
        else {
            return _cityStates.categoryFilterCase;
        }
    }
    else {
        return _cityStates.seanceFilterCase;
    }
}
var versionFlag = '';
var timeDimension = '';
function showTimeDimensions() {
    $("#timeDimens").toggleClass('active');
    return false;
}
function setTimeDimens(val) {

    $('a[data-val]').each(function () {

        $(this).removeClass('active');

        if ($(this).data('val') == val) {
            $(this).addClass('active');
        }
    });

    $('.clearTime').show();

    $("#timePrev").html($('a[data-val="' + val + '"]').html());

    showTimeDimensions();
    timeDimension = val;
    filterSaloonList($('#seancesKey').val());
}
function clearTime() {
    $('.clearTime').hide();
    timeDimension = '';
    filterSaloonList($('#seancesKey').val());
    $('#timePrev').html('Zaman Seçiniz');
    $('a[data-val]').each(function () {

        $(this).removeClass('active');

    });
}
function clearKey() {
    $('#seancesKey').val('');
    filterSaloonList('');
}
function filterSaloonList(args) {

    if (args != '') {
        $('.clearKey').show();
    }
    else {
        $('.clearKey').hide();
    }

    $('.seanceTable tr').each(function () {


        var timeFlag;
        var saloonFlag;

        if (timeDimension != "") {
            $(this).find(".seanceSummary").each(function () {

                var isFlag = $(this).find("li[data-timing='" + timeDimension + "']").length > 0;

                if (isFlag) {
                    $(this).show();
                    $(this).find("li").each(function (index) {
                        if ($(this).data('timing') == timeDimension) {
                            timeFlag = true;
                            $(this).css("opacity", "1");
                        }
                        else {
                            timeFlag = false;
                            $(this).css("opacity", ".4");
                        }
                    });
                }
                else {
                    $(this).hide();
                }


            });
        }
        else {
            timeFlag = true;
            $('.seanceSummary').show();
            $('li[data-timing]').css('opacity', '1');
        }

        var saloonName = $(this).data('loc');
        var saloonFlag = saloonName.toLocaleUpperCase().indexOf(args.toLocaleUpperCase()) >= 0;

        if (saloonFlag && timeFlag) {
            $(this).show();
        }
        else {
            $(this).hide();
        }
    })
}
function LoadSeances(cityId, seanceDate) {

    var cinemaIdParam = "";
    if (typeof cinemaId != 'undefined' && cinemaId > 0) {
        cinemaIdParam = "/" + cinemaId;
    }

    if (typeof cityId === "undefined") {

        console.log("şehir seçimi yok!");
    }
    else if (!isAllSeancesAlreadyOpen) {

        $.ajax({
            url: '/dynamic/get_seances/' + eventId + '/' + cityId + '/' + seanceDate + '/' + langId + '/' + countryCode + cinemaIdParam,
            dataType: "html",
            beforeSend: function () {
                $("#divSeanceList").html("<center><img src='" + cdnPath + "/Content/newsite/assets/images/ajax-loader.gif' /></center>");

            },
            success: function (data) {
                $(".yn_cinemaList").css("display", "block");
                $("#divSeanceList").html(data);

            }
        });
    }
}
function GetCityEvents(cityId) {
    $.ajax({
        url: '/details/cityevents/' + organizerType + '/' + cityId,
        dataType: "html",
        beforeSend: function () {
            $("#eventsFromYourCity").html("<center><img src='" + cdnPath + "/Content/newsite/assets/images/ajax-loader.gif' /></center>");
        },
        success: function (data) {
            $("#eventsFromYourCity").html(data);
        }
    });
}
function LoadDates(cityId, eventId) {

    var cinemaIdParam = "";
    if (typeof cinemaId != 'undefined' && cinemaId > 0) {
        cinemaIdParam = "&cinemaId=" + cinemaId;
    }

    if (!isAllSeancesAlreadyOpen) {

        $.ajax({
            url: '/details/GetDateListForCity?eventId=' + eventId + '&langId=' + langId + '&cityId=' + cityId + cinemaIdParam,
            dataType: "html",
            beforeSend: function () {
                $(".yn_date__container").html("<span style='margin:2% auto'><img src='" + cdnPath + "/Content/newsite/assets/images/ajax-loader.gif' /></span>");
            },


            success: function (data) {

                //$("#navigationDateContainer").html(data);
                $(".yn_date__container").html(data);





                var seanceView = $('#seanceDates');

                //seanceView.owlCarousel({
                //    loop: false,
                //    margin: 0,
                //    nav: true,
                //    dots: false,
                //    slideBy: 3,
                //    responsive: {
                //        0: {
                //            items: 3
                //        },
                //        600: {
                //            items: 3
                //        },
                //        1000: {
                //            items: 4
                //        }
                //    }
                //});

                $('#fprev').click(function () {
                    seanceView.trigger('prev.owl.carousel');
                    $('#fnext').removeClass('disabled');
                    if ($('.owl-prev').hasClass('disabled')) {
                        $(this).addClass('disabled');
                    };
                });
                $('#fnext').click(function () {
                    seanceView.trigger('next.owl.carousel');
                    $('#fprev').removeClass('disabled');
                    if ($('.owl-next').hasClass('disabled')) {
                        $(this).addClass('disabled');
                    };
                });

                if ($(window).width() < 767) {

                    seanceView.on('changed.owl.carousel', function (e) {

                        $('#date-' + e.relatedTarget.current()).toggleClass('yn_active');
                        console.log($('#date-' + e.relatedTarget.current()));

                        LoadSeances(manageCityStates(), $(".yn_active").val());
                    })

                }


                /*  LoadSeances(cityId, $('#date-0').val());*/
                LoadSeances(cityId, $('#date-0').attr("data-date"));
                $('.yn_cinema_info_date span').text($('#date-0').attr("data-dateStr"));


                $('#date-0').toggleClass('yn_active');


                /*  $(".navigateDates").show();*/
            }
        });
    }
}
function driveToSeances() {
    $('html, body').animate({
        scrollTop: $("#seance-filter-form").offset().top - 55
    }, 1000);
}
function checkForCity() {

    if ($(".ed-biletler button").length > 0) {
        $('html, body').animate({
            scrollTop: $(".ed-biletler").offset().top - 55
        }, 1000);
    }

    if ($("#divSeanceList").html() != '') {

        //$("#event-dates-btn").trigger("click");

        $('html, body').animate({
            scrollTop: $(".yn_cinemaList").offset().top - 55

        }, 1000);

        if ($("#divSeanceList").html().length < 19) {
            showCityPopup(true);
        }
    }
    else {
        if (manageCityStates() === null) {
            // showCityPopup();
            /* showStepOneDiv();*/
            /* driveToSeances();*/
        }
        else {
            //Şehir seçili ve Etkinlik seçili şehirde yoksa, listede seans yoksa ve 
            showStepOneDiv();
            driveToSeances();
            if ($('.scrollList a').length > 1 && $('.seanceSummary ').length == 0) {
                showCityPopup();
            }


        }
    }
}




function filterCityList(args) {


    $('.scrollList a').each(function () {
        var cityName = $(this).data('cityid');

        var nameFlag = cityName.toLocaleUpperCase().indexOf(args.toLocaleUpperCase()) >= 0;

        if (args == '') {
            $(this).show();
        }
        else {
            if (nameFlag) {
                $(this).show();
            }
            else {
                $(this).hide();
            }
        }
    })
}



$('.scrollList a').each(function () {
    $(this).click(function () {


        _cityStates.globalCityName = $(this).data('cityid');
        _cityStates.seanceFilterCase = $(this).data('val');

        $("#divSeanceList").empty();
        /*        $("#eventsFromYourCity").html('');*/
        $(".yn_cinema").html('');
        $(".yn_header_city").html($(this).attr("data-cityid"));



        showCityPopup();
        changeCityListName($(this).data('cityid'));
        showSeancesDiv();
        LoadDates(manageCityStates(), eventId);

        //if (!GetUsersCity()) {
        //    var ls_obj = { id: manageCityStates(), name: $(this).data('cityid') };

        //    localStorage.setItem("city", JSON.stringify(ls_obj));

        //    $(".cityList a[data-id='" + ls_obj.id + "']").addClass("active");
        //    $(".citySelect a").text(ls_obj.name);

        //    _cityStates.globalCityCase = GetUsersCityId(),
        //        _cityStates.globalCityName = GetUsersCityName()

        //}
    })
});

function changeCityListName(name) {
    $('#cityNameView').html(name);
}




function showCityPopup(scrollToSeanceHeader) {


    if (scrollToSeanceHeader && $(".yn_header").length > 0) {

        $('html, body').animate({
            scrollTop: $(".yn_header").offset().top - 55
        }, 1000);
    }

    /* $('.selectCity').toggleClass('viewList');*/
    $('.cList').toggleClass('viewList');
    $('.bgOverlay ').toggleClass('viewList');
    //$("body").toggleClass("lock");
    return false;
}

function showSeancesDiv() {
    $(".cinemaSeances").addClass("view").removeClass("stepOne");
}

function showStepOneDiv() {
    $(".cinemaSeances").addClass("stepOne");
}


function filterCityCinemas(args) {

    if (args != "") {
        $("#clearCinemaFilter").show();


    }
    else {
        $("#clearCinemaFilter").hide();
        $("#searchForCinemaList").val("");

    }

    $('#cityCinemaList a').each(function () {
        var cinemaName = $(this).data('name');

        var nameFlag = cinemaName.toLocaleUpperCase().indexOf(args.toLocaleUpperCase()) >= 0;

        if (args == '') {
            $(this).show();
        }
        else {
            if (nameFlag) {
                $(this).show();
            }
            else {
                $(this).hide();
            }
        }
    })


}

(function ($, window, document, undefined) {

    isAllSeancesAlreadyOpen = $(".event-dates button").length > 0;

    $('body .cinemaSeances, .event-dates').on("click", "ul li, .date-container button", function () {
        $("#SeanceForm input#seanceId").val($(this).data("title"));

        $("#SeanceForm input#lang").val(langCode);

        $("#SeanceForm").submit();
    });

    $('.ed-biletler__sehir__gun__fiyat button').on("click", function () {
        $("#SeanceForm input#seanceId").val($(this).data("title"));

        $("#SeanceForm input#lang").val(langCode);

        $("#SeanceForm").submit();
    });


    $('body').on("click", ".seanceTable tr td .branch-link", function (e) {

        if ($(window).width() <= 980) {

            $(this).closest("tr").find("td:last").toggle();
            $(this).toggleClass("open");

            e.preventDefault;
            return false;

        }
    });

    /*$('body').on("submit", "#commentform", function (e) {

        e.preventDefault;

        $.ajax({
            url: '/Details/AddNewComment',
            data: $("#commentform").serialize(),
            type: "POST",
            success: function (operationResult) {

                if (operationResult.IsSucceed) {

                    $('#AddComment .post-message .alert-info').fadeIn(1000);
                    $('#AddComment form').fadeOut(1000);
                } else {

                    $('#AddComment .post-message .alert-danger').html(operationResult.Error);
                    $('#AddComment .post-message .alert-danger').fadeIn(1000);

                }

            },
            error: function (operationResult) {
                $('#AddComment .post-message .alert-danger').fadeIn(1000);

            }
        });

        return false;
    });*/

    $('body').on("click", ".rate", function (e) {
        $('[data-tab]').removeClass('active');
        $('[data-content]').removeClass('activeContent');
        $('.dComment').addClass('active');
        $('[data-content="commenttab"]').addClass('activeContent');
        $([document.documentElement, document.body]).animate({
            scrollTop: $("#AddComment").offset().top
        }, 1000);
    });

    $('body').on("click", ".seanceTable tr td[data-city]", function (e) {

        $(this).closest("tr").find("td:last").toggle();
        $(this).toggleClass("open");
    });


    if (typeof controller !== 'undefined' && typeof action !== 'undefined' && controller == "Details" && action == "Index") {

        if (manageCityStates() !== null) {

            $selectedCityOptionOnFilter = $(".scrollList a[data-val='" + manageCityStates() + "']");



            /*if ($selectedCityOptionOnFilter.length > 0) */{

                LoadDates(manageCityStates(), eventId);
                showSeancesDiv();
                changeCityListName($selectedCityOptionOnFilter.text());


                //}
                //else {
                if ($('.scrollList a').length == 1) {
                    $('.scrollList a').click()
                    showCityPopup();
                }
            }


        }
        else {
            if ($('.scrollList a').length == 1) {
                $('.scrollList a').click();
                showCityPopup();
            }
            $(".yn_cinemaList").css("display", "block");
            //showCityPopup(true);
        }

        $("#seance-filter-form").on("change", "label input", function (e) {

            LoadSeances(manageCityStates(), $("input[name='date']:checked").val());

        });




    }

})(jQuery, window, document);

function GetOtherMostPopular(organizerType, divName) {

    $("#ajax-popular-list").html("<center><img src='" + cdnPath + "/Content/newsite/assets/images/ajax-loader.gif' /></center>");

    $("#all-list").hide();
    $("#ajax-data-list-main").show();

    if (organizerType == 1) {
        $.getJSON("/Dynamic/GetOtherMostPopular?organizerType=" + organizerType, function (result) {

            console.table(result);
            var str = "";
            $.each(result, function (i, el) {
                str += "<div class='col-md-2 col-sm-2'> <div class='event-card' itemscope itemtype='http://data-vocabulary.org/Event'>";
                str += "<a href='/sinema/" + el.SeoUrl + "' itemprop='url'>";
                str += "<img itemprop='photo' src='" + cdnPath + el.ImageUrl + "' />";
                str += "<div itemprop='eventType' class='category'>Sinema</div>";
                str += "<div itemprop='name' class='event-title'>" + el.FilmName + "</div>";
                str += "</a>";
                str += "</div></div>";
            });
            $("#ajax-popular-list").html(str);
        });
    }
    else {
        $.getJSON("/Dynamic/GetOtherMostPopular?organizerType=" + organizerType, function (result) {
            var str = "";
            var preUrl = "";
            if (organizerType == 2) {
                preUrl = "tiyatro";
            }
            else if (organizerType == 3) {
                preUrl = "muzik";
            }
            else if (organizerType == 4) {
                preUrl = "spor";
            }
            else if (organizerType == 5) {
                preUrl = "egitim";
            }
            $.each(result, function (i, el) {
                str += '<div class="col-md-2 col-sm-2"> <div class="event-card" itemscope itemtype="http://data-vocabulary.org/Event">';
                str += "<a href='/" + preUrl + "/" + el.SeoUrl + "' itemprop='url'>";
                str += "<img itemprop='photo' src='" + cdnPath + el.ImageUrl + "' />";
                str += "<div itemprop='eventType' class='category'>";
                if (organizerType == 2) {
                    str += "Tiyatro";
                }
                else if (organizerType == 3) {
                    str += "Müzik";
                }
                else if (organizerType == 4) {
                    str += "Spor";
                }
                else if (organizerType == 5) {
                    str += "Eğitim";
                }
                str += "</div>";
                str += "<div itemprop='name' class='event-title'>" + el.FilmName + "</div>";
                str += "<div class='place' itemprop='address' itemscope itemtype='http://schema.org/PostalAddress'>";
                str += "<span itemprop='streetAddress'>" + el.SaloonName + "</span>";
                str += "<span itemprop='addressLocality'><b>" + el.CityName + "</b></span>";
                str += "</div>";
                str += "<div class='date' itemprop='startDate' content='" + el.SeanceDate + "'>";
                str += "<span class='day'>" + el.SeanceDay + "</span>";
                str += "<span class='month'>" + el.SeanceMonth + "</span>";
                str += "</div>";
                str += "</a>";
                str += "</div></div>";
            });
            $("#ajax-popular-list").html(str);
        });
    }
}


$('.category-select').on("click", "li", function () {

    if ($(this).hasClass("all")) {

        $(".category-select li").removeClass("active");
        $(this).addClass("active");

        $("#all-list").show();
        $("#ajax-data-list-main").hide();

    } else {

        $(".category-select li").removeClass("active");
        $(this).addClass("active");

        $("#all-list").hide();
        $("#ajax-data-list-main").show();

    }

});
!function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : jQuery) }(function (a) { var b, c = navigator.userAgent, d = /iphone/i.test(c), e = /chrome/i.test(c), f = /android/i.test(c); a.mask = { definitions: { 9: "[0-9]", a: "[A-Za-z]", "*": "[A-Za-z0-9]" }, autoclear: !0, dataName: "rawMaskFn", placeholder: "_" }, a.fn.extend({ caret: function (a, b) { var c; if (0 !== this.length && !this.is(":hidden")) return "number" == typeof a ? (b = "number" == typeof b ? b : a, this.each(function () { this.setSelectionRange ? this.setSelectionRange(a, b) : this.createTextRange && (c = this.createTextRange(), c.collapse(!0), c.moveEnd("character", b), c.moveStart("character", a), c.select()) })) : (this[0].setSelectionRange ? (a = this[0].selectionStart, b = this[0].selectionEnd) : document.selection && document.selection.createRange && (c = document.selection.createRange(), a = 0 - c.duplicate().moveStart("character", -1e5), b = a + c.text.length), { begin: a, end: b }) }, unmask: function () { return this.trigger("unmask") }, mask: function (c, g) { var h, i, j, k, l, m, n, o; if (!c && this.length > 0) { h = a(this[0]); var p = h.data(a.mask.dataName); return p ? p() : void 0 } return g = a.extend({ autoclear: a.mask.autoclear, placeholder: a.mask.placeholder, completed: null }, g), i = a.mask.definitions, j = [], k = n = c.length, l = null, a.each(c.split(""), function (a, b) { "?" == b ? (n--, k = a) : i[b] ? (j.push(new RegExp(i[b])), null === l && (l = j.length - 1), k > a && (m = j.length - 1)) : j.push(null) }), this.trigger("unmask").each(function () { function h() { if (g.completed) { for (var a = l; m >= a; a++)if (j[a] && C[a] === p(a)) return; g.completed.call(B) } } function p(a) { return g.placeholder.charAt(a < g.placeholder.length ? a : 0) } function q(a) { for (; ++a < n && !j[a];); return a } function r(a) { for (; --a >= 0 && !j[a];); return a } function s(a, b) { var c, d; if (!(0 > a)) { for (c = a, d = q(b); n > c; c++)if (j[c]) { if (!(n > d && j[c].test(C[d]))) break; C[c] = C[d], C[d] = p(d), d = q(d) } z(), B.caret(Math.max(l, a)) } } function t(a) { var b, c, d, e; for (b = a, c = p(a); n > b; b++)if (j[b]) { if (d = q(b), e = C[b], C[b] = c, !(n > d && j[d].test(e))) break; c = e } } function u() { var a = B.val(), b = B.caret(); if (o && o.length && o.length > a.length) { for (A(!0); b.begin > 0 && !j[b.begin - 1];)b.begin--; if (0 === b.begin) for (; b.begin < l && !j[b.begin];)b.begin++; B.caret(b.begin, b.begin) } else { for (A(!0); b.begin < n && !j[b.begin];)b.begin++; B.caret(b.begin, b.begin) } h() } function v() { A(), B.val() != E && B.change() } function w(a) { if (!B.prop("readonly")) { var b, c, e, f = a.which || a.keyCode; o = B.val(), 8 === f || 46 === f || d && 127 === f ? (b = B.caret(), c = b.begin, e = b.end, e - c === 0 && (c = 46 !== f ? r(c) : e = q(c - 1), e = 46 === f ? q(e) : e), y(c, e), s(c, e - 1), a.preventDefault()) : 13 === f ? v.call(this, a) : 27 === f && (B.val(E), B.caret(0, A()), a.preventDefault()) } } function x(b) { if (!B.prop("readonly")) { var c, d, e, g = b.which || b.keyCode, i = B.caret(); if (!(b.ctrlKey || b.altKey || b.metaKey || 32 > g) && g && 13 !== g) { if (i.end - i.begin !== 0 && (y(i.begin, i.end), s(i.begin, i.end - 1)), c = q(i.begin - 1), n > c && (d = String.fromCharCode(g), j[c].test(d))) { if (t(c), C[c] = d, z(), e = q(c), f) { var k = function () { a.proxy(a.fn.caret, B, e)() }; setTimeout(k, 0) } else B.caret(e); i.begin <= m && h() } b.preventDefault() } } } function y(a, b) { var c; for (c = a; b > c && n > c; c++)j[c] && (C[c] = p(c)) } function z() { B.val(C.join("")) } function A(a) { var b, c, d, e = B.val(), f = -1; for (b = 0, d = 0; n > b; b++)if (j[b]) { for (C[b] = p(b); d++ < e.length;)if (c = e.charAt(d - 1), j[b].test(c)) { C[b] = c, f = b; break } if (d > e.length) { y(b + 1, n); break } } else C[b] === e.charAt(d) && d++, k > b && (f = b); return a ? z() : k > f + 1 ? g.autoclear || C.join("") === D ? (B.val() && B.val(""), y(0, n)) : z() : (z(), B.val(B.val().substring(0, f + 1))), k ? b : l } var B = a(this), C = a.map(c.split(""), function (a, b) { return "?" != a ? i[a] ? p(b) : a : void 0 }), D = C.join(""), E = B.val(); B.data(a.mask.dataName, function () { return a.map(C, function (a, b) { return j[b] && a != p(b) ? a : null }).join("") }), B.one("unmask", function () { B.off(".mask").removeData(a.mask.dataName) }).on("focus.mask", function () { if (!B.prop("readonly")) { clearTimeout(b); var a; E = B.val(), a = A(), b = setTimeout(function () { B.get(0) === document.activeElement && (z(), a == c.replace("?", "").length ? B.caret(0, a) : B.caret(a)) }, 10) } }).on("blur.mask", v).on("keydown.mask", w).on("keypress.mask", x).on("input.mask paste.mask", function () { B.prop("readonly") || setTimeout(function () { var a = A(!0); B.caret(a), h() }, 0) }), e && f && B.off("input.mask").on("input.mask", u), A() }) } }) });

(function ($, window, document, undefined) {

    $("#NewsLetterForm").submit(function (e) {
        e.preventDefault();
        $form = $(this);
        $NewsLetterResult = $(".NewsLetterResult");

        $.ajax({
            type: $form.attr("method"),
            url: $form.attr("action"),
            data: $form.serialize(),
            dataType: "json",
            success: function (dt) {

                $(".formItem").hide();
                $NewsLetterResult.show("slow");
                $NewsLetterResult.html(dt);

            },
            error: function (a) {
                alert('Talebiniz yerine getirilirken bir hata oluştu. Lütfen daha sonra tekrar deneyiniz.!');
            }

        });

        return false;

    });



})(jQuery, window, document);
function GetLocationsCatalog(cityId, organizerType) {

    $('#location-title').removeClass("closed");

    $.getJSON("/Dynamic/GetLocationFromCity?cityId=" + cityId + "&organizerType=" + organizerType, function (result) {
        $("#cinema-list-fields").val("");
        var str = "";

        $.each(result, function (i, el) {

            str += "<div class='inputLine'>  <div class='pretty p-default p-curve'>";
            str += "<input id='loc-" + el.Id + "' name='loc' type='radio' value='" + el.Id + "'>";
            str += "<div class='state p-primary-o'>";
            str += "<label for='loc-" + el.Id + "' title='" + el.Text + "'>" + (el.Text && el.Text.length > 19 ? el.Text.substring(0, 19) + '...' : el.Text) + "</label>";
            str += "</div></div></div>";


        });
        $("#cinema-list-fields").html(str);


        var loc = GetQsValue("loc");
        if (loc) {
            $("#loc-" + loc).prop("checked", true);
        }
    });
}

function showfilteroptions() {
    $(".filterFixed").toggleClass("show");
    return false;
}

function showCinemas() {
    $("#cinemaList").toggleClass("active");
    return false;
}

function filterCityLists(args) {
    $('#fldCity div[data-name]').each(function () {


        var cityName = $(this).data('name');

        var nameFlag = cityName.toLocaleUpperCase().indexOf(args.toLocaleUpperCase()) >= 0;

        if (args == '') {
            $(this).show();
        }
        else {
            if (nameFlag) {
                $(this).show();
            }
            else {
                $(this).hide();
            }
        }
    })

}
(function ($, window, document, undefined) {

    //console.log(controller, action);


    if (typeof controller !== 'undefined' && typeof action !== 'undefined' && (controller == "List" && action == "Index")) {


        if (window.innerWidth < 980) {
            $(".dateSelect").clone().insertBefore("form.search");
            if (!$('.spor')) {
                $(".dateSelect")[1].remove();
            }
        }

        $(".dateSelect button").click(function (e) {

            $(".dateSelect button, .dateButton").removeClass("activeDay");
            $(this).addClass("activeDay");
            var isDropDown = $(this).hasClass("dropdown");

            if ($(this).hasClass("thisweek")) {

                $("#thisweekend").val("true");
                $("#date").val("");

            } else {

                $("#date").val($(this).val());
                $("#thisweekend").val("false");

            }
            if (!isDropDown) {
                $(".sideFilter form.search").submit();
            }

        });



        $("body").on("change", ".sideFilter input[name], .sideFilter select", function (e) {
            if (window.innerWidth > 980) {
                $(".sideFilter form.search").submit();
            }
        });


        sessionStorage.removeItem("scrollToSeances");

        $("body").on("click", ".contentItem .biletiniAl", function (e) {

            sessionStorage.setItem("scrollToSeances", 1);
        });

        $(".filterResults div[data-target]").click(function (e) {

            var targetName = $(this).data("target");

            var $target = $("input[name='" + targetName + "'], select[name='" + targetName + "']");
            $target.prop("checked", false);

            if (targetName == "filmTypeId" || targetName == "date") {
                $target.val("");
            }

            if (targetName == "thisweekend") {
                $target.val("false");
            }

            if (targetName == "cityId") {
                //sessionStorage.setItem("removedCityId", $(this).data("id"));
            }

            $(".sideFilter form.search").submit();

        });

        $(".datePopup li").click(function (e) {

            $(".dateSelect button, .datePopup li").removeClass("activeDay, active");

            $(this).closest(".dateButton").addClass("activeDay");
            $(this).addClass("active");

            $("#date").val($(this).data("value"));

            showDatePopup();

            $(".sideFilter form.search").submit();

        });

        $("#fldCity input").change(function (e) {
            GetLocationsCatalog($(this).val(), organizerType);
        });

        var city = GetQsValue("cityId");

        /*     console.log(city, GetUsersCityId());*/

        if (city != null && city != "" && city != GetUsersCityId()) {
            sessionStorage.setItem("lastFilterCityId", city);
        } else {
            sessionStorage.removeItem("lastFilterCityId");

        }

        if (city) {
            GetLocationsCatalog(city, organizerType);
        }



    }

    if (typeof controller !== 'undefined' && typeof action !== 'undefined' && (controller == "List" && action == "Index" || (controller == "Search" || controller == "Home"))) {
        document.addEventListener("DOMContentLoaded", function () {
            var lazyloadImages = document.querySelectorAll(".lazy");
            var lazyloadThrottleTimeout;

            if (lazyloadImages) {

                function checkLazyLoadImages() {

                    var scrollTop = window.pageYOffset;
                    lazyloadImages.forEach(function (div) {

                        if (div.offsetTop < window.innerHeight + scrollTop) {

                            var images = div.getElementsByTagName('img');
                            //console.log(images);

                            if (images && images.length > 0) {
                                for (var i = 0; i < images.length; i++) {
                                    images[i].src = images[i].dataset.src;
                                }
                            }

                            div.classList.remove('lazy');
                        }
                    });
                    if (lazyloadImages.length == 0) {
                        document.removeEventListener("scroll", lazyload);
                        window.removeEventListener("resize", lazyload);
                        window.removeEventListener("orientationChange", lazyload);
                    }
                }

                function lazyload() {
                    if (lazyloadThrottleTimeout) {
                        clearTimeout(lazyloadThrottleTimeout);
                    }

                    lazyloadThrottleTimeout = setTimeout(function () {
                        checkLazyLoadImages();
                    }, 20);
                }

                checkLazyLoadImages();

            }


            document.addEventListener("scroll", lazyload);
            window.addEventListener("resize", lazyload);
            window.addEventListener("orientationChange", lazyload);
        });
    }



})(jQuery, window, document);
!function (a, b, c, d) { function e(b, c) { this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }, this._states = { current: {}, tags: { initializing: ["busy"], animating: ["busy"], dragging: ["interacting"] } }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) { this._handlers[c] = a.proxy(this[c], this) }, this)), a.each(e.Plugins, a.proxy(function (a, b) { this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this) }, this)), a.each(e.Workers, a.proxy(function (b, c) { this._pipe.push({ filter: c.filter, run: a.proxy(c.run, this) }) }, this)), this.setup(), this.initialize() } e.Defaults = { items: 3, loop: !1, center: !1, rewind: !1, checkVisibility: !0, mouseDrag: !0, touchDrag: !0, pullDrag: !0, freeDrag: !1, margin: 0, stagePadding: 0, merge: !1, mergeFit: !0, autoWidth: !1, startPosition: 0, rtl: !1, smartSpeed: 250, fluidSpeed: !1, dragEndSpeed: !1, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: b, fallbackEasing: "swing", slideTransition: "", info: !1, nestedItemSelector: !1, itemElement: "div", stageElement: "div", refreshClass: "owl-refresh", loadedClass: "owl-loaded", loadingClass: "owl-loading", rtlClass: "owl-rtl", responsiveClass: "owl-responsive", dragClass: "owl-drag", itemClass: "owl-item", stageClass: "owl-stage", stageOuterClass: "owl-stage-outer", grabClass: "owl-grab" }, e.Width = { Default: "default", Inner: "inner", Outer: "outer" }, e.Type = { Event: "event", State: "state" }, e.Plugins = {}, e.Workers = [{ filter: ["width", "settings"], run: function () { this._width = this.$element.width() } }, { filter: ["width", "items", "settings"], run: function (a) { a.current = this._items && this._items[this.relative(this._current)] } }, { filter: ["items", "settings"], run: function () { this.$stage.children(".cloned").remove() } }, { filter: ["width", "items", "settings"], run: function (a) { var b = this.settings.margin || "", c = !this.settings.autoWidth, d = this.settings.rtl, e = { width: "auto", "margin-left": d ? b : "", "margin-right": d ? "" : b }; !c && this.$stage.children().css(e), a.css = e } }, { filter: ["width", "items", "settings"], run: function (a) { var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin, c = null, d = this._items.length, e = !this.settings.autoWidth, f = []; for (a.items = { merge: !1, width: b }; d--;)c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width(); this._widths = f } }, { filter: ["items", "settings"], run: function () { var b = [], c = this._items, d = this.settings, e = Math.max(2 * d.items, 4), f = 2 * Math.ceil(c.length / 2), g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0, h = "", i = ""; for (g /= 2; g > 0;)b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i, g -= 1; this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage) } }, { filter: ["width", "items", "settings"], run: function () { for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;)d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a); this._coordinates = f } }, { filter: ["width", "items", "settings"], run: function () { var a = this.settings.stagePadding, b = this._coordinates, c = { width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a, "padding-left": a || "", "padding-right": a || "" }; this.$stage.css(c) } }, { filter: ["width", "items", "settings"], run: function (a) { var b = this._coordinates.length, c = !this.settings.autoWidth, d = this.$stage.children(); if (c && a.items.merge) for (; b--;)a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css); else c && (a.css.width = a.items.width, d.css(a.css)) } }, { filter: ["items"], run: function () { this._coordinates.length < 1 && this.$stage.removeAttr("style") } }, { filter: ["width", "items", "settings"], run: function (a) { a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current) } }, { filter: ["position"], run: function () { this.animate(this.coordinates(this._current)) } }, { filter: ["width", "position", "items", "settings"], run: function () { var a, b, c, d, e = this.settings.rtl ? 1 : -1, f = 2 * this.settings.stagePadding, g = this.coordinates(this.current()) + f, h = g + this.width() * e, i = []; for (c = 0, d = this._coordinates.length; c < d; c++)a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c); this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.$stage.children(".center").removeClass("center"), this.settings.center && this.$stage.children().eq(this.current()).addClass("center") } }], e.prototype.initializeStage = function () { this.$stage = this.$element.find("." + this.settings.stageClass), this.$stage.length || (this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ">", { class: this.settings.stageClass }).wrap(a("<div/>", { class: this.settings.stageOuterClass })), this.$element.append(this.$stage.parent())) }, e.prototype.initializeItems = function () { var b = this.$element.find(".owl-item"); if (b.length) return this._items = b.get().map(function (b) { return a(b) }), this._mergers = this._items.map(function () { return 1 }), void this.refresh(); this.replace(this.$element.children().not(this.$stage.parent())), this.isVisible() ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass) }, e.prototype.initialize = function () { if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) { var a, b, c; a = this.$element.find("img"), b = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, c = this.$element.children(b).width(), a.length && c <= 0 && this.preloadAutoWidthImages(a) } this.initializeStage(), this.initializeItems(), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized") }, e.prototype.isVisible = function () { return !this.settings.checkVisibility || this.$element.is(":visible") }, e.prototype.setup = function () { var b = this.viewport(), c = this.options.responsive, d = -1, e = null; c ? (a.each(c, function (a) { a <= b && a > d && (d = Number(a)) }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", { property: { name: "settings", value: e } }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", { property: { name: "settings", value: this.settings } }) }, e.prototype.optionsLogic = function () { this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1) }, e.prototype.prepare = function (b) { var c = this.trigger("prepare", { content: b }); return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", { content: c.data }), c.data }, e.prototype.update = function () { for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) { return this[a] }, this._invalidated), e = {}; b < c;)(this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++; this._invalidated = {}, !this.is("valid") && this.enter("valid") }, e.prototype.width = function (a) { switch (a = a || e.Width.Default) { case e.Width.Inner: case e.Width.Outer: return this._width; default: return this._width - 2 * this.settings.stagePadding + this.settings.margin } }, e.prototype.refresh = function () { this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed") }, e.prototype.onThrottledResize = function () { b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate) }, e.prototype.onResize = function () { return !!this._items.length && (this._width !== this.$element.width() && (!!this.isVisible() && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized"))))) }, e.prototype.registerEventHandlers = function () { a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), !1 !== this.settings.responsive && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () { return !1 })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this))) }, e.prototype.onDragStart = function (b) { var d = null; 3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = { x: d[16 === d.length ? 12 : 4], y: d[16 === d.length ? 13 : 5] }) : (d = this.$stage.position(), d = { x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left, y: d.top }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = (new Date).getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) { var d = this.difference(this._drag.pointer, this.pointer(b)); a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag")) }, this))) }, e.prototype.onDragMove = function (a) { var b = null, c = null, d = null, e = this.difference(this._drag.pointer, this.pointer(a)), f = this.difference(this._drag.stage.start, e); this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x)) }, e.prototype.onDragEnd = function (b) { var d = this.difference(this._drag.pointer, this.pointer(b)), e = this._drag.stage.current, f = d.x > 0 ^ this.settings.rtl ? "left" : "right"; a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || (new Date).getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () { return !1 })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged")) }, e.prototype.closest = function (b, c) { var e = -1, f = 30, g = this.width(), h = this.coordinates(); return this.settings.freeDrag || a.each(h, a.proxy(function (a, i) { return "left" === c && b > i - f && b < i + f ? e = a : "right" === c && b > i - g - f && b < i - g + f ? e = a + 1 : this.op(b, "<", i) && this.op(b, ">", h[a + 1] !== d ? h[a + 1] : i - g) && (e = "left" === c ? a + 1 : a), -1 === e }, this)), this.settings.loop || (this.op(b, ">", h[this.minimum()]) ? e = b = this.minimum() : this.op(b, "<", h[this.maximum()]) && (e = b = this.maximum())), e }, e.prototype.animate = function (b) { var c = this.speed() > 0; this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({ transform: "translate3d(" + b + "px,0px,0px)", transition: this.speed() / 1e3 + "s" + (this.settings.slideTransition ? " " + this.settings.slideTransition : "") }) : c ? this.$stage.animate({ left: b + "px" }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({ left: b + "px" }) }, e.prototype.is = function (a) { return this._states.current[a] && this._states.current[a] > 0 }, e.prototype.current = function (a) { if (a === d) return this._current; if (0 === this._items.length) return d; if (a = this.normalize(a), this._current !== a) { var b = this.trigger("change", { property: { name: "position", value: a } }); b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", { property: { name: "position", value: this._current } }) } return this._current }, e.prototype.invalidate = function (b) { return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) { return b }) }, e.prototype.reset = function (a) { (a = this.normalize(a)) !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"])) }, e.prototype.normalize = function (a, b) { var c = this._items.length, e = b ? 0 : this._clones.length; return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a }, e.prototype.relative = function (a) { return a -= this._clones.length / 2, this.normalize(a, !0) }, e.prototype.maximum = function (a) { var b, c, d, e = this.settings, f = this._coordinates.length; if (e.loop) f = this._clones.length / 2 + this._items.length - 1; else if (e.autoWidth || e.merge) { if (b = this._items.length) for (c = this._items[--b].width(), d = this.$element.width(); b-- && !((c += this._items[b].width() + this.settings.margin) > d);); f = b + 1 } else f = e.center ? this._items.length - 1 : this._items.length - e.items; return a && (f -= this._clones.length / 2), Math.max(f, 0) }, e.prototype.minimum = function (a) { return a ? 0 : this._clones.length / 2 }, e.prototype.items = function (a) { return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]) }, e.prototype.mergers = function (a) { return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]) }, e.prototype.clones = function (b) { var c = this._clones.length / 2, e = c + this._items.length, f = function (a) { return a % 2 == 0 ? e + a / 2 : c - (a + 1) / 2 }; return b === d ? a.map(this._clones, function (a, b) { return f(b) }) : a.map(this._clones, function (a, c) { return a === b ? f(c) : null }) }, e.prototype.speed = function (a) { return a !== d && (this._speed = a), this._speed }, e.prototype.coordinates = function (b) { var c, e = 1, f = b - 1; return b === d ? a.map(this._coordinates, a.proxy(function (a, b) { return this.coordinates(b) }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c)) }, e.prototype.duration = function (a, b, c) { return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed) }, e.prototype.to = function (a, b) { var c = this.current(), d = null, e = a - this.relative(c), f = (e > 0) - (e < 0), g = this._items.length, h = this.minimum(), i = this.maximum(); this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, (d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.isVisible() && this.update() }, e.prototype.next = function (a) { a = a || !1, this.to(this.relative(this.current()) + 1, a) }, e.prototype.prev = function (a) { a = a || !1, this.to(this.relative(this.current()) - 1, a) }, e.prototype.onTransitionEnd = function (a) { if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1; this.leave("animating"), this.trigger("translated") }, e.prototype.viewport = function () { var d; return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d }, e.prototype.replace = function (b) { this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () { return 1 === this.nodeType }).each(a.proxy(function (a, b) { b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1) }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items") }, e.prototype.add = function (b, c) { var e = this.relative(this._current); c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", { content: b, position: c }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", { content: b, position: c }) }, e.prototype.remove = function (a) { (a = this.normalize(a, !0)) !== d && (this.trigger("remove", { content: this._items[a], position: a }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", { content: null, position: a })) }, e.prototype.preloadAutoWidthImages = function (b) { b.each(a.proxy(function (b, c) { this.enter("pre-loading"), c = a(c), a(new Image).one("load", a.proxy(function (a) { c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh() }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina")) }, this)) }, e.prototype.destroy = function () { this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), !1 !== this.settings.responsive && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize)); for (var d in this._plugins) this._plugins[d].destroy(); this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$stage.remove(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel") }, e.prototype.op = function (a, b, c) { var d = this.settings.rtl; switch (b) { case "<": return d ? a > c : a < c; case ">": return d ? a < c : a > c; case ">=": return d ? a <= c : a >= c; case "<=": return d ? a >= c : a <= c } }, e.prototype.on = function (a, b, c, d) { a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c) }, e.prototype.off = function (a, b, c, d) { a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c) }, e.prototype.trigger = function (b, c, d, f, g) { var h = { item: { count: this._items.length, index: this.current() } }, i = a.camelCase(a.grep(["on", b, d], function (a) { return a }).join("-").toLowerCase()), j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({ relatedTarget: this }, h, c)); return this._supress[b] || (a.each(this._plugins, function (a, b) { b.onTrigger && b.onTrigger(j) }), this.register({ type: e.Type.Event, name: b }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j }, e.prototype.enter = function (b) { a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) { this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++ }, this)) }, e.prototype.leave = function (b) { a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) { this._states.current[b]-- }, this)) }, e.prototype.register = function (b) { if (b.type === e.Type.Event) { if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) { var c = a.event.special[b.name]._default; a.event.special[b.name]._default = function (a) { return !c || !c.apply || a.namespace && -1 !== a.namespace.indexOf("owl") ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments) }, a.event.special[b.name].owl = !0 } } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) { return a.inArray(c, this._states.tags[b.name]) === d }, this))) }, e.prototype.suppress = function (b) { a.each(b, a.proxy(function (a, b) { this._supress[b] = !0 }, this)) }, e.prototype.release = function (b) { a.each(b, a.proxy(function (a, b) { delete this._supress[b] }, this)) }, e.prototype.pointer = function (a) { var c = { x: null, y: null }; return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c }, e.prototype.isNumeric = function (a) { return !isNaN(parseFloat(a)) }, e.prototype.difference = function (a, b) { return { x: a.x - b.x, y: a.y - b.y } }, a.fn.owlCarousel = function (b) { var c = Array.prototype.slice.call(arguments, 1); return this.each(function () { var d = a(this), f = d.data("owl.carousel"); f || (f = new e(this, "object" == typeof b && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) { f.register({ type: e.Type.Event, name: c }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) { a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c])) }, f)) })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c) }) }, a.fn.owlCarousel.Constructor = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { var e = function (b) { this._core = b, this._interval = null, this._visible = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.autoRefresh && this.watch() }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers) }; e.Defaults = { autoRefresh: !0, autoRefreshInterval: 500 }, e.prototype.watch = function () { this._interval || (this._visible = this._core.isVisible(), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval)) }, e.prototype.refresh = function () { this._core.isVisible() !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh()) }, e.prototype.destroy = function () { var a, c; b.clearInterval(this._interval); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (c in Object.getOwnPropertyNames(this)) "function" != typeof this[c] && (this[c] = null) }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { var e = function (b) { this._core = b, this._loaded = [], this._handlers = { "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) { if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) { var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && -1 * e || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) { this.load(b) }, this); for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;)this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++ } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers) }; e.Defaults = { lazyLoad: !1, lazyLoadEager: 0 }, e.prototype.load = function (c) { var d = this._core.$stage.children().eq(c), e = d && d.find(".owl-lazy"); !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) { var e, f = a(d), g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src") || f.attr("data-srcset"); this._core.trigger("load", { element: f, url: g }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () { f.css("opacity", 1), this._core.trigger("loaded", { element: f, url: g }, "lazy") }, this)).attr("src", g) : f.is("source") ? f.one("load.owl.lazy", a.proxy(function () { this._core.trigger("loaded", { element: f, url: g }, "lazy") }, this)).attr("srcset", g) : (e = new Image, e.onload = a.proxy(function () { f.css({ "background-image": 'url("' + g + '")', opacity: "1" }), this._core.trigger("loaded", { element: f, url: g }, "lazy") }, this), e.src = g) }, this)), this._loaded.push(d.get(0))) }, e.prototype.destroy = function () { var a, b; for (a in this.handlers) this._core.$element.off(a, this.handlers[a]); for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { var e = function (c) { this._core = c, this._previousHeight = null, this._handlers = { "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.autoHeight && this.update() }, this), "changed.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.autoHeight && "position" === a.property.name && this.update() }, this), "loaded.owl.lazy": a.proxy(function (a) { a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update() }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._intervalId = null; var d = this; a(b).on("load", function () { d._core.settings.autoHeight && d.update() }), a(b).resize(function () { d._core.settings.autoHeight && (null != d._intervalId && clearTimeout(d._intervalId), d._intervalId = setTimeout(function () { d.update() }, 250)) }) }; e.Defaults = { autoHeight: !1, autoHeightClass: "owl-height" }, e.prototype.update = function () { var b = this._core._current, c = b + this._core.settings.items, d = this._core.settings.lazyLoad, e = this._core.$stage.children().toArray().slice(b, c), f = [], g = 0; a.each(e, function (b, c) { f.push(a(c).height()) }), g = Math.max.apply(null, f), g <= 1 && d && this._previousHeight && (g = this._previousHeight), this._previousHeight = g, this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass) }, e.prototype.destroy = function () { var a, b; for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { var e = function (b) { this._core = b, this._videos = {}, this._playing = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) { a.namespace && this._core.register({ type: "state", name: "playing", tags: ["interacting"] }) }, this), "resize.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault() }, this), "refreshed.owl.carousel": a.proxy(function (a) { a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove() }, this), "changed.owl.carousel": a.proxy(function (a) { a.namespace && "position" === a.property.name && this._playing && this.stop() }, this), "prepared.owl.carousel": a.proxy(function (b) { if (b.namespace) { var c = a(b.content).find(".owl-video"); c.length && (c.css("display", "none"), this.fetch(c, a(b.content))) } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) { this.play(a) }, this)) }; e.Defaults = { video: !1, videoHeight: !1, videoWidth: !1 }, e.prototype.fetch = function (a, b) { var c = function () { return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube" }(), d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"), e = a.attr("data-width") || this._core.settings.videoWidth, f = a.attr("data-height") || this._core.settings.videoHeight, g = a.attr("href"); if (!g) throw new Error("Missing video URL."); if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube"; else if (d[3].indexOf("vimeo") > -1) c = "vimeo"; else { if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported."); c = "vzaar" } d = d[6], this._videos[g] = { type: c, id: d, width: e, height: f }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]) }, e.prototype.thumbnail = function (b, c) { var d, e, f, g = c.width && c.height ? "width:" + c.width + "px;height:" + c.height + "px;" : "", h = b.find("img"), i = "src", j = "", k = this._core.settings, l = function (c) { e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? a("<div/>", { class: "owl-video-tn " + j, srcType: c }) : a("<div/>", { class: "owl-video-tn", style: "opacity:1;background-image:url(" + c + ")" }), b.after(d), b.after(e) }; if (b.wrap(a("<div/>", { class: "owl-video-wrapper", style: g })), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1; "youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({ type: "GET", url: "//vimeo.com/api/v2/video/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function (a) { f = a[0].thumbnail_large, l(f) } }) : "vzaar" === c.type && a.ajax({ type: "GET", url: "//vzaar.com/api/videos/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function (a) { f = a.framegrab_url, l(f) } }) }, e.prototype.stop = function () { this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video") }, e.prototype.play = function (b) { var c, d = a(b.target), e = d.closest("." + this._core.settings.itemClass), f = this._videos[e.attr("data-video")], g = f.width || "100%", h = f.height || this._core.$stage.height(); this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), c = a('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'), c.attr("height", h), c.attr("width", g), "youtube" === f.type ? c.attr("src", "//www.youtube.com/embed/" + f.id + "?autoplay=1&rel=0&v=" + f.id) : "vimeo" === f.type ? c.attr("src", "//player.vimeo.com/video/" + f.id + "?autoplay=1") : "vzaar" === f.type && c.attr("src", "//view.vzaar.com/" + f.id + "/player?autoplay=true"), a(c).wrap('<div class="owl-video-frame" />').insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing")) }, e.prototype.isInFullScreen = function () { var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement; return b && a(b).parent().hasClass("owl-video-frame") }, e.prototype.destroy = function () { var a, b; this._core.$element.off("click.owl.video"); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Video = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) {
    var e = function (b) { this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = { "change.owl.carousel": a.proxy(function (a) { a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value) }, this), "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) { a.namespace && (this.swapping = "translated" == a.type) }, this), "translate.owl.carousel": a.proxy(function (a) { a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap() }, this) }, this.core.$element.on(this.handlers) }; e.Defaults = {
        animateOut: !1,
        animateIn: !1
    }, e.prototype.swap = function () { if (1 === this.core.settings.items && a.support.animation && a.support.transition) { this.core.speed(0); var b, c = a.proxy(this.clear, this), d = this.core.$stage.children().eq(this.previous), e = this.core.$stage.children().eq(this.next), f = this.core.settings.animateIn, g = this.core.settings.animateOut; this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({ left: b + "px" }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f)) } }, e.prototype.clear = function (b) { a(b.target).css({ left: "" }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd() }, e.prototype.destroy = function () { var a, b; for (a in this.handlers) this.core.$element.off(a, this.handlers[a]); for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Animate = e
}(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { var e = function (b) { this._core = b, this._call = null, this._time = 0, this._timeout = 0, this._paused = !0, this._handlers = { "changed.owl.carousel": a.proxy(function (a) { a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._paused && (this._time = 0) }, this), "initialized.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.autoplay && this.play() }, this), "play.owl.autoplay": a.proxy(function (a, b, c) { a.namespace && this.play(b, c) }, this), "stop.owl.autoplay": a.proxy(function (a) { a.namespace && this.stop() }, this), "mouseover.owl.autoplay": a.proxy(function () { this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause() }, this), "mouseleave.owl.autoplay": a.proxy(function () { this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play() }, this), "touchstart.owl.core": a.proxy(function () { this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause() }, this), "touchend.owl.core": a.proxy(function () { this._core.settings.autoplayHoverPause && this.play() }, this) }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options) }; e.Defaults = { autoplay: !1, autoplayTimeout: 5e3, autoplayHoverPause: !1, autoplaySpeed: !1 }, e.prototype._next = function (d) { this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()), this._core.is("interacting") || c.hidden || this._core.next(d || this._core.settings.autoplaySpeed) }, e.prototype.read = function () { return (new Date).getTime() - this._time }, e.prototype.play = function (c, d) { var e; this._core.is("rotating") || this._core.enter("rotating"), c = c || this._core.settings.autoplayTimeout, e = Math.min(this._time % (this._timeout || c), c), this._paused ? (this._time = this.read(), this._paused = !1) : b.clearTimeout(this._call), this._time += this.read() % c - e, this._timeout = c, this._call = b.setTimeout(a.proxy(this._next, this, d), c - e) }, e.prototype.stop = function () { this._core.is("rotating") && (this._time = 0, this._paused = !0, b.clearTimeout(this._call), this._core.leave("rotating")) }, e.prototype.pause = function () { this._core.is("rotating") && !this._paused && (this._time = this.read(), this._paused = !0, b.clearTimeout(this._call)) }, e.prototype.destroy = function () { var a, b; this.stop(); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) "function" != typeof this[b] && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { "use strict"; var e = function (b) { this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }, this._handlers = { "prepared.owl.carousel": a.proxy(function (b) { b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>") }, this), "added.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop()) }, this), "remove.owl.carousel": a.proxy(function (a) { a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1) }, this), "changed.owl.carousel": a.proxy(function (a) { a.namespace && "position" == a.property.name && this.draw() }, this), "initialized.owl.carousel": a.proxy(function (a) { a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation")) }, this), "refreshed.owl.carousel": a.proxy(function (a) { a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation")) }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers) }; e.Defaults = { nav: !1, navText: ['<span aria-label="Previous">&#x2039;</span>', '<span aria-label="Next">&#x203a;</span>'], navSpeed: !1, navElement: 'button type="button" role="presentation"', navContainer: !1, navContainerClass: "owl-nav", navClass: ["owl-prev", "owl-next"], slideBy: 1, dotClass: "owl-dot", dotsClass: "owl-dots", dots: !0, dotsEach: !1, dotsData: !1, dotsSpeed: !1, dotsContainer: !1 }, e.prototype.initialize = function () { var b, c = this._core.settings; this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) { this.prev(c.navSpeed) }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) { this.next(c.navSpeed) }, this)), c.dotsData || (this._templates = [a('<button role="button">').addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "button", a.proxy(function (b) { var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index(); b.preventDefault(), this.to(d, c.dotsSpeed) }, this)); for (b in this._overrides) this._core[b] = a.proxy(this[b], this) }, e.prototype.destroy = function () { var a, b, c, d, e; e = this._core.settings; for (a in this._handlers) this.$element.off(a, this._handlers[a]); for (b in this._controls) "$relative" === b && e.navContainer ? this._controls[b].html("") : this._controls[b].remove(); for (d in this.overides) this._core[d] = this._overrides[d]; for (c in Object.getOwnPropertyNames(this)) "function" != typeof this[c] && (this[c] = null) }, e.prototype.update = function () { var a, b, c, d = this._core.clones().length / 2, e = d + this._core.items().length, f = this._core.maximum(!0), g = this._core.settings, h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items; if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) { if (b >= h || 0 === b) { if (this._pages.push({ start: Math.min(f, a - d), end: a - d + h - 1 }), Math.min(f, a - d) === f) break; b = 0, ++c } b += this._core.mergers(this._core.relative(a)) } }, e.prototype.draw = function () { var b, c = this._core.settings, d = this._core.items().length <= c.items, e = this._core.relative(this._core.current()), f = c.loop || c.rewind; this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active")) }, e.prototype.onTrigger = function (b) { var c = this._core.settings; b.page = { index: a.inArray(this.current(), this._pages), count: this._pages.length, size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items) } }, e.prototype.current = function () { var b = this._core.relative(this._core.current()); return a.grep(this._pages, a.proxy(function (a, c) { return a.start <= b && a.end >= b }, this)).pop() }, e.prototype.getPosition = function (b) { var c, d, e = this._core.settings; return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c }, e.prototype.next = function (b) { a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b) }, e.prototype.prev = function (b) { a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b) }, e.prototype.to = function (b, c, d) { var e; !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c) }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { "use strict"; var e = function (c) { this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = { "initialized.owl.carousel": a.proxy(function (c) { c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation") }, this), "prepared.owl.carousel": a.proxy(function (b) { if (b.namespace) { var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash"); if (!c) return; this._hashes[c] = b.content } }, this), "changed.owl.carousel": a.proxy(function (c) { if (c.namespace && "position" === c.property.name) { var d = this._core.items(this._core.relative(this._core.current())), e = a.map(this._hashes, function (a, b) { return a === d ? b : null }).join(); if (!e || b.location.hash.slice(1) === e) return; b.location.hash = e } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) { var c = b.location.hash.substring(1), e = this._core.$stage.children(), f = this._hashes[c] && e.index(this._hashes[c]); f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0) }, this)) }; e.Defaults = { URLhashListener: !1 }, e.prototype.destroy = function () { var c, d; a(b).off("hashchange.owl.navigation"); for (c in this._handlers) this._core.$element.off(c, this._handlers[c]); for (d in Object.getOwnPropertyNames(this)) "function" != typeof this[d] && (this[d] = null) }, a.fn.owlCarousel.Constructor.Plugins.Hash = e }(window.Zepto || window.jQuery, window, document), function (a, b, c, d) { function e(b, c) { var e = !1, f = b.charAt(0).toUpperCase() + b.slice(1); return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) { if (g[b] !== d) return e = !c || b, !1 }), e } function f(a) { return e(a, !0) } var g = a("<support>").get(0).style, h = "Webkit Moz O ms".split(" "), i = { transition: { end: { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd", transition: "transitionend" } }, animation: { end: { WebkitAnimation: "webkitAnimationEnd", MozAnimation: "animationend", OAnimation: "oAnimationEnd", animation: "animationend" } } }, j = { csstransforms: function () { return !!e("transform") }, csstransforms3d: function () { return !!e("perspective") }, csstransitions: function () { return !!e("transition") }, cssanimations: function () { return !!e("animation") } }; j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d()) }(window.Zepto || window.jQuery, window, document);
function toMobile() {
    $("#toMobile .footerLinkBlock").hide();
    $("#toMobile ul").hide();
    $("#toMobile").append("<div class='mobileSelectMenu'><select id='mobileSelectMenu'></select></div>");
    $('#toMobile ul li a').each(function () {
        var selected = "";
        if ($(this).hasClass('active')) {
            selected = "selected";
        }
        $("#mobileSelectMenu").append("<option data-link='" + $(this).attr("href") + "' " + selected + ">" + $(this).html() + "</option>");
    });
    $("#mobileSelectMenu").change(function () {
        var url = $("#mobileSelectMenu option:selected").attr('data-link');
        window.location.href = url;
    });
}


function switchCity() {
    $('#cityModal').toggleClass('showCities');
}

const closeCity = () => {
    $('#cityModal').removeClass('showCities');
    if (!localStorage.getItem('city')) {
        $('.sehrini-kesfet__sehirvar').css('display', 'none')
        $('.sehrini-kesfet__sehiryok').css('display', 'flex')
    }
}


if (!localStorage.getItem('city')) {
    $('.whatsapp_destek').css('bottom', '132px')
} else {
    $('.whatsapp_destek').css('bottom', '82px')
}



function backtoTop() {

    $("html, body").animate({ scrollTop: 0 }, 600);
    return false;
}

function searchCity(args) {

    $('.cityList a').each(function () {
        var cityId = $(this).data('plaka');
        var cityName = $(this).data('name');

        var nameFlag = cityName.toLocaleUpperCase().indexOf(args.toLocaleUpperCase()) >= 0;
        var idFlag = cityId.toString().toLocaleUpperCase().indexOf(args.toString().toLocaleUpperCase()) >= 0;

        if (args == '') {
            $(this).show();
        }
        else {
            if (nameFlag || idFlag) {
                $(this).show();
            }
            else {
                $(this).hide();
            }
        }
    })
}
function toggleShortCut() {
    $('.shortCuts').toggleClass('activeSub');
    return false;
}
function showSearch() {
    $(".searchLayout").toggleClass("in");
    $("#gsearch").focus();
    //$("body").toggleClass("lock");

}
$(document).mouseup(function (e) {
    var searchBar = $('.searchBar');
    var searchBarActive = $('.searchLayout').hasClass('in');
    if (searchBarActive) {
        if (!searchBar.is(e.target) && searchBar.has(e.target).length === 0) {
            $('.searchLayout').toggleClass('in');
            //$("body").toggleClass("lock");
        }
    }
});
function setCarousels() {
    $("[data-carousel]").each(function () {
        if ($(this).attr("data-carousel")) {
            var desktopCount = $(this).attr("data-desktop");
            var mobileCount = $(this).attr("data-mobile");
            var mobileGutter = $(this).attr("data-mobilegutter");
            $(this).owlCarousel({
                loop: false,
                margin: 10,
                dots: false,
                nav: true,
                responsive: {

                    0: {
                        items: mobileCount,
                        stagePadding: 50,
                        loop: true,
                    },
                    768: {
                        items: mobileCount,
                        stagePadding: 50,
                        loop: true,

                    },
                    900: {
                        items: desktopCount
                    }
                }
            })
        }
    })
}
function scrollToTrailer() {
    $('html, body').animate({
        scrollTop: 400
    }, 1000);
}
$('[data-tab]').each(function () {

    var resetAllTabButtons = function () {
        $('[data-tab]').removeClass('active');
    }
    var resetAllTabContents = function () {
        $('[data-content]').removeClass('activeContent');
    }

    $(this).click(function (e) {
        resetAllTabButtons();
        resetAllTabContents();
        var target = e.currentTarget.attributes['data-tab'].nodeValue;


        if (target == "trailer") {
            scrollToTrailer();
        }

        $('[data-content="' + target + '"]').addClass('activeContent');
        $(this).addClass("active");
    });
});
$(window).scroll(function () {
    var windowTop = $(window).scrollTop();
    var width = $('.sideFilter').outerWidth();
    var footerPos = $("footer").offset().top - $(window).scrollTop();
    var css = {
        "position": "fixed",
        "top": "100px",
        "width": width
    }

    var css2 = {
        "position": "absolute",
        "top": "20px",
        "width": width
    }
    if (windowTop > 300) {
        $('.sideFilter').css(css);
    } else {
        $('.sideFilter').removeAttr("style");
    }
    if (footerPos < $(window).height()) {
        $('.sideFilter').removeAttr("style");
    }
});
function showDatePopup() {
    $('.datePopup').toggleClass('active');
    //$("body").toggleClass("lock");
    return false;
}


function PostFilterFormForSelectedCity(changeCityFromHeader) {

    var usercity = localStorage.getItem("city");
    if (usercity) { usercity = JSON.parse(usercity); }
    if (usercity && usercity.id != "0") {

        $(".cityList a[data-id='" + usercity.id + "']").addClass("active");

        if ($(window).width() > 980) {
            $(".citySelect a").text(usercity.name);
            $("#cityname").text(usercity.name);
        } else {

            $(".citySelect a").text(usercity.code);
            $("#cityname").text(usercity.code);

        }
        $filterFormCity = $("#fldCity input[data-id='" + usercity.id + "']");

        //$('.checkboxCityId').val(usercity.id);
        //$('.categoriesHiddenCity').val(usercity.id);
        //$('.categoriesHiddenLoc').val(0);
        //$(".categoryUserCityUrl").val(usercity.url);

        var qsCityId = GetQsValue("cityId");
        var removedCityId = sessionStorage.getItem("removedCityId");



        if ((!removedCityId || removedCityId != usercity.id || changeCityFromHeader) && (changeCityFromHeader || (!qsCityId && window.location.href.indexOf('?') <= 0 && $(".filterResults > div").length <= 0)) && $('.checkboxCityId').val() != 0) {
            /* $(".etkinliklerDis form.search").submit();*/
        }


        if ((!removedCityId || removedCityId != usercity.id || changeCityFromHeader) && (changeCityFromHeader || (!qsCityId && window.location.href.indexOf('?') <= 0 && $(".filterResults > div").length <= 0)) && $filterFormCity.length > 0) {

            if (changeCityFromHeader) {
                $(".sideFilter input").prop("checked", false);
                $(".sideFilter select").val("");
                $("#thisweekend").val('false');
                $("#date").val('');
            }

            $filterFormCity.prop("checked", true);
            $(".sideFilter .search").submit();


        }




    }
}
function watchTrailer(trailerUrl, kapattext) {

    var iframe = '<iframe id="fragmanFrame" class="embed-responsive-item" src="' + trailerUrl + '" frameborder="0" allowfullscreen=""></iframe>';
    $("body").append("<div class='movie'><a id='close-trailer'>" + (kapattext ? kapattext : 'kapat') + "</a><div class='trailerHolder'>" + iframe + "</div></div>");
    $('#close-trailer').click(function () {
        $('.movie').remove();
    });

    $("#close-trailer").on("click", function () {
        $('.movie').remove();
    })

}

function showUserAgreement() {
    //console.log('dedde');
    $('.userAgreement').toggleClass('active');
    return false;
}

function isNumeric(value) {
    return /^\d+$/.test(value);
}

(function ($, window, document, undefined) {

    if ($(".backToTop").length > 0) {
        $(window).scroll(function () {
            var top = $(window).scrollTop();
            if (top > 800) {
                $(".backToTop").show();

            }
            else {
                $(".backToTop").hide();
            }
        });
    }


    if (document.location.href.indexOf('kinema') > 0) {


        $(".cityList a").removeClass("active");
        $curCity = $(".cityList a[data-id=120]:first");
        $curCity.addClass("active");

        usercity = { id: $curCity.data("id"), name: $curCity.data("name"), code: $curCity.data("plaka") };
        localStorage.setItem("city", JSON.stringify(usercity));

        $(".cityList a[data-id='" + usercity.id + "']").addClass("active");

        if ($(window).width() > 767) {
            $(".citySelect a").text(usercity.name);
            $("#cityname").text(usercity.name);

        } else {
            $(".citySelect a").text(usercity.code);
            $("#cityname").text(usercity.code);

        }

        $("#cityId-120").prop("checked", true);

        //updateUserCity(120);
    }


    function ClearNonNumerics(value) {
        var v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '')
        var matches = v.match(/\d{4,16}/g);
        var match = matches && matches[0] || ''
        var parts = []
        for (i = 0, len = match.length; i < len; i += 4) {
            parts.push(match.substring(i, i + 4))
        }
        if (parts.length) {
            return parts
        } else {
            return value
        }
    }

    $('.numbersOnly').keydown(function (e) {

        var value = ClearNonNumerics(e.key);

        if (!isNumeric(value)) {
            e.preventDefault();
            return false;

        } else {

            $(this).val(value);
            return true;
        }

    });

    $('.phoneNubmersOnly').change(function (e) {

        //  if (e.shiftKey) return true;

        var value = $(this).val().replace('+', '').replace('(', ')').replace(')', '').replace('-', '').replace('-', '').replace('-', '').replace('-', '');
        if (!isNumeric(value)) {
            e.preventDefault();
            return false;

        } else {

            return true;
        }

    });

    $('.namesOnly').keydown(function (e) {

        //if (e.shiftKey) return true;

        //if (e.key.replace(/[&\/\\#+()$~%-_.,!'":*?<>{}]/g, '').length > 0) {
        //    return true;
        //}

        if (e.key.replace(/[&\/\\#+()$~%@'":*?<>{}]/g, '').length > 0) {
            return true;
        }
        else {

            //$(this).attr("placeholder", $(this).attr("placeholder") + " için lütfen geçerli bir karakter yazınız");
            e.preventDefault();
            return false;

        }
    });

    $('.lettersAndNumbers').keydown(function (e) {

        //if (e.shiftKey) return true;

        if (e.key.replace(/[&\/\\#+()$~%@'":*?<>{}]/g, '').length > 0) {
            return true;
        }
        else {

            // $(this).attr("placeholder", $(this).attr("placeholder")+ " için lütfen geçerli bir karakter yazınız");
            e.preventDefault();
            return false;

        }
    });

    if ($("#toMobile").length > 0) {
        if (window.innerWidth < 768) {
            toMobile();
        }
    }

    $('[data-fragman-url]').click(function () {

        watchTrailer($(this).attr('data-fragman-url'), $(this).attr('data-closetext'));
    })

    $(".mobileNavToggle").on("click", function () {
        $('.shortCuts').toggleClass('hide');
        $('html').toggleClass('locked');
        $(this).toggleClass('active');
        $('body').toggleClass('mobileIn');
        return false;
    });




    if (typeof controller != 'undefined' && typeof action != 'undefined' && action != "AllPlaces") {
        PostFilterFormForSelectedCity(false);
    }

    function updateUserCity(cityId) {

        if (typeof userId != 'undefined' && userId > 0) {

            $.ajax({
                type: 'POST',
                cache: false,
                url: '/User/UpdateUsersCity',
                data: AddAntiForgeryToken({ cityId, userId })
            });
        }
    }



    $(".cityList a").on('click', function (e) {
        if ($(this).hasClass("active")) {
            $(this).removeClass("active")
            localStorage.removeItem("city");

            // if ($(window).width() > 767) {

            //     $("#cityname").text(usercity.name);
            //     $("#citysec").text(usercity.name);


            // } else {
            //     usercity = { id: $(this).data("id"), name: $(this).data("name"), code: $(this).data("plaka"), url: $(this).data("url"), };
            //     localStorage.setItem("city", JSON.stringify(usercity));
            //     $("#cityname").text(usercity.code);


            //     $(".citySelect a").text('');
            //     $("#cityname").text('');
            // }


            $(".cityList a").removeClass("active");
            PostFilterFormForSelectedCity(true);
            $(".sehriniKesfet__overlay").css("display", "none");
        }

        else {

            $(".cityList a").removeClass("active");
            usercity = { id: $(this).data("id"), name: $(this).data("name"), code: $(this).data("plaka"), url: $(this).data("url"), };
            localStorage.setItem("city", JSON.stringify(usercity));



            $(".cityList a[data-id='" + usercity.id + "']").addClass("active");



            if ($(window).width() > 767) {

                $(".citySelect a").text(usercity.name);
                $("#cityname").text(usercity.name);
                $(".sehriniKesfet__overlay ").css("display", "none");

            } else {
                $(".citySelect a").text(usercity.code);
                $("#cityname").text(usercity.code);


            }

            switchCity();
            PostFilterFormForSelectedCity(true);

            if (controller == "SehrineOzel" && action == "Index") {

                window.location.href = "/" + region + "/SehrineOzel/" + usercity.url;
            }
            if ((controller == "Details" || controller == "Home" || controller == "EtkinlikTakvimi" || controller == "List") && action == "Index") {
                window.location.reload();

                //kategori sayfasında tiyatro vs yukarıdan şehir değişince filteredeki şehirde değişssim
                $('.checkboxCityId').val(usercity.id);
                $('.categoriesHiddenCity').val(usercity.id);
                $('.categoriesHiddenLoc').val(0);
                $(".categoryUserCityUrl").val(usercity.url);
                $(".etkinliklerDis form.search").submit();
            }

            //updateUserCity(usercity.id);
            $(".citySelect a").text(usercity.name);


        }


    });


    if ((typeof updatecityId) !== 'undefined') {



        var curCity = $(".cityList a[data-id='" + updatecityId + "']");


        usercity = { id: curCity.data("id"), name: curCity.data("name"), code: curCity.data("plaka") };

        localStorage.setItem("city", JSON.stringify(usercity));

        curCity.addClass("active");


        if ($(window).width() > 767) {
            $(".citySelect a").text(usercity.name);
            $("#cityname").text(usercity.name);



        } else {
            $(".citySelect a").text(usercity.code);
            $("#cityname").text(usercity.code);


        }
    }

    $(function () {

        var heroSlider = $('#slider').owlCarousel({
            loop: true,
            margin: 10,
            nav: false,
            dots: true,
            video: true,
            //lazyLoad: true,
            responsive: {
                0: {
                    items: 1
                },
                600: {
                    items: 1
                },
                1000: {
                    items: 1
                }
            }
        });

        heroSlider.on('changed.owl.carousel', function (event) {

            $(".slider-info").hide();
            $(".slider-info:eq(" + (event.page.index) + ")").show();

            //console.log({ event });

        });


        $('#city-sliders').owlCarousel({
            loop: false,
            margin: 10,
            nav: false,
            dots: false,
            video: false,
            slideBy: 3,
            responsive: {
                0: {
                    items: 4
                },
                600: {
                    items: 4
                },
                1000: {
                    items: 4
                }
            }
        });

        if (window.innerWidth < 980) {

            $('#shortCuts').owlCarousel({
                loop: true,
                margin: 10,
                nav: false,
                dots: false,
                responsive: {
                    0: {
                        items: 1,
                        stagePadding: 50
                    },
                    600: {
                        items: 1,
                        stagePadding: 50
                    },
                    1000: {
                        items: 1,
                        stagePadding: 50
                    }
                }
            });
        }


        setCarousels();

    });

})(jQuery, window, document);

var firstClick = true;
var windowWidth = window.innerWidth;
var winmdowHeight = window.innerHeight;
var minLeft;
var maxWidth = 0;
var maxHeight = 0;
var saloonWidth = 0;
var isOperaSahnesi = false;
function checkInfoHand() {

    if ($("#SaloonDetailContainer").length > 0 && (hasScroll(document.getElementById("SaloonDetailContainer"), "vertical") || hasScroll(document.getElementById("SaloonDetailContainer"), "horizontal"))) {


        $("#scroll-info").fadeIn('slow');

        if ($("#scroll-info").length > 0) {
            setTimeout(
                $("#scroll-info").fadeOut("slow")
                , 2000);

        }

        var outerContent = $('#SaloonDetailContainer');
        var innerContent = $('#SaloonDetail');
        outerContent.scrollLeft((saloonWidth) - ((saloonWidth) / 2));

    }
}

(function ($, window, document, undefined) {


    isOperaSahnesi = $(".OperaSahnesi").length > 0;

    if (typeof saloonJson != 'undefined') {

        //if (window.history && window.history.pushState) {
        //    ClearSession();
        //}

        for (var j = 0; j < saloonJson.Blocks.length; j++) {

            var blok = saloonJson.Blocks[j];

            var curWidth = blok.Left + blok.Width + 20;
            var curHeight = blok.Top + blok.Height + 20 + 10;


            if (curWidth > maxWidth) {
                maxWidth = curWidth;
            }

            if (curHeight > maxHeight) {
                maxHeight = curHeight;
            }

            if (minLeft == undefined || blok.Left < minLeft) {
                minLeft = blok.Left;
            }
        }

        saloonWidth = (maxWidth - minLeft);
        var ratio = windowWidth < saloonWidth ? parseFloat(windowWidth) / parseFloat(saloonWidth) - 0.03 : parseFloat(1);

        if (windowWidth >= 150) {
            //console.log(ratio);
            if (ratio < 0.7) {
                ratio = 0.7;
            }

            setTimeout(function () {
                zoom_level = Math.round(ratio * 100)
            }, 1000);
            //console.log(ratio);
            $(".zoom-items #zoom-level").text(Math.round(Math.round(ratio * 100)) + '%');
            $("#SaloonDetail").css("zoom", ratio);
        }

        for (var j = 0; j < saloonJson.Blocks.length; j++) {
            var blok = saloonJson.Blocks[j];

            var isEmptyBlock = false;
            isEmptyBlock = blok.Items != null && blok.Items.some(checkEmptySeat);

            var g = createCanvas(blok.Id, blok.Width, blok.Height, blok.RotateAngle, blok.Top, blok.Left, blok.Text, false, isEmptyBlock, null, null, blok.Kategori);
            var row;
            if (blok.Items != null)
                for (var k = 0; k < blok.Items.length; k++) {
                    var koltuk = blok.Items[k];
                    row = koltuk.RowName;
                    var seat = createCircle(blok.Width,
                        blok.Height,
                        blok.RotateAngle,
                        koltuk.Top,
                        koltuk.Left,
                        koltuk.SeatName,
                        g,
                        koltuk.Id,
                        koltuk.SeatStatus,
                        blok.Id,
                        koltuk.SeatName,
                        koltuk.IsClosed
                    );
                }
        }


        checkInfoHand();

        if (saloonJson.Shapes != null)
            for (var i = 0; i < saloonJson.Shapes.length; i++) {
                var shape = saloonJson.Shapes[i];
                createCanvas(shape.Id, shape.Width, shape.Height, shape.RotateAngle, shape.Top, shape.Left, shape.Text, true, true, shape.FillColor, shape.FontSize, "");
            }
    }

})(jQuery, window, document);


function checkEmptySeat(seat) {
    return seat.SeatStatus === 1;
}

var doksanlikIndex = 0;
function createCanvas(id, width, height, angel, top, left, text, isShape, isEmptyBlock, fillColor, fontSize, kategori) {

    if (isShape) {

    } else {

        if (!isOperaSahnesi) {
            width += 20;
            height += 20;
        }

    }

    $blokItem = $("<div class='blockItem " + text.replace(' ', '') + " blok" + id + "'><span class='text-item'>" + text + "</span></div>");
    $blokItem.css('transform', 'rotate(' + angel + 'deg)');

    $blokItem.css("width", (width / 1) + "px");
    $blokItem.css("height", (height + (!isOperaSahnesi ? 10 : 0) / 1) + "px");
    $blokItem.css("top", (top / 1) + "px");
    $blokItem.css("left", ((left - minLeft) / 1) + "px");

    $("#SaloonDetail").append($blokItem);

    $("#SaloonDetail").css("width", (maxWidth - minLeft) + 'px');
    $("#SaloonDetail").css("height", (maxHeight + 50) + 'px');

    //console.log(windowWidth, "saloonWidth ", saloonWidth);

    return null;
}

function createCircle(width, height, angel, top, left, text, g, id, seatStatus, blockId, seatName, isClosed) {

    var ang = Math.round(angel);

    var kapaliUyari = "";
    var kapaliMessage = "";

    if (isClosed) {
        kapaliUyari = " onclick=\"KapaliUyari()\" ";
        var kapaliMessage = This_seat_is_not_available_for_election;

    }

    $circle = $("<div title='" + kapaliMessage + "' data-seatid='" + id + "' " + kapaliUyari + " data-place='" + (seatName && seatName.length > 4 ? seatName.substring(0, 4).replace(" ", "") : seatName) + "' class='" + (seatName && seatName.length > 3 ? "longtext" : "") + " circle-item circle" + id + "'>" + (seatName && seatName.length > 4 ? seatName.substring(0, 4).replace(" ", "") : seatName) + "</div>");

    $circle.css("width", 30 + 'px');
    $circle.css("height", 30 + 'px');

    $circle.css("left", ((left + (!isOperaSahnesi ? 10 : 0)) / 1) + 'px');
    $circle.css("top", ((top + (!isOperaSahnesi ? 20 : 0)) / 1) + 'px');

    if (isClosed) {
        //console.log("kapalı:" + seatName + "_" + id);
    }

    if (isClosed || seatStatus === 0) {
        $circle.addClass('seatClosed');
    }
    //else if (seatStatus === 0) {
    //    $circle.addClass('seatClosed');
    //}
    else if (seatStatus === 2) {
        $circle.addClass('seatSold');
    }

    $(".blok" + blockId).append($circle)
}

var zoom_level = 100;

(function ($, window, document, undefined) {

    //var isMobileSeat = $(".desktopseats").length <= 0;
    var isMobileSeat = $(window.width <= 980);
    var isDesktopSeat = !isMobileSeat;
    var isDisabled = $(".desktopseats.disabled").length > 0;
    var ref = document.referrer;

    if (window.history && window.history.pushState) {
        window.location.hash = "";
    }


    $(window).on('hashchange', function (e) {
        var blockid = '0';

        //if ($("#back-to-stage").is(":hidden")) {
        //    window.location.href = ref;
        //}

        if (window.location.hash && window.location.hash != '' && window.location.hash.indexOf('blockid=') > -1) {

            blockid = window.location.hash.split('=')[1];

            if (blockid && blockid != '0' && blockid != '') {

                drawBlock(Number(blockid));
                $('#activity-graph').addClass('seat-view');

            } else {

                $("#selectBlockWarning").show();
                $("#spnSeatsPrev").hide();

                $(".seat-plan svg path").attr("class", "");
                $('#activity-graph').removeClass('seat-view');
                lastblockid = 0;
            }

        } else {

            //$("#block-selector").val("");
            $("#mobile-block-selector").val("");

            $(".seat-plan svg path").attr("class", "");
            $('#activity-graph').removeClass('seat-view');
            lastblockid = 0;
        }
    });

    var lastblockid = 0;
    function drawBlock(blockId) {

        //console.log(blockId);

        if (blockId == NaN) { blockId = 0 }

        lastblockid = blockId;

        if ($(window).width() <= 980) {

            $("<div></div>", {
                "class": "scroll-icn"
            }).appendTo('body');


            setTimeout(function () {
                $('.scroll-icn').addClass("passive");
            }, 3000);

            setTimeout(function () {
                $('.scroll-icn').remove();
            }, 4000);

        }


        $(".plan-warning").hide();
        var curBlock = seatObj.Blocks.filter(elem => elem.Id == blockId);


        $(".seat-plan svg path").attr("class", "");
        $("#S-" + blockId).attr("class", "active");

        $("#selectBlockWarning").hide();
        $("#spnSeatsPrev").show();

        $("#block-selector, #mobile-block-selector").val(blockId.toString());

        $("#seat-floor").css('zoom', (isDesktopSeat) ? '1' : '1');

        if (curBlock && curBlock[0]) {

            window.location.hash = 'blockid=' + blockId;

            $("#seat-floor > *").remove();

            var maxleft = 0;


            AddAntiForgeryToken = function (data) {
                data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]:first').val();
                return data;
            };

            //dynamic load for only block items
            if (curBlock[0].Items == null || curBlock[0].Items.length <= 0) {

                $.ajax({
                    type: 'POST',
                    async: false,
                    url: '/dynamic/getblockseats',
                    data: AddAntiForgeryToken({ seanceId, blockId, saloonId }),
                    success: function (result) {
                        if (result) {
                            curBlock[0].Items = result;
                        }
                    }
                });
            }

            curBlock[0].Items.forEach((item, index) => {

                if (item.Left > maxleft) {
                    maxleft = item.Left;
                };

                var isUserSelected = (selectedTickets && selectedTickets.includes(Number(item.Id))) ? true : false;
                var seatName = item.SeatName;
                if (seatName && seatName.length > 0) {
                    seatName = seatName.replace(/\s/g, '');
                    seatName = seatName.replace("--", "-");
                }

                var closedClass = (item.IsClosed || item.SeatStatus == 0) == true ? " seatClosed " : "";
                var handicappedClass = item.SeatTypeId == 4 ? " handicapped " : "";

                $("#seat-floor").append("<a class='seat-item circle-item " + closedClass + handicappedClass + (item.SeatStatus == 2 ? ' dis ' : '') + (item.Kisitli ? ' kisitli ' : '') + (item.CampaignSeat ? ' campaignSeat ' : '') + (item.IsGencBilet ? ' gencbilet ' : '') + "' data-SeatDescription='" + item.SeatDescription + (isUserSelected ? ' selected ' : '') + "' data-blockid='" + curBlock[0].Id + "'  data-seat='" + item.Id + "' data-id='" + item.Id + "'  data-seatid='" + item.Id + "' style='top:" + item.Top + "px; left:" + item.Left + "px;'>" + seatName + "</div>");
            });


            if ($(window).width() < (maxleft + 50)) {
                $("#seat-floor").css('width', ($(window).width() - 40) + "px");

            }
            else {
                $("#seat-floor").css('width', (maxleft + 50) + "px");
            }

            if ($("#scroll-info").length > 0 && maxleft > ($(window).width() + 20)) {

                $("#scroll-info").fadeIn('slow');
                setTimeout($("#scroll-info").fadeOut('slow'), 1200);
            }

            if (isDesktopSeat) {
                // console.log(isMobileSeat);
                if (maxleft <= 750) {


                    $("#seat-floor").css('zoom', '1.5');
                }

                if (maxleft <= 150) {
                    $("#seat-floor").css('zoom', '2');
                }
            }

            var seatsEnabled = curBlock[0].Items.filter(elem => elem.SeatStatus === 1 && elem.IsClosed === false);

            $('#blok-name small').remove();
            $('#blok-name').append('<small>(' + seatsEnabled.length + AvailableSeats + ')</small>');


            if (seanceId == 8255630 || seanceId == 8256574) {
                $('#blok-name small').remove();
            }
        }

        if (isDisabled) {
            $(".seat-item").addClass("notopen");
        }
    }

    var seatObj = typeof seats != 'undefined' && seats ? seats : null;
    if (seatObj && seatObj.Blocks) {

        //var s = $("<select id=\"block-selector\" />");
        var s2 = $("<select id=\"mobile-block-selector\" />");

        // $("<option />", { value: "-1", text: "Lütfen blok seçiniz" }).appendTo(s);
        $("<option />", { value: "", text: "Lütfen blok seçiniz" }).appendTo(s2);

        $("#selectBlockWarning").show();
        $("#spnSeatsPrev").hide();

        seatObj.Blocks.forEach((block) => {

            if (block.Full) {
                $targetBlocks = $("#" + block.Id + ", #S-" + block.Id);
                $targetBlocks.css("fill", "#df6868");
                $targetBlocks.attr("class", "sold");
                $targetBlocks.attr("title", "Bu blokta boş koltuk bulunmamaktadır");

            } else {
                //$("<option />", { value: block.Id, text: block.Text }).appendTo(s);
                $("<option />", { value: block.Id, text: block.Text }).appendTo(s2);
            }
        });

        //$("#blok-data").append(s);
        $("#mobile-blok-container").append(s2);


    }


    if (window.location.hash && window.location.hash != '' && window.location.hash.indexOf('blockid=') > -1) {

        blockid = window.location.hash.split('=')[1];

        if (blockid && blockid != '0' && blockid != '') {

            drawBlock(Number(blockid));
            $('#activity-graph').addClass('seat-view');
        }
    }

    $("#block-selector").on("change", function () {
        //drawBlock(parseFloat($(this).val()));
    });

    $("#mobile-block-selector").on("change", function (e) {

        $("#selectBlockWarning").hide();
        $("#spnSeatsPrev").show();
        window.location.hash = 'blockid=' + $(this).val();
        e.preventDefault();
        return false;
        // drawBlock(parseFloat($(this).val()));
    });


    var toggleSeatView = () => {
        document.getElementById('activity-graph').classList.toggle('seat-view');
    }

    $("body").on("click", ".arrow-back", function () {

        alert("back");

        $(".split-view").toggleClass("full");
        $(".plan-warning").show();
        lastblockid = 0;
    });


    $(".zoom-items").on("click", ".plus, .minus", function () {
        var isPlus = $(this).hasClass('plus');

        if (isPlus) {
            if (zoom_level == 250) return;
            zoom_level = zoom_level + 25;
        } else {

            if (zoom_level == 25) return;
            zoom_level = zoom_level - 25;

        }
        $("#seat-floor, #SaloonDetail").css("zoom", (zoom_level / 100));
        $(".zoom-items #zoom-level").text(zoom_level + '%');

        checkInfoHand();

    });

    //activity-details
    $("body").on("click", ".activity-graph path[id], .seat-plan path[id]", function () {

        //alert("aaa");

        var id = $(this).attr("id");
        var isSold = $(this).attr('class') == 'sold';

        if (isSold) {
            seatsError("Bu blokta boş koltuk bulunmamaktadır, lütfen diğer açık bloklardan birini seçiniz");
            return;
        }

        if (id.indexOf('-') > 0) {
            id = id.split('-')[1];
        }

        window.location.hash = 'blockid=' + Number(id);
        //drawBlock(Number(id));

        $("html, body").animate({ scrollTop: $('body:first').offset().top }, 500);

        //$("#mobile-block-selector").val(id);
        if (!$("#activity-graph").hasClass('seat-view')) {
            toggleSeatView();
        }

    });


    $("#seat-floor").on("click", "a.seat-item.notopen", function (e) {

        seatsError("Bu Etkinlik " + $("#acilis-message").val() + "'da satışa açılacaktır.");
        return false;
        e.preventDefault();
    });


    $("#seat-floor").on("mouseover", "a.seat-item:not(.dis)", function (e) {

        $(this).addClass("normal-koltuk_hover");
    });

    $("#seat-floor").on("mouseout", "a.seat-item:not(.dis)", function (e) {

        $(this).removeClass("normal-koltuk_hover");
    });


    $("#seat-floor").on("click", "a.seat-item", function (e) {

        //if ($(this).hasClass("circle-item") && $(this).hasClass("seat-item")) { return; }

        $clickedSeat = $(this);
        e.preventDefault();

        if ($(".cart-seat").length >= maxTicket) {
            seatsError("En fazla " + maxTicket + " adet koltuk seçebilirsiniz");
            return;
        }

        if ($(this).hasClass("handicapped")) {

            EngelliUyari();
            return false;
        }

        if ($(this).hasClass("seatClosed")) {

            seatsError(This_seat_is_not_available_for_election);
            return false;
        }

        var id = $(this).attr("data-id");
        var cinemaBranchId = $("#cbId").val();


        if (isDisabled) {

            seatsError($("#acilis-message").val());

            return false;
            e.preventDefault();
        }

        if ($(this).hasClass('selected')) {

            deletefromBasket(id);
            return false;
        }
        else {



            var blockid = Number($(this).attr("data-blockid"));
            var name = $(this).text();
            selectedBlockData = seatObj.Blocks.filter(elem => elem.Id === blockid);

            if (lastblockid == 2287 || lastblockid == 2270) {
                seatsError("Bu seçtiğiniz loca 4 kişiliktir.");
            }

            var seatdescription = $(this).attr("data-seatdescription");

            if (seatdescription != null && seatdescription != 'null' && seatdescription.replace(/\s/g, '').length > 0) {
                seatsError(seatdescription);
            }

            $.ajax({
                type: 'POST',
                async: false,
                url: '/dynamic/addtobasket',
                data: AddAntiForgeryToken({ seatId: id, seanceId: seanceId, sessionId: sessionId, cinemaBranchID: cinemaBranchId }),
                success: function (result) {


                    if (result && result.Success) {

                        if ($('.floatSummary').hasClass('closed')) {
                            if (window.innerWidth > 768) {
                                collapseSummary();
                            }
                        }

                        if (window.innerWidth < 768) {
                            $('.floatSummary').addClass('closed semiClosed');
                        }

                        if (result && result.Success) {

                            selectedTickets.push(Number(id));

                            var className = getClassNameForSeatNum(id);

                            $(".ticket_cart_new").append("<div class='cart-seat normal-seat " + className + "' data-seatId='" + id + "' data-seat='" + id + "'>" + (name.replace(/\s+/g, '')) + "<a class='deleteItem'></a><span class='toolTip'>" + DeleteSeat + "</span></div>");
                            $clickedSeat.addClass("normal-koltuk_active selected");
                            $clickedSeat.attr("data-selected", "true");
                            handleBasketPrices(result);

                        } else if (result && result.Message) {

                            seatsError(result.Message);

                        } else {
                            seatsError(An_unexpected_error_occurred_please_try_again_later);

                        }

                    } else {
                        seatsError(result.Message);
                    }
                },

            });

            if ($clickedSeat.hasClass('kisitli')) {
                seatsError(The_seat_you_have_chosen_has_limited_visibility);
            }
        }

    });

    function deletefromBasket(id) {
        $.ajax({
            type: 'POST',
            async: false,
            url: '/dynamic/deletefrombasket',
            data: AddAntiForgeryToken({ seatId: id, seanceId: seanceId, sessionId: sessionId }),
            success: function (result) {

                if (result && result.Success) {

                    selectedTickets = jQuery.grep(selectedTickets, function (value) {
                        return value != Number(id);
                    });

                    var selectedSeatObj = $('.seat-floor a[data-id="' + id + '"]');
                    selectedSeatObj.removeClass("selected normal-koltuk_hover normal-koltuk_active");

                    selectedSeatObj.removeAttr("data-selected");

                    $("div[data-seat='" + id + "']").remove();

                    handleBasketPrices(result);

                } else if (result && result.Message) {

                    seatsError(result.Message);

                } else {
                    seatsError(An_unexpected_error_occurred_please_try_again_later);
                }
            }
        });

    }

    $(".seat-list, #seat-floor").on("click", "> div[data-id], > li[data-id]", function (e) {

        var id = $(this).data("id");
        e.preventDefault();
        deletefromBasket(id);

    });

    $("#back-to-stage").on("click", function () {

        // alert("back to stage");
        //$(".split-view").removeClass("full");
        window.location.hash = 'blockid=';
        //$(".plan-warning").show();
        //toggleSeatView();
    });

})(jQuery, window, document);

function getClassNameForSeatNum(seat_num_id) {
    var className = "";

    if (seat_num_id) {
        if (seat_num_id.length > 3) {
            className = "middle";
        }

        if (seat_num_id.length > 4) {
            className = "large";
        }
    }

    return className;
}

function EngelliUyari() {
    /*seatsError("Bu alanda koltuk bulunmamaktadır tekerlekli sandalye alanını şubeden rezerve edebilirsiniz.");*/
    seatsError("Seçmiş olduğunuz koltuk engelli misafirlerimiz için ayrılmıştır.</br>0850 333 99 11 numaralı Biletinial Müşteri Hizmetleri hattından veya ilgili şube gişesinden rezerve edilebilir.");
}

function KapaliUyari() {
    if (cinemaId == 983) {
        seatsError("Etkinlikler ücretsizdir. Sadece rezervasyon ile kayıt yapılmaktadır. Rezervasyon No: 0850 333 99 11");
    } else if (cinemaId == 872) {
        seatsError("Kjo ulëse nuk është në dispozicion si masë parandaluese ndaj Covid-19. This seat is not available for precautionary measures against Covid-19.");
    } else { seatsError(This_seat_is_not_available_for_election); }
    return false;
}

function collapseSummary() {

    $('.floatSummary').toggleClass('closed');
    return false;
}

function seatsError(message) {

    var messageHR = "Sjedalo nije moguće dodati u košaricu. Molimo odaberite ponovno.";
    var messageHR = "Sjedalo nije moguće dodati u košaricu. Molimo odaberite ponovno.";
    if (cinemaId == "1018") {
        $("body").append("<div class='seatsModal'><a id='close-modal'>kapat</a><div class='messageHolder'>" + messageHR + "<div class='modal-footer'><button class='close-modal-btn'>U redu</button></div></div></div>");
    } else {
        $("body").append("<div class='seatsModal'><a id='close-modal'>kapat</a><div class='messageHolder'>" + message + "<div class='modal-footer'><button class='close-modal-btn'>" + Ok + "</button></div></div></div>");
    }

    $('#close-modal').click(function () {
        $('.seatsModal').remove();
    });
    $('.seatsModal').click(function () {
        $('.seatsModal').remove();
    });

}

$('#seat-floor').click(function () {
    $('.seatsModal3').css("display", "flex");
})

$('.koltuk-secim  ').click(function () {
    $('.seatsModal4').css("display", "flex");
})

$('#seatsModalKapat').click(function () {
    $('.seatsModal4').css("display", "none");
})

function handleBasketPrices(result) {

    if (result && result.Prices && result.Prices.TotalAmount > 0) {

        $("#ticketPrice, .paymentSummary, .ticket_cart").show();
        $("#ticketPrice").text(result.Prices.TotalAmount.toFixed(2));
        $(".ticket_cart, .paymentSummary").removeClass("hidden");

    } else {

        if (window.innerWidth > 768) {
            $(".paymentSummary").hide();
        }

        if (window.innerWidth < 768) {
            $('.floatSummary').addClass('closed').removeClass('semiClosed');
        }
    }

    if (selectedTickets.length > 0) {
        $('#btnBuy').prop('disabled', false);
    } else {
        $('#btnBuy').prop('disabled', true);
    }
}

AddAntiForgeryToken = function (data) {
    data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]:first').val();
    return data;
};

(function ($, window, document, undefined) {

    $('.biletiniAlNav').addClass('shrinkNav');
    $('.logoNav').addClass('shrinkBar');
    $(".eventSearchFix").hide();

    $(document).ready(function () {




        //12.02.2021// sehrineOzel sayfası için 

        var usercity = localStorage.getItem("city");
        if (usercity == '' || usercity == null) {
            $(".sehrineOzelDiv").css('display', 'none');
            $("#sehirSec").css("display", "none");
            /*$(".sehriniKesfet__overlay").css("display", "none");*/

        }
        else {
            city = JSON.parse(usercity);

            $("#sehrineOzelLink").attr("href", "/SehrineOzel/" + city.url);
            $(".cityNameh3").text(city.name);

        }

        /////////////
        if ($(window).width() < 767 && (controller == "Home" && action == "Index")) {
            $("#sehirSec").css("display", "block");
            /* $(".sehriniKesfet__overlay").css("display", "block");*/


            $("#sehirSecSehirAdi").text(city.name + " Özel Etkinlikler ve Mekanlar");
            getPopularPlaces(GetUsersCityId());
            getPopularEvents(GetUsersCityId());
            $(".sehriniKesfet__butonlar__kesfet").attr("href", "/sehrineozel/" + city.url);
        }



        if (window.history && window.history.pushState) {
            if (typeof controller != 'undefined' && controller == "Seat") {
                ClearSession();
            }
        }
        else {
            if (typeof controller != 'undefined' && controller == "Seat") {
                ClearSession('undefied');
            }
        }

        $('#pricesSlider').owlCarousel({
            loop: false,
            margin: 0,
            dots: false,
            nav: true,
            responsive: {
                0: {
                    items: 3
                },
                600: {
                    items: 3
                },
                1000: {
                    items: 3
                }
            }
        });

        if (window.innerWidth < 980) {
            $('#mobile-prices').owlCarousel({
                loop: false,
                margin: 0,
                dots: false,
                nav: true,
                responsive: {
                    0: {
                        items: 3
                    },
                    600: {
                        items: 3
                    },
                    1000: {
                        items: 3
                    }
                }
            });
        }



        $('.koltuklar').css('height', ($('.koltuklar').height() + 20) + 'px');

        var layerWidth = $('.koltuklar').width();
        var vw = $(window).width() - 20;
        var averageZoom = vw / layerWidth;

        //console.log({ averageZoom });

        if (window.innerWidth < 768) {

            if (layerWidth <= 700) {
                $('.koltuklar').css('zoom', averageZoom);
            }
            else {

                $('.koltuklar').css('zoom', .6);
            }

        }

    });




    if ($("floatSummary").length > 0) {
        dragElement(document.getElementById("floatSummary"));
    }

    function dragElement(elmnt) {
        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        if (document.getElementById(elmnt.id + "header")) {
            /* if present, the header is where you move the DIV from:*/
            document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
        } else {
            /* otherwise, move the DIV from anywhere inside the DIV:*/
            elmnt.onmousedown = dragMouseDown;
        }

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            // call a function whenever the cursor moves:
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";

            if (elmnt.offsetLeft - pos1 < 0) {
                elmnt.style.left = "0px";
            }

            if (elmnt.offsetTop < 0) {
                elmnt.style.top = "0px";
            }

            if (((elmnt.offsetLeft) + $(elmnt).width()) > $(window).innerWidth()) {
                elmnt.style.left = ($(window).innerWidth() - $(elmnt).width()) + "px";
            }
        }

        function closeDragElement() {
            /* stop moving when mouse button is released:*/
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }



    $(".love-koltuk").each(function () {
        $(this).mouseover(function () {
            $(this).addClass("love-koltuk_hover");
        }).mouseout(function () {
            $(this).removeClass("love-koltuk_hover");
        });

        $(this).click(function () {
            //$.blockUI({ message: 'Lütfen bekleyiniz...' });
            var selectedSeatObj = $(this);
            var selectedSelector = selectedSeatObj.attr("data-selected");
            var seat_id = selectedSeatObj.attr("data-seatId");
            var seat_num_id = selectedSeatObj.attr("data-place");

            var love_seat_id = selectedSeatObj.attr("data-loveseat-id");
            if (!love_seat_id) love_seat_id = '';


            if ($(".acilis-error").length > 0) {
                seatsError($(".acilis-error").text());
                return;
            }

            if (selectedSelector == undefined || selectedSelector == false) {

                //console.log("TEST ADDING");

                if ($(".cart-seat").length >= maxTicket) {
                    seatsError("En fazla " + maxTicket + " adet koltuk seçebilirsiniz");
                    return;
                } else {

                    $.ajax({
                        type: 'POST',
                        async: false,
                        url: '/dynamic/addtobasket',
                        data: AddAntiForgeryToken({ seatId: seat_id, seanceId: seanceId, sessionId: sessionId, cinemaBranchId: cinemaBranchId }),
                        success: function (result) {

                            if (result && result.Success) {

                                if (selectedSeatObj.hasClass("engelliGirisUyari")) {

                                    seatsError("İki adet engelli koltuk seçiminde toplamda tek bilet fiyatı ödenmektedir.");
                                }

                                if (seat_id == "723000") {
                                    alert("Bu alan 4 kişiliktir.");
                                }

                                if ($('.floatSummary').hasClass('closed')) {
                                    if (window.innerWidth > 768) {
                                        collapseSummary();
                                    }
                                }

                                if (window.innerWidth < 768) {
                                    $('.floatSummary').addClass('closed semiClosed');
                                }

                                if (seat_num_id && seat_num_id.length > 0) {
                                    selectedTickets.push(seat_num_id);
                                    //console.log(seat_num_id);
                                    var className = getClassNameForSeatNum(seat_num_id);

                                } else {

                                    selectedTickets.push(seat_id);
                                    //console.log(seat_id);
                                    var className = getClassNameForSeatNum(seat_id);
                                    seat_num_id = seat_id;
                                }

                                $(".ticket_cart_new").append("<div class='cart-seat love-seat " + className + "'  data-loveseat-id='" + love_seat_id + "' data-seatId='" + seat_id + "' data-seat='" + seat_num_id + "'>" + seat_num_id + "<a class='deleteItem'></a><span class='toolTip'>" + DeleteSeat + "</span></div>");
                                selectedSeatObj.addClass("love-koltuk_active");
                                selectedSeatObj.attr("data-selected", "true");

                                handleBasketPrices(result);

                            } else if (result && result.Message) {

                                seatsError(result.Message);

                            } else {
                                seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");
                            }
                        }
                    });
                }
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/dynamic/deletefrombasket',
                    async: false,
                    data: AddAntiForgeryToken({ seatId: seat_id, seanceId: seanceId, cinemaBranchId: cinemaBranchId, sessionId: sessionId }),
                    success: function (result) {

                        if (result && result.Success) {

                            selectedSeatObj.removeAttr("data-selected");
                            selectedSeatObj.removeClass("love-koltuk_hover").removeClass("love-koltuk_active");
                            var koltukNameForRemove = selectedSeatObj.attr("data-place");
                            selectedTickets = jQuery.grep(selectedTickets, function (value) {
                                return value != koltukNameForRemove;
                            });
                            $("div[data-seat='" + koltukNameForRemove + "']").remove();


                            handleBasketPrices(result);

                        } else if (result && result.Message) {

                            seatsError(result.Message);

                        } else {
                            seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");
                        }
                    }
                });
            }
        });
    });

    $(".normal-koltuk, .circle-item:not(normal-koltuk)").each(function () {

        $(this).mouseover(function () {
            $(this).addClass("normal-koltuk_hover");
        }).mouseout(function () {
            $(this).removeClass("normal-koltuk_hover");
        });

        $(this).click(function () {

            if ($(".acilis-error").length > 0) {
                seatsError($(".acilis-error").text());
                return;
            }

            if ($(this).hasClass("seatClosed")) {
                return;
            }

            if ($('.floatSummary').hasClass('closed')) {
                if (window.innerWidth > 768) {
                    collapseSummary();
                }

            }
            if (window.innerWidth < 768) {
                $('.floatSummary').addClass('closed semiClosed');
            }

            $('.ticket_cart').removeClass('hidden');
            $('.paymentSummary').removeClass('hidden');

            //console.log("Koltuk ekleniyor");

            var selectedSeatObj = $(this);
            var selectedSelector = selectedSeatObj.attr("data-selected");
            var seat_id = selectedSeatObj.attr("data-seatId");
            var seat_num_id = selectedSeatObj.attr("data-place");

            if (selectedSelector == undefined || selectedSelector == false) {

                if ($(".cart-seat").length >= maxTicket) {

                    seatsError("En fazla " + maxTicket + " adet koltuk seçebilirsiniz");
                    return;

                } else {

                    $.ajax({
                        type: 'POST',
                        url: '/dynamic/addtobasket',
                        async: false,
                        data: AddAntiForgeryToken({ seatId: seat_id, seanceId: seanceId, sessionId: sessionId, cinemaBranchId: cinemaBranchId }),
                        success: function (result) {

                            if (result && result.Success) {

                                if (seat_id == "723000") {
                                    alert("Bu alan 4 kişiliktir.");
                                }

                                if (seat_num_id && seat_num_id.length > 0) {
                                    selectedTickets.push(seat_num_id);
                                    //console.log(seat_num_id);
                                    var className = getClassNameForSeatNum(seat_num_id);

                                } else {

                                    selectedTickets.push(seat_id);
                                    //console.log(seat_id);
                                    var className = getClassNameForSeatNum(seat_id);
                                    seat_num_id = seat_id;
                                }

                                $(".ticket_cart_new").append("<div class='cart-seat normal-seat " + className + "' data-seatId='" + seat_id + "' data-seat='" + seat_num_id + "'>" + seat_num_id.replace(" ", "") + "<a class='deleteItem'></a><span class='toolTip'>" + DeleteSeat + "</span></div>");
                                selectedSeatObj.addClass("normal-koltuk_active");
                                selectedSeatObj.attr("data-selected", "true");
                                handleBasketPrices(result);

                            } else if (result && result.Message) {

                                seatsError(result.Message);

                            } else {
                                seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");

                            }
                        }
                    });
                }
            } else {
                $.ajax({
                    type: 'POST',
                    url: '/dynamic/deletefrombasket',
                    async: false,
                    data: AddAntiForgeryToken({ seatId: seat_id, seanceId: seanceId, sessionId: sessionId, cinemaBranchId: cinemaBranchId }),
                    success: function (result) {
                        if (result && result.Success) {
                            selectedSeatObj.removeAttr("data-selected");
                            selectedSeatObj.removeClass("normal-koltuk_hover").removeClass("normal-koltuk_active");
                            var koltukNameForRemove = selectedSeatObj.attr("data-place");
                            selectedTickets = jQuery.grep(selectedTickets, function (value) {
                                return value != koltukNameForRemove;
                            });
                            $("div[data-seat='" + koltukNameForRemove + "']").remove();

                            handleBasketPrices(result);

                        } else if (result && result.Message) {

                            seatsError(result.Message);

                        } else {
                            seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");
                        }
                    }
                });
            }

        });
    });

    //$("#maxTicketSelect").on('change', function () {
    //    maxTicket = $(this).val();
    //    $('#selectTicket').modal('hide');
    //});


    $("#floatSummary").on("click", ".cart-seat a", function () {

        var seatPlaceId = $(this).closest(".cart-seat").attr("data-seat");
        var seatGroupId = $(this).closest(".cart-seat").attr("data-group-id");
        var seat_id = $(this).closest(".cart-seat").attr("data-seatId");

        if (seatGroupId == undefined) {
            $.ajax({
                type: 'POST',
                async: false,
                url: '/dynamic/deletefrombasket',
                data: AddAntiForgeryToken({ seatId: seat_id, seanceId: seanceId, sessionId: sessionId, cinemaBranchId: cinemaBranchId }),
                success: function (result) {

                    if (result && result.Success) {

                        var playOn = $("*[data-seatid=" + seat_id + "]");
                        playOn.removeAttr("data-selected");
                        playOn.removeClass("normal-koltuk_hover normal-koltuk_active selected love-koltuk_active");

                        selectedTickets = jQuery.grep(selectedTickets, function (value) {
                            return value != seatPlaceId;
                        });

                        $("#floatSummary *[data-seatid='" + seat_id + "']").remove();

                        if ($('.cart-seat').length == 0) {
                            if (window.innerWidth > 768) {
                                $('.ticket_cart').addClass('hidden');
                                $('.paymentSummary').addClass('hidden');
                            }

                            if (window.innerWidth < 768) {
                                $('.floatSummary').addClass('closed').removeClass('semiClosed');
                            }

                        }

                        handleBasketPrices(result);

                    } else if (result && result.Message) {

                        seatsError(result.Message);

                    } else {
                        seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");
                    }
                }
            });
        } else {
            var removeLoveSeats = [];
            var removeLoveSeatsId = [];

            $("span[data-loveseat-id=" + seatGroupId + "]").each(function () {
                removeLoveSeats.push($(this).attr("data-place"));
                removeLoveSeatsId.push($(this).attr("data-seatId"));
            });

            for (var p = 0; p < removeLoveSeats.length; p++) {
                $.ajax({
                    type: 'POST',
                    url: '/dynamic/deletefrombasket',
                    async: false,
                    data: AddAntiForgeryToken({ seatId: removeLoveSeatsId[p], seanceId: seanceId, cinemaBranchId: cinemaBranchId, sessionId: sessionId }),
                    success: function (result) {

                        if (result && result.Success) {
                            var koltukNameForRemoveFromArr = removeLoveSeats[p];
                            selectedTickets = jQuery.grep(selectedTickets, function (value) {
                                return value != koltukNameForRemoveFromArr;
                            });

                            handleBasketPrices(result);

                        } else if (result && result.Message) {

                            seatsError(result.Message);

                        } else {
                            seatsError("Beklenmeyen bir hata oluştu lütfen daha sonra tekrar denetiniz.");
                        }

                    }
                });
            }

            $("div[data-group-id='" + seatGroupId + "']").remove();
            var playOn = $("span[data-loveseat-id=" + seatGroupId + "]");
            playOn.removeAttr("data-selected");
            playOn.removeClass("love-koltuk_hover").removeClass("love-koltuk_active");
        }


    });

    function sessionFinished() {
        ClearSession('undefied');
        seatsError("Koltuk seçimi zamanı tükendi, lütfen tekrar seçiniz, yönlendiriliyorsunuz.");

        setTimeout(function () {
            window.location.reload(true);
        }, 3000);

        //setTimeout(function () {

        //	var urlPoster = $(".posterLink").attr("href");

        //	if (urlPoster == '0' || urlPoster == '' || urlPoster == 'undefined' || urlPoster == null) {
        //		window.location = '/';
        //	}
        //          else {
        //		window.location = urlPoster;
        //          }
        //      }, 2500);
    }

    function tick() {
        var n = document.getElementById("time"), e = Math.floor(secondsRemaining / 60), i = secondsRemaining - 60 * e;

        if (n) {

            10 > i && (i = "0" + i);
            var a = e + ":" + i;
            n.innerHTML = "<i class='fa fa-clock-o'></i> " + a, 0 === secondsRemaining && (sessionFinished(), clearInterval(intervalHandle)), secondsRemaining--
        }
    }

    function startCountdown() {
        var n = 10;
        secondsRemaining = 60 * n, intervalHandle = setInterval(tick, 1e3)
    }

    var loveSeatWarning1 = $("#LoveSeatWarning1").length > 0 ? $("#LoveSeatWarning1").val() : "İkili koltuk için en az 2 bilet almanız gerekmektedir.";
    var loveSeatWarning2 = $("#LoveSeatWarning2").length > 0 ? $("#LoveSeatWarning2").val() : "İkili koltuklar birlikte seçilmelidir.";

    $('#seatForm').submit(function () {

        //covid loveseat kapat

       

            if (selectedTickets.length == 1) {

                if ($('.love-seat').length == 1) {
                    seatsError(loveSeatWarning1);
                    return false;
                }
            }

            var loveSeats = [];

            if ($('.love-seat').length >= 1) {

                $(".love-seat").each(function (index) {

                    curLoveSeatId = $(this).attr("data-loveseat-id");

                    if (!loveSeats.includes(curLoveSeatId)) {
                        loveSeats.push(curLoveSeatId);
                    }
                });

                if ((selectedTickets.length > 1 && $('.love-seat').length == 1) || loveSeats.length == $('.love-seat').length || (loveSeats.length >= 3 && $('.love-seat').length == loveSeats.length + 1)) {

                    seatsError(loveSeatWarning2);
                    return false;
                }
            }

            return true;

        


        //covid loveseat always true
        //return true;

    });

    var secondsRemaining, intervalHandle;
    window.onload = function () {
        startCountdown();
        //$('html, body').animate({ scrollTop: $('#zoomyap').offset().top }, 'slow');
        //$('html, body').animate({ scrollLeft: ($('#zoomyap').width() / 3) + 20 }, 'slow');

    }

})(jQuery, window, document);
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
            (global.StickySidebar = factory());
}(this, (function () {
    'use strict';

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



    function unwrapExports(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var stickySidebar = createCommonjsModule(function (module, exports) {
        (function (global, factory) {
            if (typeof undefined === "function" && undefined.amd) {
                undefined(['exports'], factory);
            } else {
                factory(exports);
            }
        })(commonjsGlobal, function (exports) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            /**
             * Sticky Sidebar JavaScript Plugin.
             * @version 3.3.4
             * @author Ahmed Bouhuolia <a.bouhuolia@gmail.com>
             * @license The MIT License (MIT)
             */
            var StickySidebar = function () {

                // ---------------------------------
                // # Define Constants
                // ---------------------------------
                //
                var EVENT_KEY = '.stickySidebar';
                var DEFAULTS = {
                    /**
                     * Additional top spacing of the element when it becomes sticky.
                     * @type {Numeric|Function}
                     */
                    topSpacing: 0,

                    /**
                     * Additional bottom spacing of the element when it becomes sticky.
                     * @type {Numeric|Function}
                     */
                    bottomSpacing: 0,

                    /**
                     * Container sidebar selector to know what the beginning and end of sticky element.
                     * @type {String|False}
                     */
                    containerSelector: false,

                    /**
                     * Inner wrapper selector.
                     * @type {String}
                     */
                    innerWrapperSelector: '.inner-wrapper-sticky',

                    /**
                     * The name of CSS class to apply to elements when they have become stuck.
                     * @type {String|False}
                     */
                    stickyClass: 'is-affixed',

                    /**
                     * Detect when sidebar and its container change height so re-calculate their dimensions.
                     * @type {Boolean}
                     */
                    resizeSensor: true,

                    /**
                     * The sidebar returns to its normal position if its width below this value.
                     * @type {Numeric}
                     */
                    minWidth: false
                };

                // ---------------------------------
                // # Class Definition
                // ---------------------------------
                //
                /**
                 * Sticky Sidebar Class.
                 * @public
                 */

                var StickySidebar = function () {

                    /**
                     * Sticky Sidebar Constructor.
                     * @constructor
                     * @param {HTMLElement|String} sidebar - The sidebar element or sidebar selector.
                     * @param {Object} options - The options of sticky sidebar.
                     */
                    function StickySidebar(sidebar) {
                        var _this = this;

                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                        _classCallCheck(this, StickySidebar);

                        this.options = StickySidebar.extend(DEFAULTS, options);

                        // Sidebar element query if there's no one, throw error.
                        this.sidebar = 'string' === typeof sidebar ? document.querySelector(sidebar) : sidebar;
                        if ('undefined' === typeof this.sidebar) throw new Error("There is no specific sidebar element.");

                        this.sidebarInner = false;
                        this.container = this.sidebar.parentElement;

                        // Current Affix Type of sidebar element.
                        this.affixedType = 'STATIC';
                        this.direction = 'down';
                        this.support = {
                            transform: false,
                            transform3d: false
                        };

                        this._initialized = false;
                        this._reStyle = false;
                        this._breakpoint = false;

                        // Dimensions of sidebar, container and screen viewport.
                        this.dimensions = {
                            translateY: 0,
                            maxTranslateY: 0,
                            topSpacing: 0,
                            lastTopSpacing: 0,
                            bottomSpacing: 0,
                            lastBottomSpacing: 0,
                            sidebarHeight: 0,
                            sidebarWidth: 0,
                            containerTop: 0,
                            containerHeight: 0,
                            viewportHeight: 0,
                            viewportTop: 0,
                            lastViewportTop: 0
                        };

                        // Bind event handlers for referencability.
                        ['handleEvent'].forEach(function (method) {
                            _this[method] = _this[method].bind(_this);
                        });

                        // Initialize sticky sidebar for first time.
                        this.initialize();
                    }

                    /**
                     * Initializes the sticky sidebar by adding inner wrapper, define its container, 
                     * min-width breakpoint, calculating dimensions, adding helper classes and inline style.
                     * @private
                     */


                    _createClass(StickySidebar, [{
                        key: 'initialize',
                        value: function initialize() {
                            var _this2 = this;

                            this._setSupportFeatures();

                            // Get sticky sidebar inner wrapper, if not found, will create one.
                            if (this.options.innerWrapperSelector) {
                                this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector);

                                if (null === this.sidebarInner) this.sidebarInner = false;
                            }

                            if (!this.sidebarInner) {
                                var wrapper = document.createElement('div');
                                wrapper.setAttribute('class', 'inner-wrapper-sticky');
                                this.sidebar.appendChild(wrapper);

                                while (this.sidebar.firstChild != wrapper) {
                                    wrapper.appendChild(this.sidebar.firstChild);
                                } this.sidebarInner = this.sidebar.querySelector('.inner-wrapper-sticky');
                            }

                            // Container wrapper of the sidebar.
                            if (this.options.containerSelector) {
                                var containers = document.querySelectorAll(this.options.containerSelector);
                                containers = Array.prototype.slice.call(containers);

                                containers.forEach(function (container, item) {
                                    if (!container.contains(_this2.sidebar)) return;
                                    _this2.container = container;
                                });

                                if (!containers.length) throw new Error("The container does not contains on the sidebar.");
                            }

                            // If top/bottom spacing is not function parse value to integer.
                            if ('function' !== typeof this.options.topSpacing) this.options.topSpacing = parseInt(this.options.topSpacing) || 0;

                            if ('function' !== typeof this.options.bottomSpacing) this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0;

                            // Breakdown sticky sidebar if screen width below `options.minWidth`.
                            this._widthBreakpoint();

                            // Calculate dimensions of sidebar, container and viewport.
                            this.calcDimensions();

                            // Affix sidebar in proper position.
                            this.stickyPosition();

                            // Bind all events.
                            this.bindEvents();

                            // Inform other properties the sticky sidebar is initialized.
                            this._initialized = true;
                        }
                    }, {
                        key: 'bindEvents',
                        value: function bindEvents() {
                            window.addEventListener('resize', this, { passive: true, capture: false });
                            window.addEventListener('scroll', this, { passive: true, capture: false });

                            this.sidebar.addEventListener('update' + EVENT_KEY, this);

                            if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {
                                new ResizeSensor(this.sidebarInner, this.handleEvent);
                                new ResizeSensor(this.container, this.handleEvent);
                            }
                        }
                    }, {
                        key: 'handleEvent',
                        value: function handleEvent(event) {
                            this.updateSticky(event);
                        }
                    }, {
                        key: 'calcDimensions',
                        value: function calcDimensions() {
                            if (this._breakpoint) return;
                            var dims = this.dimensions;

                            // Container of sticky sidebar dimensions.
                            dims.containerTop = StickySidebar.offsetRelative(this.container).top;
                            dims.containerHeight = this.container.clientHeight;
                            dims.containerBottom = dims.containerTop + dims.containerHeight;

                            // Sidebar dimensions.
                            dims.sidebarHeight = this.sidebarInner.offsetHeight;
                            dims.sidebarWidth = this.sidebarInner.offsetWidth;

                            // Screen viewport dimensions.
                            dims.viewportHeight = window.innerHeight;

                            // Maximum sidebar translate Y.
                            dims.maxTranslateY = dims.containerHeight - dims.sidebarHeight;

                            this._calcDimensionsWithScroll();
                        }
                    }, {
                        key: '_calcDimensionsWithScroll',
                        value: function _calcDimensionsWithScroll() {
                            var dims = this.dimensions;

                            dims.sidebarLeft = StickySidebar.offsetRelative(this.sidebar).left;

                            dims.viewportTop = document.documentElement.scrollTop || document.body.scrollTop;
                            dims.viewportBottom = dims.viewportTop + dims.viewportHeight;
                            dims.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft;

                            dims.topSpacing = this.options.topSpacing;
                            dims.bottomSpacing = this.options.bottomSpacing;

                            if ('function' === typeof dims.topSpacing) dims.topSpacing = parseInt(dims.topSpacing(this.sidebar)) || 0;

                            if ('function' === typeof dims.bottomSpacing) dims.bottomSpacing = parseInt(dims.bottomSpacing(this.sidebar)) || 0;

                            if ('VIEWPORT-TOP' === this.affixedType) {
                                // Adjust translate Y in the case decrease top spacing value.
                                if (dims.topSpacing < dims.lastTopSpacing) {
                                    dims.translateY += dims.lastTopSpacing - dims.topSpacing;
                                    this._reStyle = true;
                                }
                            } else if ('VIEWPORT-BOTTOM' === this.affixedType) {
                                // Adjust translate Y in the case decrease bottom spacing value.
                                if (dims.bottomSpacing < dims.lastBottomSpacing) {
                                    dims.translateY += dims.lastBottomSpacing - dims.bottomSpacing;
                                    this._reStyle = true;
                                }
                            }

                            dims.lastTopSpacing = dims.topSpacing;
                            dims.lastBottomSpacing = dims.bottomSpacing;
                        }
                    }, {
                        key: 'isSidebarFitsViewport',
                        value: function isSidebarFitsViewport() {
                            var dims = this.dimensions;
                            var offset = this.scrollDirection === 'down' ? dims.lastBottomSpacing : dims.lastTopSpacing;
                            return this.dimensions.sidebarHeight + offset < this.dimensions.viewportHeight;
                        }
                    }, {
                        key: 'observeScrollDir',
                        value: function observeScrollDir() {
                            var dims = this.dimensions;
                            if (dims.lastViewportTop === dims.viewportTop) return;

                            var furthest = 'down' === this.direction ? Math.min : Math.max;

                            // If the browser is scrolling not in the same direction.
                            if (dims.viewportTop === furthest(dims.viewportTop, dims.lastViewportTop)) this.direction = 'down' === this.direction ? 'up' : 'down';
                        }
                    }, {
                        key: 'getAffixType',
                        value: function getAffixType() {
                            this._calcDimensionsWithScroll();
                            var dims = this.dimensions;
                            var colliderTop = dims.viewportTop + dims.topSpacing;
                            var affixType = this.affixedType;

                            if (colliderTop <= dims.containerTop || dims.containerHeight <= dims.sidebarHeight) {
                                dims.translateY = 0;
                                affixType = 'STATIC';
                            } else {
                                affixType = 'up' === this.direction ? this._getAffixTypeScrollingUp() : this._getAffixTypeScrollingDown();
                            }

                            // Make sure the translate Y is not bigger than container height.
                            dims.translateY = Math.max(0, dims.translateY);
                            dims.translateY = Math.min(dims.containerHeight, dims.translateY);
                            dims.translateY = Math.round(dims.translateY);

                            dims.lastViewportTop = dims.viewportTop;
                            return affixType;
                        }
                    }, {
                        key: '_getAffixTypeScrollingDown',
                        value: function _getAffixTypeScrollingDown() {
                            var dims = this.dimensions;
                            var sidebarBottom = dims.sidebarHeight + dims.containerTop;
                            var colliderTop = dims.viewportTop + dims.topSpacing;
                            var colliderBottom = dims.viewportBottom - dims.bottomSpacing;
                            var affixType = this.affixedType;

                            if (this.isSidebarFitsViewport()) {
                                if (dims.sidebarHeight + colliderTop >= dims.containerBottom) {
                                    dims.translateY = dims.containerBottom - sidebarBottom;
                                    affixType = 'CONTAINER-BOTTOM';
                                } else if (colliderTop >= dims.containerTop) {
                                    dims.translateY = colliderTop - dims.containerTop;
                                    affixType = 'VIEWPORT-TOP';
                                }
                            } else {
                                if (dims.containerBottom <= colliderBottom) {
                                    dims.translateY = dims.containerBottom - sidebarBottom;
                                    affixType = 'CONTAINER-BOTTOM';
                                } else if (sidebarBottom + dims.translateY <= colliderBottom) {
                                    dims.translateY = colliderBottom - sidebarBottom;
                                    affixType = 'VIEWPORT-BOTTOM';
                                } else if (dims.containerTop + dims.translateY <= colliderTop && 0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) {
                                    affixType = 'VIEWPORT-UNBOTTOM';
                                }
                            }

                            return affixType;
                        }
                    }, {
                        key: '_getAffixTypeScrollingUp',
                        value: function _getAffixTypeScrollingUp() {
                            var dims = this.dimensions;
                            var sidebarBottom = dims.sidebarHeight + dims.containerTop;
                            var colliderTop = dims.viewportTop + dims.topSpacing;
                            var colliderBottom = dims.viewportBottom - dims.bottomSpacing;
                            var affixType = this.affixedType;

                            if (colliderTop <= dims.translateY + dims.containerTop) {
                                dims.translateY = colliderTop - dims.containerTop;
                                affixType = 'VIEWPORT-TOP';
                            } else if (dims.containerBottom <= colliderBottom) {
                                dims.translateY = dims.containerBottom - sidebarBottom;
                                affixType = 'CONTAINER-BOTTOM';
                            } else if (!this.isSidebarFitsViewport()) {

                                if (dims.containerTop <= colliderTop && 0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) {
                                    affixType = 'VIEWPORT-UNBOTTOM';
                                }
                            }

                            return affixType;
                        }
                    }, {
                        key: '_getStyle',
                        value: function _getStyle(affixType) {
                            if ('undefined' === typeof affixType) return;

                            var style = { inner: {}, outer: {} };
                            var dims = this.dimensions;

                            switch (affixType) {
                                case 'VIEWPORT-TOP':
                                    style.inner = {
                                        position: 'fixed', top: dims.topSpacing,
                                        left: dims.sidebarLeft - dims.viewportLeft, width: dims.sidebarWidth
                                    };
                                    break;
                                case 'VIEWPORT-BOTTOM':
                                    style.inner = {
                                        position: 'fixed', top: 'auto', left: dims.sidebarLeft,
                                        bottom: dims.bottomSpacing, width: dims.sidebarWidth
                                    };
                                    break;
                                case 'CONTAINER-BOTTOM':
                                case 'VIEWPORT-UNBOTTOM':
                                    var translate = this._getTranslate(0, dims.translateY + 'px');

                                    if (translate) style.inner = { transform: translate }; else style.inner = { position: 'absolute', top: dims.translateY, width: dims.sidebarWidth };
                                    break;
                            }

                            switch (affixType) {
                                case 'VIEWPORT-TOP':
                                case 'VIEWPORT-BOTTOM':
                                case 'VIEWPORT-UNBOTTOM':
                                case 'CONTAINER-BOTTOM':
                                    style.outer = { height: dims.sidebarHeight, position: 'relative' };
                                    break;
                            }

                            style.outer = StickySidebar.extend({ height: '', position: '' }, style.outer);
                            style.inner = StickySidebar.extend({
                                position: 'relative', top: '', left: '',
                                bottom: '', width: '', transform: ''
                            }, style.inner);

                            return style;
                        }
                    }, {
                        key: 'stickyPosition',
                        value: function stickyPosition(force) {
                            if (this._breakpoint) return;

                            force = this._reStyle || force || false;

                            var offsetTop = this.options.topSpacing;
                            var offsetBottom = this.options.bottomSpacing;

                            var affixType = this.getAffixType();
                            var style = this._getStyle(affixType);

                            if ((this.affixedType != affixType || force) && affixType) {
                                var affixEvent = 'affix.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
                                StickySidebar.eventTrigger(this.sidebar, affixEvent);

                                if ('STATIC' === affixType) StickySidebar.removeClass(this.sidebar, this.options.stickyClass); else StickySidebar.addClass(this.sidebar, this.options.stickyClass);

                                for (var key in style.outer) {
                                    var unit = 'number' === typeof style.outer[key] ? 'px' : '';
                                    this.sidebar.style[key] = style.outer[key] + unit;
                                }

                                for (var _key in style.inner) {
                                    var _unit = 'number' === typeof style.inner[_key] ? 'px' : '';
                                    this.sidebarInner.style[_key] = style.inner[_key] + _unit;
                                }

                                var affixedEvent = 'affixed.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
                                StickySidebar.eventTrigger(this.sidebar, affixedEvent);
                            } else {
                                if (this._initialized) this.sidebarInner.style.left = style.inner.left;
                            }

                            this.affixedType = affixType;
                        }
                    }, {
                        key: '_widthBreakpoint',
                        value: function _widthBreakpoint() {

                            if (window.innerWidth <= this.options.minWidth) {
                                this._breakpoint = true;
                                this.affixedType = 'STATIC';

                                this.sidebar.removeAttribute('style');
                                StickySidebar.removeClass(this.sidebar, this.options.stickyClass);
                                this.sidebarInner.removeAttribute('style');
                            } else {
                                this._breakpoint = false;
                            }
                        }
                    }, {
                        key: 'updateSticky',
                        value: function updateSticky() {
                            var _this3 = this;

                            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                            if (this._running) return;
                            this._running = true;

                            (function (eventType) {
                                requestAnimationFrame(function () {
                                    switch (eventType) {
                                        // When browser is scrolling and re-calculate just dimensions
                                        // within scroll. 
                                        case 'scroll':
                                            _this3._calcDimensionsWithScroll();
                                            _this3.observeScrollDir();
                                            _this3.stickyPosition();
                                            break;

                                        // When browser is resizing or there's no event, observe width
                                        // breakpoint and re-calculate dimensions.
                                        case 'resize':
                                        default:
                                            _this3._widthBreakpoint();
                                            _this3.calcDimensions();
                                            _this3.stickyPosition(true);
                                            break;
                                    }
                                    _this3._running = false;
                                });
                            })(event.type);
                        }
                    }, {
                        key: '_setSupportFeatures',
                        value: function _setSupportFeatures() {
                            var support = this.support;

                            support.transform = StickySidebar.supportTransform();
                            support.transform3d = StickySidebar.supportTransform(true);
                        }
                    }, {
                        key: '_getTranslate',
                        value: function _getTranslate() {
                            var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                            var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                            var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

                            if (this.support.transform3d) return 'translate3d(' + y + ', ' + x + ', ' + z + ')'; else if (this.support.translate) return 'translate(' + y + ', ' + x + ')'; else return false;
                        }
                    }, {
                        key: 'destroy',
                        value: function destroy() {
                            window.removeEventListener('resize', this, { capture: false });
                            window.removeEventListener('scroll', this, { capture: false });

                            this.sidebar.classList.remove(this.options.stickyClass);
                            this.sidebar.style.minHeight = '';

                            this.sidebar.removeEventListener('update' + EVENT_KEY, this);

                            var styleReset = { inner: {}, outer: {} };

                            styleReset.inner = { position: '', top: '', left: '', bottom: '', width: '', transform: '' };
                            styleReset.outer = { height: '', position: '' };

                            for (var key in styleReset.outer) {
                                this.sidebar.style[key] = styleReset.outer[key];
                            } for (var _key2 in styleReset.inner) {
                                this.sidebarInner.style[_key2] = styleReset.inner[_key2];
                            } if (this.options.resizeSensor && 'undefined' !== typeof ResizeSensor) {
                                ResizeSensor.detach(this.sidebarInner, this.handleEvent);
                                ResizeSensor.detach(this.container, this.handleEvent);
                            }
                        }
                    }], [{
                        key: 'supportTransform',
                        value: function supportTransform(transform3d) {
                            var result = false,
                                property = transform3d ? 'perspective' : 'transform',
                                upper = property.charAt(0).toUpperCase() + property.slice(1),
                                prefixes = ['Webkit', 'Moz', 'O', 'ms'],
                                support = document.createElement('support'),
                                style = support.style;

                            (property + ' ' + prefixes.join(upper + ' ') + upper).split(' ').forEach(function (property, i) {
                                if (style[property] !== undefined) {
                                    result = property;
                                    return false;
                                }
                            });
                            return result;
                        }
                    }, {
                        key: 'eventTrigger',
                        value: function eventTrigger(element, eventName, data) {
                            try {
                                var event = new CustomEvent(eventName, { detail: data });
                            } catch (e) {
                                var event = document.createEvent('CustomEvent');
                                event.initCustomEvent(eventName, true, true, data);
                            }
                            element.dispatchEvent(event);
                        }
                    }, {
                        key: 'extend',
                        value: function extend(defaults, options) {
                            var results = {};
                            for (var key in defaults) {
                                if ('undefined' !== typeof options[key]) results[key] = options[key]; else results[key] = defaults[key];
                            }
                            return results;
                        }
                    }, {
                        key: 'offsetRelative',
                        value: function offsetRelative(element) {
                            var result = { left: 0, top: 0 };

                            do {
                                var offsetTop = element.offsetTop;
                                var offsetLeft = element.offsetLeft;

                                if (!isNaN(offsetTop)) result.top += offsetTop;

                                if (!isNaN(offsetLeft)) result.left += offsetLeft;

                                element = 'BODY' === element.tagName ? element.parentElement : element.offsetParent;
                            } while (element);
                            return result;
                        }
                    }, {
                        key: 'addClass',
                        value: function addClass(element, className) {
                            if (!StickySidebar.hasClass(element, className)) {
                                if (element.classList) element.classList.add(className); else element.className += ' ' + className;
                            }
                        }
                    }, {
                        key: 'removeClass',
                        value: function removeClass(element, className) {
                            if (StickySidebar.hasClass(element, className)) {
                                if (element.classList) element.classList.remove(className); else element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                            }
                        }
                    }, {
                        key: 'hasClass',
                        value: function hasClass(element, className) {
                            if (element.classList) return element.classList.contains(className); else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
                        }
                    }, {
                        key: 'defaults',
                        get: function () {
                            return DEFAULTS;
                        }
                    }]);

                    return StickySidebar;
                }();

                return StickySidebar;
            }();

            exports.default = StickySidebar;


            // Global
            // -------------------------
            window.StickySidebar = StickySidebar;
        });
    });

    unwrapExports(stickySidebar);

    var jquery_stickySidebar = createCommonjsModule(function (module, exports) {
        (function (global, factory) {
            if (typeof undefined === "function" && undefined.amd) {
                undefined(['./sticky-sidebar'], factory);
            } else {
                factory(stickySidebar);
            }
        })(commonjsGlobal, function (_stickySidebar) {
            var _stickySidebar2 = _interopRequireDefault(_stickySidebar);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            (function () {
                if ('undefined' === typeof window) return;

                var plugin = window.$ || window.jQuery || window.Zepto;
                var DATA_NAMESPACE = 'stickySidebar';

                // Make sure the site has jquery or zepto plugin.
                if (plugin) {
                    var _jQueryPlugin = function (config) {
                        return this.each(function () {
                            var $this = plugin(this),
                                data = plugin(this).data(DATA_NAMESPACE);

                            if (!data) {
                                data = new _stickySidebar2.default(this, typeof config == 'object' && config);
                                $this.data(DATA_NAMESPACE, data);
                            }

                            if ('string' === typeof config) {
                                if (data[config] === undefined && ['destroy', 'updateSticky'].indexOf(config) === -1) throw new Error('No method named "' + config + '"');

                                data[config]();
                            }
                        });
                    };

                    plugin.fn.stickySidebar = _jQueryPlugin;
                    plugin.fn.stickySidebar.Constructor = _stickySidebar2.default;

                    var old = plugin.fn.stickySidebar;

                    /**
                     * Sticky Sidebar No Conflict.
                     */
                    plugin.fn.stickySidebar.noConflict = function () {
                        plugin.fn.stickySidebar = old;
                        return this;
                    };
                }
            })();
        });
    });

    var jquery_stickySidebar$1 = unwrapExports(jquery_stickySidebar);

    return jquery_stickySidebar$1;

})));



function checkForRelatedEvents() {

    $('html, body').animate({
        scrollTop: $("#city-events").offset().top - 55
    }, 1000);

}




$(document).ready(function () {


    $('.searchFormUp').click(function () {

        $('.searchAlt').show()
    })

    $('.searchInput').keyup(function () {
        if ($(this).val().length > 2) {
            $('.searchAlt').hide();
            //$('.easy-autocomplete-container').css('overflow-y','scroll')
        } else {
            $('.searchAlt').show();
            //$('.easy-autocomplete-container').css('overflow-y','')
        }
    });
    if ($('[data-tabs]').length > 0) {
        $('.tab').on('click', function (evt) {
            $('.secili').removeClass('secili');
            evt.preventDefault();
            $(this).toggleClass('secili');
            var sel = this.getAttribute('data-toggle-target');
            $('.tab-govde').removeClass('secili').filter(sel).addClass('secili');
        });
    }
    $(".searchFormUp").mouseleave(function () {
        $(".searchAlt").css("display", "none");
    });


    $(".cityList a").each(function () {
        let deger = $(this).attr('data-id')

        if (deger == 55) {
            $(this).find(".cityNo").html('<img src=' + cdnPath + '/dist/assets/img/kibris.svg alt=' + $(this).attr('data-name') + '>')
        } else if (deger == 120) {
            $(this).find(".cityNo").html('<img src=' + cdnPath + '/dist/assets/img/kosova.svg alt=' + $(this).attr('data-name') + '>')
        } else if (deger == 124) {
            $(this).find(".cityNo").html('<img src=' + cdnPath + '/dist/assets/img/hirvatistan.svg alt=' + $(this).attr('data-name') + '>')
        }
    });

    $('.searchFormUp').click(function () {
        $(this).addClass('searchAcik')
    })

    $('.closebar').click(function () {
        $('#gsearch').val('')
    })



});
//# sourceMappingURL=jquery.sticky-sidebar.js.map






/*------------15.11.2021---------*/




/* Fixed Menü ************************************************************/
var didScroll;
var lastScrollTop = 0;
var delta = 5;
var navbarHeight = $('.fixed-header').outerHeight();
$(window).scroll(function (event) {
    didScroll = true;
});
setInterval(function () {
    if (didScroll) {
        hasScrolled();
        didScroll = false;
    }
}, 250);
function hasScrolled() {
    var st = $(this).scrollTop();
    if (Math.abs(lastScrollTop - st) <= delta)
        return;
    if (st > lastScrollTop && st > navbarHeight) {
        $('.fixed-header').removeClass('nav-down').addClass('nav-up');
    } else {
        if (st + $(window).height() < $(document).height()) {
            $('.fixed-header').removeClass('nav-up').addClass('nav-down');
        }
    }
    lastScrollTop = st;
}
/* Fixed Menü ************************************************************/




/* Filter ************************************************************/
/* Filter ************************************************************/
$('.voleybolLig li').click(function () {
    let selectVal = $(this).data('lig')
    ligFiltre(selectVal)
});
$('.voleybolTakim li').click(function () {
    let selectVal = $(this).data('takim')
    takimFiltre(selectVal)
});
$('.voleybolLig').on('change', function () {
    let selectVal = $(this).val()
    val2 = parseInt(selectVal)
    ligFiltre(val2)
});
$('.voleybolTakim').on('change', function () {
    let selectVal = $(this).val()
    val2 = parseInt(selectVal)
    takimFiltre(val2)
});

let ligFiltre = (val) => {
    $('.voleybolDetay_fikstur li').each(function () {
        $(this).addClass('ligSecili')
    });
    if (val == 0) {
        $('.voleybolDetay_fikstur li').each(function () {
            $(this).show()
            $(this).removeClass('ligSecili')
            $('.voleybolTakim li').eq(0).click()
        });
    } else {
        $('.voleybolDetay_fikstur li').each(function () {
            let liVal = $(this).data('lig');
            if (val !== liVal) {
                $(this).hide()
                $(this).removeClass('ligSecili')
            } else {
                $(this).show()
                $(this).addClass('ligSecili')
            }
        })
    }
}



let takimFiltre = (val) => {
    if (val == 0) {
        $('.ligSecili').each(function () {
            $(this).show()
        });
    } else {
        if ($('li').hasClass('ligSecili')) {
            $('.ligSecili').each(function () {
                let liVal = $(this).data('takim');
                if (val !== liVal) {
                    $(this).hide()
                } else {
                    $(this).show()
                }
            })
        } else {
            $('.voleybolDetay_fikstur li').each(function () {
                let liVal = $(this).data('takim');
                if (val !== liVal) {
                    $(this).hide()
                } else {
                    $(this).show()
                }
            })
        }
    }
}




//#region --User Browsing Event History
//let EventHistory = JSON.parse(localStorage.getItem('EventHistory'));
//EventHistory === null ? EventHistory = [] : null

//if (typeof event == 'object')
//    if (!EventHistory.some(function (e) { return e.eventId === event.eventId })) {
//        EventHistory.unshift(event);
//        localStorage.setItem('EventHistory', JSON.stringify(EventHistory));
//    }
//let maxDisplayedItem = 6
//const deleteEvent = eventID => {
//    document.getElementById("eventHistoryList").innerHTML = ""
//    EventHistory = EventHistory.filter(function (e) { return e.eventId !== eventID });
//    localStorage.setItem('EventHistory', JSON.stringify(EventHistory));
//    EventHistory.length <= 0 ? document.getElementById("eventHistory").remove() : renderEventHistory();
//}
//const renderEventHistory = () =>
//    document.querySelector('#eventHistoryList').append(...EventHistory.slice(0, maxDisplayedItem).map(event => {
//        let div = document.createElement('div');
//        div.className = "col-md-2 cityEvent";
//        div.innerHTML = `<a href="${event.url}"> <img src="${event.ImageUrl}" alt="${event.eventName}"> <div> ${event.eventName} </div> </a> <a class="cityEventsSil" href="javascript://" onclick="deleteEvent(${event.eventId})"><svg fill="#ffffff" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm4.597 17.954l-4.591-4.55-4.555 4.596-1.405-1.405 4.547-4.592-4.593-4.552 1.405-1.405 4.588 4.543 4.545-4.589 1.416 1.403-4.546 4.587 4.592 4.548-1.403 1.416z"/></svg></a>`
//        return div;
//    }));

//if (document.getElementById("eventHistory")) {
//    document.getElementById("eventHistory").innerHTML = `<div class="container cityEventsContainer"><h2>Önceden Görüntülediğiniz Etkinlikler</h2><div id="eventHistoryList"></div></div>`
//    renderEventHistory();
//}
//#endregion --User Browsing Event History



/************24.01.2022*******************************/




if (localStorage.getItem("city") === null) {
    /* $('.sehirSeciliMenu').hide()*/
    $('body').addClass('sehirSeciliDegil')
    $('.headerSehirSec').css('display', 'flex')
} else {
    var getSehir = localStorage.getItem("city");
    var getSehirName = JSON.parse(getSehir);
    $('body').removeClass('sehirSeciliDegil')
    $('.headerSehirSec').hide()
    $('.sehirSeciliMenu').show()
    var region = "tr-tr";
    if (typeof $('#hdnRegion').val() != 'undefined') {
        region = $('#hdnRegion').val();
    }

    if (region != "tr-tr") {
        $('.sehirSeciliMenu a').attr('href', '/' + region + '/city/' + getSehirName.url);
    }
    else {
        $('.sehirSeciliMenu a').attr('href', '/' + region + '/sehrineozel/' + getSehirName.url);
    }



    $('.sehirSeciliMenu a').attr('title', getSehirName.name + ' Etkinlikleri');
    $('.hikayeYN ul').prepend(`<li class="hikayeYN__sehir"><a href="/sehrineozel/${getSehirName.url}" title="${getSehirName.name}"><strong>${getSehirName.name}</strong> <h3>#${SehrineOzelEtkinlikler}</h3></a></li>`)
}

/************24.01.2022*******************************/
function koltukSecimineGit(seansId, tip) {

    koltukSec_form = document.createElement('form');
    koltukSec_form.name = 'seanceForm';
    koltukSec_form.method = 'POST';
    koltukSec_form.action = `/${region}/${tip}/koltuk_secimi`;


    koltukSec_inp = document.createElement('input');
    koltukSec_inp.type = 'hidden';
    koltukSec_inp.name = 'seanceId';
    koltukSec_inp.value = seansId;
    koltukSec_form.appendChild(koltukSec_inp);
    document.body.appendChild(koltukSec_form);
    koltukSec_form.submit();
}

function redeemCoupon(seansId, seoUrl) {

    $('#seanceForm').remove();

    koltukSec_form = document.createElement('form');
    koltukSec_form.name = 'seanceForm';
    koltukSec_form.id = 'seanceForm';
    koltukSec_form.method = 'POST';
    koltukSec_form.action = `/odeme2`;

    koltukSec_inp = document.createElement('input');
    koltukSec_inp.type = 'hidden';
    koltukSec_inp.name = 'seanceId';
    koltukSec_inp.value = seansId;
    koltukSec_form.appendChild(koltukSec_inp);

    seoUrl_inp = document.createElement('input');
    seoUrl_inp.type = 'hidden';
    seoUrl_inp.name = 'seoUrl';
    seoUrl_inp.value = seoUrl;
    koltukSec_form.appendChild(seoUrl_inp);

    selectedTicketNumber_inp = document.createElement('input');
    selectedTicketNumber_inp.type = 'hidden';
    selectedTicketNumber_inp.name = 'selectedTicketNumber';
    selectedTicketNumber_inp.value = 1;
    koltukSec_form.appendChild(selectedTicketNumber_inp);

    sessionId_inp = document.createElement('input');
    sessionId_inp.type = 'hidden';
    sessionId_inp.name = 'sessionId';
    sessionId_inp.value = '00000000-0000-0000-0000-000000000000';
    koltukSec_form.appendChild(sessionId_inp);

    ticketTypeId_inp = document.createElement('input');
    ticketTypeId_inp.type = 'hidden';
    ticketTypeId_inp.name = 'ticketTypeId';
    ticketTypeId_inp.value = '0';
    koltukSec_form.appendChild(ticketTypeId_inp);

    couponCode_inp = document.createElement('input');
    couponCode_inp.type = 'hidden';
    couponCode_inp.name = 'couponCode';
    couponCode_inp.value = $("#couponCode").val();
    koltukSec_form.appendChild(couponCode_inp);

    document.body.appendChild(koltukSec_form);
    koltukSec_form.submit();
}


function EventFilter(dataCORE, isMobile) {



    var offset = 1;
    var limit = 25;
    var listedData = []
    $('.mekanaraINP').on('keyup', search);
    let aramaTxt = '';
    var mekanAdi = '';

    function search() {
        aramaTxt = $('.mekanaraINP').val().toLowerCase();
        $('.sehir-detay__etkinlikler__mekanfiltre label, .yds_filter_body_action label').each(function () {
            mekanAdi = $(this).text().toLowerCase();
            mekanAdi.includes(aramaTxt) ? $(this).parent().show() : $(this).parent().hide();
        });
    };


    //$('.sehir-detay__etkinlikler__filtre__gorunum').addClass('takvimgorunumu');
    $('.sehir-detay__etkinlikler__filtre__gorunum').click(function () {
        if ($(this).hasClass('takvimgorunumu')) {
            $(this).removeClass('takvimgorunumu');
            $('.sehirdis').removeClass('sehir-detay--takvim');
            $('.sehir-detay__etkinlikler__filtre__gorunum b').html(Takvim);
        } else {
            $(this).addClass('takvimgorunumu');
            $('.sehirdis').addClass('sehir-detay--takvim');
            $('.sehir-detay__etkinlikler__filtre__gorunum b').html(Liste);
        }
    });

    $(".checkboxYN input").on('change', function () {
        $('.sehir-detay__liste').each(function () {
            if ($(this).children('.mekanvar').length == 0) {
                $(this).parent().removeClass('gunVar').addClass('gunYok');
            } else {
                $(this).parent().removeClass('gunYok').addClass('gunVar');
            }
        });
    });



    let listele = (clear) => {

        let html = "";
        clear == 1 ? $('.sehirdis').html("") : null;
        data = _.orderBy(filteredData, ['SeanceDate'], ['asc']);
        data = _(data).slice((offset * limit) - limit).take(limit).value()
        data = _.groupBy(data, 'Date');

        $('.etkinlikyok').css('display', 'none')
        $('.sehir-detay__etkinlikler__filtre__arama input').val('')


        _.forEach(data, function (element) {
            splitTarih = element[0].Date.split(" ");
            const gun = splitTarih[0];
            const ay = splitTarih[1];
            let liste = "";


            var url = 'href = "/' + region + '/<%- element2.tipForUrl%>/<%- element2.SeoUrl%>"';
            if (element[0].CinemaId != 0) {
                url = 'href = "/' + region + '/<%- element2.tipForUrl%>/<%- element2.SeoUrl%>?cinemaId=' + element[0].CinemaId + '"';
            }

            var ListeCompiled = _.template('<% _.forEach(data, function(element2) {satisDurum = (element2.KoltukKontrol == 0) ? false : true;splitTarih = element2.Date.split(" "); const gun = splitTarih[0]; const ay = splitTarih[1]; %><li> <div class="sehir-detay__liste-mobiltarih"> <span> <%- gun%> </span> <b>${ay}</b> <p> <%- element2.Hour%> </p>  <%if(satisDurum){%><strong>SATIŞTA</strong><%}else{%><strong class="tukendi">TÜKENDİ</strong><%}%>  </div> <a class="etlinlikLink"' + url + ' title="<%- element2.Name%>"></a> <%if(!isMobile){%><figure><a ' + url + ' title="<%- element2.Name%>"><img loading="lazy" src="' + cdnPath + '<%- element2.ImageUrl%>" alt="<%- element2.Name%>"></a></figure><%}%> <div> <div class="sehir-detay__liste__ust"><strong class="sehir-detay__liste__ust-<%- element2.tip%>"> <%- element2.tip%> </strong> <p class="sehir-detay__liste__ust--bilgimesaji"> <%- element2.adversting%> </p> </div> <h2><a ' + url + ' title="<%- element2.Name%>"> <%- element2.Name%> </a></h2> <address> <img src="' + cdnPath + '/dist/assets/img/sehirdetaylocation.svg" alt="Lokasyon İkonu"> <time datatime=""> <%- element2.Hour%> </time> <span>·</span><p><%- element2.SaloonName%></p></address> </div><%if(satisDurum){%><button onclick="koltukSecimineGit(<%- element2.SeanceId %>, \'<%- element2.tipForUrl %>\')" class="direkBilet" data-tip="<%- element2.tipForUrl%>" data-title="<%- element2.SeanceId%>">Biletini Al</button><%}else{%><button class="tukenmisBilet">Tükendi</button><%}%></li><% }); %>');

            liste = ListeCompiled({ data: element });
            html += `
			<div class="yeniGun">
			<div class="sehir-detay__liste__tarih">
				<span>${ay}</span>
				<b>${gun}</b>
				<p class="sehir-detay__mobil-tarih">${element[0].Date}</p>
			</div>
			<ul class="sehir-detay__liste">
				${liste}
			</ul>  
			</div>
			`
        });
        $('.sehirdis').append(html);
    };

    $(".sehir-detay__etkinlikler__filtre__arama input").on("keyup", function () {
        let aramaTxt = $(this).val().toLowerCase();
        $(".sehir-detay__liste > li").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(aramaTxt) > -1);
        });
        if ($('.sehir-detay__liste > li:visible').length == 0) {
            $('.etkinlikyok').css('display', 'flex')
        } else {
            $('.etkinlikyok').css('display', 'none')
        }
    });


    let sehirKontrol = $('.sehir-detay__etkinlikler__filtre').attr('data-kontrol')
    let mekanSehir = sehirKontrol == "Şehir" ? 'CityName' : 'SaloonName'
    var MekanlarCompiled = _.template('<% _.forEach(data, function(value) { %> <li data-tur="<%- value%>"><label class="checkboxYN"><%- value%><input type="checkbox" value="<%- value%>"><span class="checkmark"></span></label></li><% }); %>');
    var mekanlar = MekanlarCompiled({ data: _.chain(dataCORE).map(mekanSehir).uniq().value() });

    let TumTipler = _.chain(dataCORE).map('tip').uniq().value();
    let TumMekanlar = _.chain(dataCORE).map(mekanSehir).uniq().value();
    var EtkinliklerCompiled = _.template('<% _.forEach(data, function(value) { %> <li>"><label class="checkboxYN"><%- value%><input type="checkbox" value="<%- value%>"><span class="checkmark"></span></label></li><% }); %>');
    let etkinlikler = EtkinliklerCompiled({ data: _.chain(dataCORE).map('tip').uniq().value() });




    $('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul').append(mekanlar);
    $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').append(etkinlikler);


    let indirimSayisi = _.filter(dataCORE, ({ IsDiscount }) => (_.indexOf([true], IsDiscount) !== -1)).length
    if (indirimSayisi == 0) {
        $('.sehir-detay__tags__eklenti').hide()
    }

    let indirimKontrol = false;
    let text = "İNDİRİMLİ ETKİNLİKLER"
    $('.sehir-detay__tags__eklenti').text(`İNDİRİMLİ ETKİNLİKLER [${indirimSayisi}]`)
    $('.sehir-detay__tags__eklenti').click(function () {
        indirimKontrol = !indirimKontrol
        if ($(this).hasClass('filtreAktif')) {
            $(this).removeClass('filtreAktif')
            $(this).text(`İNDİRİMLİ ETKİNLİKLER [${indirimSayisi}]`)
        } else {
            $(this).addClass('filtreAktif')
            $(this).text("FİLTREYİ KALDIR")
        }
        filtreItem()
    })



    let filteredData = [];
    let filtreItem = () => {
        const etkinlikler = $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checked').map(function () {
            return $(this).val();
        });
        const mekanlar = $('.sehir-detay__etkinlikler__mekanfiltre input:checked').map(function () {
            return $(this).val();
        });


        tipFiltre = etkinlikler.get().length > 0 ? etkinlikler.get() : TumTipler;
        mekanFiltre = mekanlar.get().length > 0 ? mekanlar.get() : TumMekanlar;


        if (isMobile && $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checked').length > 0) {
            $('.sehir-detay__etkinlikler__etkinlikfiltre b').html(tipFiltre.toString())
        }
        if (isMobile && $('.sehir-detay__etkinlikler__mekanfiltre input:checked').length > 0) {
            $('.sehir-detay__etkinlikler__mekanfiltre b').html(mekanFiltre.toString())
        }



        if (indirimKontrol == false) {
            indirim = [true, false];
        } else {
            indirim = [true];
        }

        filteredData = _.filter(dataCORE, ({ tip, SaloonName, IsDiscount, CityName }) => (_.indexOf(tipFiltre, tip) !== -1) && (_.indexOf(mekanFiltre, (mekanSehir == "CityName") ? CityName : SaloonName) !== -1) && (_.indexOf(indirim, IsDiscount) !== -1));


        etkinlikTip = _.filter(dataCORE, ({ IsDiscount, SaloonName, CityName }) => (_.indexOf(mekanFiltre, (mekanSehir == "CityName") ? CityName : SaloonName) !== -1) && (_.indexOf(indirim, IsDiscount) !== -1));
        var result = _(etkinlikTip).groupBy('tip').map((tipler, tip) => ({ tip, sayi: tipler.length })).orderBy('sayi', 'desc').value();
        var EtkinliklerCompiled = _.template('<% _.forEach(data, function(deger) { %> <li data-tur="<%- deger.tip%>"><label class="checkboxYN"><%- deger.tip%> (<%- deger.sayi%>) <input type="checkbox" value="<%- deger.tip%>"><span class="checkmark"></span></label></li><% }); %>');




        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').html(EtkinliklerCompiled({ data: result }));
        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input').each(function () {
            etkinlikler.get().includes($(this).val()) && $(this).prop("checked", true)
        })

        $('.sehir-detay__etkinlikler__mekanfiltre--sonuc').html(`${filteredData.length} SONUCU GÖSTER`)

        let seciliEtkinlik = _.template('<% _.forEach(data, function(deger) { %> <button data-filtre="<%- deger%>"> <%- deger%> <img src="' + cdnPath + '/dist/assets/img/filtreDelete.svg" alt="Filtreyi Sil" width="20"></button> <% }); %>');
        $('.sehir-detay__tags__filtreler').html('')
        $('.sehir-detay__tags__filtreler').append(seciliEtkinlik({ data: etkinlikler.get() }));
        $('.sehir-detay__tags__filtreler').append(seciliEtkinlik({ data: mekanlar.get() }));


        offset = 1;
        listele(1);

    };


    $('.sehir-detay__tags__filtreler').on('click', 'button', function () {
        let sayi = $('.sehir-detay__tags__filtreler button').length;
        sayi == 1 ? mekanTemizle() : '';
        let filtre = $(this).attr('data-filtre')
        $('li[data-tur="' + filtre + '"] input').prop('checked', false);
        filtreItem();
    })

    $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').delegate("input", "change", function () {
        filtreItem();
    });

    $('.sehir-detay__etkinlikler__mekanfiltre  input').on('change', function () {
        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checkbox').prop('checked', false);
        if ($('.filtreAktif').length == 1) { $('.filtreAktif').click() }
        filtreItem();
    });

    function mekanTemizle() {
        $('.sehir-detay__etkinlikler__etkinlikfiltre b').html('Lütfen Etkinlik Türü Seçin')
        $('.sehir-detay__etkinlikler__mekanfiltre b').html('Lütfen Mekan Seçin')
    }


    $('.mekanTemizle').click(function () {
        mekanTemizle()
        $('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul input').each(function () {
            this.checked = false;
        })
        filtreItem()
    })

    $('.tumfiltreleriTemizle').click(function () {
        mekanTemizle()
        $('.checkboxYN input').each(function () {
            this.checked = false;
        })
        filtreItem()
    })

    $('.etkinlikTemizle').click(function () {
        mekanTemizle()
        $('.sehir-detay__etkinlikler__etkinlikfiltre input').each(function (i) {
            this.checked = false;
        })
        filtreItem()
    })

    $('.sehir-detay__etkinlikler__filtre__mekanlar, .sehir-detay__etkinlikler__filtre__etkinlikturu').click(function (e) {
        e.stopPropagation();
        $(this).addClass('zindex100')
        $(this).find('div').addClass('mekanfiltreAcik')
    })

    $('.sehir-detay__etkinlikler__filtre--mobil---altbaslik button').click(function (e) {
        $(this).parent().parent().removeClass('mekanfiltreAcik')
        $('.zindex100').removeClass('zindex100')
        e.stopPropagation();
    })

    //let mekanfiltreAc = () => {
    //    $('.sehir-detay__etkinlikler__filtre').addClass('mekanfiltreAcik')
    //}
    $('.sehir-detay__etkinlikler__mekanfiltre--sonuc, .etkinlikmekanKapat').click(function (e) {
        $('.mekanfiltreAcik').removeClass('mekanfiltreAcik')
        $('.zindex100').removeClass('zindex100')
        e.stopPropagation();
    })

    filtreItem()



    $(window).scroll(function () {
        if ($(window).scrollTop() >= $(document).height() - $(window).height() - 550) {
            offset++
            listele()
        }
    });






}

/******************************************** 09.02.2022************/
if (localStorage.getItem('sehriniGosterme') === null && localStorage.getItem('city')) {
    $(document).on('scroll', function () {
        if ($(this).scrollTop() >= 500) {
            $(document).off('scroll');
            $('body').addClass('sehriniKesfet__acik__body')
            $('.sehriniKesfet__overlay').fadeIn()
        }
    });


} else if (localStorage.getItem('sehriniGosterme')) {
    $('.sehriniKesfet__ac').addClass('sehriniKesfet__ac__kucult')
}

function sehrinikesfet() {
    $('.sehriniKesfet').addClass('sehriniKesfet__acik')
    $('.sehriniKesfet__overlay').fadeIn()
    $('.sehriniKesfet__kapat').hide()
    $('.sehrineozelOverlay__text').hide()



}

function sehrinikesefetKucult() {
    $('.sehriniKesfet__overlay').fadeOut()
    $('.sehriniKesfet__ac').addClass('sehriniKesfet__ac__kucult')
    $('body').removeClass('sehriniKesfet__acik__body')
    $('.sehriniKesfet').removeClass('sehriniKesfet__acik')
    localStorage.setItem('sehriniGosterme', true);
}

function getPopularPlaces(cityId) {

    $.ajax({

        type: "POST",
        url: '/GetPopularPlaces/' + cityId,
        dataType: "json",
        success: function (data) {


            $.each(data, function (i, item) {
                $(".sehriniKesfet__mekanlar  ul").append(' <a href="/mekan/' + item.SeoUrl + '"><li><figure><img src="' + cdnPath + item.BranchImageUrl + '"></figure><span>' + item.CinemaBranchName + '</span></li ></a>');

            });

        },
        error: function (response) {
            console.log("hata");
        }

    });


}
function getPopularEvents(cityId) {

    $.ajax({

        type: "POST",
        url: '/GetPopularEvents/' + cityId,
        dataType: "json",
        success: function (data) {


            if (data.length == 0) {

                $("#sehriniKesfetTitle").css('display', 'none');

            }

            $.each(data, function (i, item) {
                $("#sehriniKesfetTitle").css('display', 'block');

                if (i != 0 && i % 2 == 0) {

                    $(".sehriniKesfet__etkinlikler").append("<ul></ul>");
                }
                $(".sehriniKesfet__etkinlikler ul:last").append('<li><div class="sehriniKesfet__etkinlikler__tarih"><span>' + item.tarih + '</span><b>' + item.ay + '</b><p>' + item.saat + '</p></div><div class="sehriniKesfet__etkinlikler__govde"> <div class="sehriniKesfet__liste__ust"><strong class="sehir-detay__liste__ust-' + item.tip + '">' + item.tip + '</strong> </div <h2><a href="/' + item.tipForUrl + '/' + item.url + '">' + item.etkinlik + '</a></h2> <address> <img src="' + cdnPath + '/dist/assets/img/sehirdetaylocation.svg" alt="Lokasyon İkonu"><p>' + item.mekan + '</p></address></div></li>')


            });

        },
        error: function (response) {
            console.log("hata");
        }

    });


}
/******************************************** 09.02.2022************/

/*******28 şubat *///

$('.citySelect a,.headerSehirSec button').click(function () {
    $('.cityModalOverlay').show()
})

$('.section.cityModal div.cityModalWrapper div.cityList a').click(function () {
    $('.cityModalOverlay').hide()
})

$('.cityModalOverlay, .btnGhostDark').click(function () {
    $('.cityModalOverlay').hide()
})

/*******28 şubat */


/************** 17 MART ************/


const isMobile = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));




$('.yeniArama input').click(function () {
    $('.yeniArama__acik').removeClass('yeniArama__acik')
    if ($('.yeniArama__acik').length == 0) {
        $(this).parent().parent().find($('.yeniArama__sonuc--acilis')).addClass('yeniArama__acik')

        $('.aramaOverlay').css('z-index', '25000')
        $('.yeniArama').css('z-index', '25001')
    }
})


$('.yeniaramaAc').click(function () {
    $('.aramaicsayfa').addClass('yeniaramaAsagida')
    $('.searchInputTop').focus();
    $('.aramaOverlay').fadeIn();
    $('.yeniArama input').click();

    var PopulerAramalar = [];
    var SearchSuggestionsData = [];

    if (PopulerAramalar.length == 0) {
        $.get("/Dynamic/GetSearchPopular?langId=" + langId + "&countryId=" + countryId, function (result) {
            $.each(result, function (key, item) {

                item.SeoUrl = "/" + item.SeoUrl;
                PopulerAramalar.push(item);
            });
            populerAramalar(PopulerAramalar);
        });
    }

    if (SearchSuggestionsData.length == 0) {
        $.get("/Dynamic/GetSearchSuggest?langId=" + langId + "&countryId=" + countryId, function (result) {
            $.each(result, function (key, item) {
                item.SeoUrl = "/" + item.SeoUrl;
                SearchSuggestionsData.push(item);
            });

            biletinialOneriyor(SearchSuggestionsData);
        });

    }
})


$('.aramaOverlay').click(function () {
    $('.aramaicsayfa .yeniArama__acik').removeClass('yeniArama__acik')
    $('.yeniArama__kapali').removeClass('yeniArama__kapali')
    $('.aramaOverlay').css('z-index', '100')
    $('.yeniArama').css('z-index', '101')
    $('.aramaOverlay').hide()
    $('.aramaicsayfa').removeClass('yeniaramaAsagida')
});

$('.yeniArama input').on('keyup', function () {
    let val = $(this).val();
    if (val.length > 2) {
        $('.yeniArama__acik').removeClass('yeniArama__acik')
        if (isMobile) {
            $('.yeniArama__kapali').removeClass('.yeniArama__kapali')
            $('.yeniArama__sonuc--sonuc').addClass('yeniArama__acik')
            $('.yeniArama__sonuc--acilis').hide()
        }
        $(this).parent().parent().find($('.yeniArama__sonuc--sonuc')).addClass('yeniArama__acik')
    } else {
        if (isMobile) {
            $('.yeniArama__sonuc--acilis').show()
        }
        $(this).parent().parent().find('.yeniArama__sonuc--acilis').addClass('yeniArama__acik')
        $('.yeniArama__sonuc--sonuc').removeClass('yeniArama__acik')
    }
})

$('.aramaKapat').click(function (e) {
    e.preventDefault()
    $('.aramaicsayfa .yeniArama__acik').removeClass('yeniArama__acik')
    $('.yeniArama__kapali').removeClass('yeniArama__kapali')
    $('.aramaOverlay').css('z-index', '100')
    $('.yeniArama').css('z-index', '101')
    $('.aramaOverlay').hide()
    $('.aramaicsayfa').removeClass('yeniaramaAsagida')
})


$('.aramaAc').click(function () {
    $('.yeniArama').show()

})

$('.aramaOverlay').on('click', function () {
    $(this).fadeOut()
    $('.yeniArama__acik').removeClass('yeniArama__acik')
    $('.yeniArama input').val('')
    $('.yeniArama__sonuc--acilis').removeClass('yeniArama__kapali')
    $('.aramaicsayfa').removeClass('yeniaramaAsagida')
    $('.aramaOverlay').css('z-index', '100')
    $('.yeniArama').css('z-index', '101')
})


let populerAramalarDiv = $('.populerAramalar__data')

let populerAramalar = (popularData) => {
    if (popularData.length < 1) {
        $('.populerAramalar').remove()
    }
    let html = ''
    popularData.forEach((item) => {
        html +=
            ` <a href="/${region}${item.SeoUrl}" title="${item.FilmName}">${item.FilmName}</a>`
    })
    populerAramalarDiv.html(html)
}


let biletinialOneriyorDiv = $('.biletinialOneriyor__data')

let biletinialOneriyor = (biletinialOneriyorData) => {
    if (biletinialOneriyorData.length < 1) {
        $('.biletinialOneriyor').remove()
    }
    let html = ''
    biletinialOneriyorData.forEach((item) => {
        if (item.ImageUrl != null) {
            html +=
                `
            <li>
                <figure><a href="/${region}${item.SeoUrl}" title="${item.FilmName}"><img src="${cdnPath + item.ImageUrl}" alt="${item.FilmName}"></a></figure>
                <div>
                    <a href="/${region}${item.SeoUrl}" title="${item.FilmName}">${item.FilmName}<img src="${cdnPath}/dist/assets/img/oneriyildiz.svg" alt="Biletinial Öneriyor"></a>
                    <span>${item.Description}</span>
                </div>
            </li>
            `
        }
        else {
            html +=
                `
            <li>
                <figure><a href="/${region}${item.SeoUrl}" title="${item.FilmName}"><img src="/dist/assets/img/logosmall.svg" alt="${item.FilmName}"></a></figure>
                <div>
                    <a href="/${region}${item.SeoUrl}" title="${item.FilmName}">${item.FilmName}<img src="${cdnPath}/dist/assets/img/oneriyildiz.svg" alt="Biletinial Öneriyor"></a>
                    <span>${item.Description}</span>
                </div>
            </li>
            `
        }
    })
    biletinialOneriyorDiv.html(html)
}

let aramaSonuclariDiv = $('.yeniArama__sonuc__data')

let aramaSonuclari = (aramaSonucData) => {
    let html = ''
    aramaSonucData.forEach((item) => {

        html +=
            `
                <li ${(item.ItemType == 'sehir') ? 'class="tipSehir"' : item.ItemType == 'Mekan' ? 'class="tipMekan"' : 'class="tipDiger"'}><a href="${item.SeoUrl}" title="${item.FilmName}">${item.FilmName}<span class="sehir-detay__liste__ust-${item.OrganizerTypeUrl}">${item.OrganizerTypeStr}</span></a></li>
            `
    })
    aramaSonuclariDiv.html(html)
}


function CheckPwd(str, str2) {

    var result = [];
    result.message = "Parola kullanılabilir";
    result.code = 1;

    var regex_symbols = /[-!$%^&*()_+|~=`{}\[\]:\/;<>?,.@#]/;
    var frequentlyUsed = ["12345678", "1111", "picture1", "123123", "abc123", "0000", "1111", "2222", "3333", "4444", "5555", "6666", "7777", "8888", "9999", "iloveyou", "seniseviyorum", "password1", "qqww1122", "123321", "654321", "qwertyuiop", "qwer123456", "asdfghjkl", "87654321", "unknown", "zxcvbnm", "112233", "123qwe", "123abc", "1q2w3e4r", "1qaz2wsx", "aaaaaa", "1q2w3e", "passw0rd", "sanane", "parola", "gizli", "unuttum", "deneme", "bilmiyorum", "bulursun", "qweasd"];

    if (str.length < 8 || str.length > 24) {
        result.message = "Parolanız 8-24 karakter uzunluğunda olmalıdır!";
        result.code = -1;
        return result;
    } else if (str.search(/\d/) == -1) {
        result.message = "Parolanız en az 1 rakam içermelidir!";
        result.code = -2;
        return result;
    } else if (str.search(/[a-z]/) == -1) {
        result.message = "Parolanız en az 1 küçük harf içermelidir!";
        result.code = -3;
        return result;
    } else if (str.search(/[A-Z]/) == -1) {
        result.message = "Parolanız en az 1 büyük harf içermelidir!";
        result.code = -4;
        return result;
    }
    //else if (!regex_symbols.test(str)) {
    //    result.message = "Parolanız en az 1 özel karakter içermelidir!";
    //    result.code = -5;
    //    return result;
    //}
    else if (str != str2) {
        result.message = "Parolalarınız eşleşmiyor!";
        result.code = -6;
        return result;
    }

    return result;
}



const loadingsvg = '<svg version="1.1" id="L9" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 0 0" xml:space="preserve"> <path fill="#fff" d="M73,50c0-12.7-10.3-23-23-23S27,37.3,27,50 M30.9,50c0-10.5,8.5-19.1,19.1-19.1S69.1,39.5,69.1,50"> <animateTransform attributeName="transform" attributeType="XML" type="rotate" dur="1s" from="0 50 50" to="360 50 50" repeatCount="indefinite" /> </path> </svg>'
let filteredSehirData = [];
let sonuc = [];

function decodeTurkishCharacters(text) {
    return text
        .replace(/\ş/g, "s")
        .replace(/\ı/g, "ı")
        .replace(/\I/g, "ı")
        .replace(/\İ/g, "i")
}


var listedData = []
$('.mekanaraINP').on('keyup', search);
let aramaTxt = '';
var mekanAdi = '';

function search() {
    aramaTxt = $('.mekanaraINP').val().toLowerCase();
    $('.sehir-detay__etkinlikler__mekanfiltre label, .yds_filter_body_action label').each(function () {
        mekanAdi = decodeTurkishCharacters($(this).text().toLowerCase());
        mekanAdi.includes(aramaTxt) ? $(this).parent().show() : $(this).parent().hide();
    });
};



$(".sehir-detay__etkinlikler__filtre__arama input").on("keyup", function () {
    let aramaTxt = $(this).val().toLowerCase();
    $(".sehir-detay__liste > li").filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(aramaTxt) > -1);
    });
    if ($('.sehir-detay__liste > li:visible').length == 0) {
        $('.etkinlikyok').css('display', 'flex')
    } else {
        $('.etkinlikyok').css('display', 'none')
    }
});


$(".sehir-detay__etkinlikler__mekanfiltre input").on("keyup", function () {
    let aramaTxt = $(this).val().toLowerCase();
    $(".sehir-detay__etkinlikler__mekanfiltre > li > div > ul > li").filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(aramaTxt) > -1);
    });
    if ($('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul > li:visible').length == 0) {
        $('.etkinlikyok').css('display', 'flex')
    } else {
        $('.etkinlikyok').css('display', 'none')
    }
});


let sehirleriListele = (data) => {
    filteredSehirData = data
    let sehirKontrol = $('.sehir-detay__etkinlikler__filtre').attr('data-kontrol')
    let mekanSehir = sehirKontrol == "Şehir" ? 'CityName' : 'SaloonName'
    var MekanlarCompiled = _.template('<% _.forEach(data, function(value) { %> <li data-tur="<%- value%>"><label class="checkboxYN"><%- value%><input type="checkbox" value="<%- value%>"><span class="checkmark"></span></label></li><% }); %>');
    var mekanlar = MekanlarCompiled({
        data: _.chain(data).map(mekanSehir).uniq().value()
    });
    let TumTipler = _.chain(data).map('tip').uniq().value();
    let TumMekanlar = _.chain(data).map(mekanSehir).uniq().value();
    var EtkinliklerCompiled = _.template('<% _.forEach(data, function(value) { %> <li>"><label class="checkboxYN"><%- value%><input type="checkbox" value="<%- value%>"><span class="checkmark"></span></label></li><% }); %>');
    let etkinlikler = EtkinliklerCompiled({
        data: _.chain(data).map('tip').uniq().value()
    });




    $('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul').append(mekanlar);
    $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').append(etkinlikler);


    let indirimSayisi = _.filter(data, ({
        IsDiscount
    }) => (_.indexOf([true], IsDiscount) !== -1)).length
    if (indirimSayisi == 0) {
        $('.sehir-detay__tags__eklenti').hide()
    }

    let indirimKontrol = false;
    let text = "İNDİRİMLİ ETKİNLİKLER"
    $('.sehir-detay__tags__eklenti').text(`İNDİRİMLİ ETKİNLİKLER [${indirimSayisi}]`)
    $('.sehir-detay__tags__eklenti').click(function () {
        indirimKontrol = !indirimKontrol
        if ($(this).hasClass('filtreAktif')) {
            $(this).removeClass('filtreAktif')
            $(this).text(`İNDİRİMLİ ETKİNLİKLER [${indirimSayisi}]`)
        } else {
            $(this).addClass('filtreAktif')
            $(this).text("FİLTREYİ KALDIR")
        }
        filtreItem()
    })




    let filtreItem = () => {
        const etkinlikler = $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checked').map(function () {
            return $(this).val();
        });
        const mekanlar = $('.sehir-detay__etkinlikler__mekanfiltre input:checked').map(function () {
            return $(this).val();
        });

        $('.sehirdis').html('')


        tipFiltre = etkinlikler.get().length > 0 ? etkinlikler.get() : TumTipler;
        mekanFiltre = mekanlar.get().length > 0 ? mekanlar.get() : TumMekanlar;

        if ($('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checked').length > 0) {
            $('.sehir-detay__etkinlikler__etkinlikfiltre b').html(tipFiltre.toString())
        } else {
            $('.sehir-detay__etkinlikler__etkinlikfiltre b').html('Lütfen Etkinlik Türü Seçin')
        }
        if ($('.sehir-detay__etkinlikler__mekanfiltre input:checked').length > 0) {
            $('.sehir-detay__etkinlikler__mekanfiltre b').html(mekanFiltre.toString())
        } else {
            $('.sehir-detay__etkinlikler__mekanfiltre b').html('Lütfen Mekan Seçin')
        }



        filteredSehirData = _.filter(data, ({
            tip,
            SaloonName,
        }) => (_.indexOf(tipFiltre, tip) !== -1) && (_.indexOf(mekanFiltre, SaloonName) !== -1))


        etkinlikTip = _.filter(data, ({
            SaloonName,
        }) => (_.indexOf(mekanFiltre, SaloonName) !== -1));
        var result = _(etkinlikTip).groupBy('tip').map((tipler, tip) => ({
            tip,
            sayi: tipler.length
        })).orderBy('sayi', 'desc').value();
        var EtkinliklerCompiled = _.template('<% _.forEach(data, function(deger) { %> <li data-tur="<%- deger.tip%>"><label class="checkboxYN"><%- deger.tip%> (<%- deger.sayi%>) <input type="checkbox" value="<%- deger.tip%>"><span class="checkmark"></span></label></li><% }); %>');


        let dy = EtkinliklerCompiled({
            data: result
        })
        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').html(dy);
        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input').each(function () {
            etkinlikler.get().includes($(this).val()) && $(this).prop("checked", true)
        })

        $('.sehir-detay__etkinlikler__mekanfiltre--sonuc').html(`${filteredSehirData.length} SONUCU GÖSTER`)

        let seciliEtkinlik = _.template('<% _.forEach(data, function(deger) { %> <button data-filtre="<%- deger%>"> <%- deger%> <img src="' + cdnPath + '/dist/assets/img/filtreDelete.svg" alt="Filtreyi Sil" width="20"></button> <% }); %>');
        $('.sehir-detay__tags__filtreler').html('')
        $('.sehir-detay__tags__filtreler').append(seciliEtkinlik({
            data: etkinlikler.get()
        }));
        $('.sehir-detay__tags__filtreler').append(seciliEtkinlik({
            data: mekanlar.get()
        }));

        listele();

    };


    $('.sehir-detay__tags__filtreler').on('click', 'button', function () {
        let sayi = $('.sehir-detay__tags__filtreler button').length;
        sayi == 1 ? mekanTemizle() : '';
        let filtre = $(this).attr('data-filtre')
        $('li[data-tur="' + filtre + '"] input').prop('checked', false);
        filtreItem();
    })

    $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').delegate("input", "change", function () {
        filtreItem();
    });

    $('.sehir-detay__etkinlikler__mekanfiltre  input').on('change', function () {
        $('.sehir-detay__etkinlikler__etkinlikfiltre--liste input:checkbox').prop('checked', false);
        if ($('.filtreAktif').length == 1) {
            $('.filtreAktif').click()
        }
        filtreItem();
    });

    function mekanTemizle() {
        $('.sehir-detay__etkinlikler__etkinlikfiltre b').html('Lütfen Etkinlik Türü Seçin')
        $('.sehir-detay__etkinlikler__mekanfiltre b').html('Lütfen Mekan Seçin')
    }


    $('.mekanTemizle').click(function () {
        mekanTemizle()
        $('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul input').each(function () {
            this.checked = false;
        })
        filtreItem()
    })

    $('.tumfiltreleriTemizle').click(function () {
        mekanTemizle()
        $('.checkboxYN input').each(function () {
            this.checked = false;
        })
        filtreItem()
    })

    $('.etkinlikTemizle').click(function () {
        mekanTemizle()
        $('.sehir-detay__etkinlikler__etkinlikfiltre input').each(function (i) {
            this.checked = false;
        })
        filtreItem()
    })

    $('.sehir-detay__etkinlikler__filtre__mekanlar, .sehir-detay__etkinlikler__filtre__etkinlikturu').click(function (e) {
        e.stopPropagation();
        $(this).addClass('zindex100')
        $(this).find('div').addClass('mekanfiltreAcik')
    })

    $('.sehir-detay__etkinlikler__filtre--mobil---altbaslik button').click(function (e) {
        $(this).parent().parent().removeClass('mekanfiltreAcik')
        $('.zindex100').removeClass('zindex100')
        e.stopPropagation();
    })

    //let mekanfiltreAc = () => {
    //    $('.sehir-detay__etkinlikler__filtre').addClass('mekanfiltreAcik')
    //}
    $('.sehir-detay__etkinlikler__mekanfiltre--sonuc, .etkinlikmekanKapat').click(function (e) {
        $('.mekanfiltreAcik').removeClass('mekanfiltreAcik')
        $('.zindex100').removeClass('zindex100')
        e.stopPropagation();
    })

    filtreItem()






}

/***************** */

$('.kampanyakodu__gir--input button').click(function (e) {
    let val = $('.kampanyakodu__gir--input input').val()
    $('.kampanyakodu__gir--input button').html(loadingsvg)
    let formData = new FormData();
    formData.append('code', val);
    fetch('/dynamic/KuponGetir', {
        method: 'POST',
        body: formData
    }).then(response => response.json())
        .then(data => {
            /*  console.log(data.Items)*/
            let status = data.Status
            if (val.trim().length > 4 && status == 1) {
                $('.kampanyakodu__gir').addClass('kampanyakod__gitti');
                $('.kampanyakodu__takip').css('width', '66%');
                $('.kampanyakodu__sehir').addClass('kampanyakod__geldi')
                $('.kampanyakodu').animate({ height: 260 }, 600)
            } else {
                $('.kampanyakodu').addClass('kampanyakodu__hatali')
                $('.kampanyakodu__gir button').addClass('kampanyakodu__gir--disabled')
                $('.kampanyakodu__gir--input button').html('Geçersiz Kod')
            }

            let sehirler = _.chain(data.Items).map('CityName').uniq().value();
            $('.kampanyakodu__sehir__sehir').html(sehirler.length)
            $('.kampanyakodu__sehir__etkinlik').html(data.Items.length)
            let sehirHTML = ""
            sehirler = _.sortBy(sehirler);
            sehirler.map((sehir) => {
                sehirHTML += `<option value="${sehir}">${sehir}</option>`
            });
            $('.kampanyakodu__sehir--select select').append(sehirHTML)

            $('.kampanyakodu__sehir--select select').on('change', function () {
                $('.sehirdis').html('')
                let val = $(this).val()
                $('.sehir-detay__etkinlikler__mekanfiltre > li > div > ul').html('')
                $('.sehir-detay__etkinlikler__etkinlikfiltre--liste').html('')
                $('.kampanyakodu__icerik-filtre').css('display', 'flex')
                if (isMobile) {
                    $('.kmmobil').show()
                }
                $('input:checkbox').prop('checked', false);
                sonuc = _.filter(data.Items, item => item.CityName === val);
                sehirleriListele(sonuc)
            })

            $('.kampanyakodu__sehir--select select').trigger("change");
        })

})


$('.kampanyakodu__gir--input input').on('keyup', function () {
    let val = $(this).val().length
    if (val > 4) {
        $('.kampanyakodu__gir button').removeClass('kampanyakodu__gir--disabled')
        $('.kampanyakodu').removeClass('kampanyakodu__hatali')
        $('.kampanyakodu__gir--input button').html('LİSTELE')
    } else {
        $('.kampanyakodu__gir button').addClass('kampanyakodu__gir--disabled')
    }
})



function removeSehir(el) {
    $('.kampanyakodu__sehir--select input').val('')
    $('.kampanyakodu__secili').removeClass('kampanyakodu__secili')
    $('.kampanyakodusehir').fadeOut()
    el.remove();
}

let listele = (clear) => {

    let html = "";
    clear == 1 ? $('.sehirdis').html("") : null;
    data = _.orderBy(filteredSehirData, ['SeanceDate'], ['asc']);
    data = _.groupBy(data, 'Date');

    $('.etkinlikyok').css('display', 'none')
    $('.sehir-detay__etkinlikler__filtre__arama input').val('')

    _.forEach(data, function (element) {


        splitTarih = element[0].Date.split(" ");
        const gun = splitTarih[0];
        const ay = splitTarih[1];
        let liste = "";

        var ListeCompiled = _.template('<% _.forEach(data, function(element){satisDurum = (element.KoltukKontrol == 0) ? false : true;splitTarih = element.Date.split(" "); const gun = splitTarih[0]; const ay = splitTarih[1]; %><li> <div class="sehir-detay__liste-mobiltarih"> <span> <%- gun%> </span> <b>${ay}</b> <p> <%- element.Hour%> </p>  <%if(satisDurum){%><strong>SATIŞTA</strong><%}else{%><strong class="tukendi">TÜKENDİ</strong><%}%>  </div> <a class="etlinlikLink" onclick="redeemCoupon(<%- element.SeanceId%>, \'/<%- element.tipForUrl%>/<%- element.SeoUrl%>\')" </a> <%if(!isMobile){%><figure><a onclick="redeemCoupon(<%- element.SeanceId%>, \'/<%- element.tipForUrl%>/<%- element.SeoUrl%>\')" title="<%- element.FilmName%>"><img loading="lazy" src="' + cdnPath + '<%- element.ImageUrl%>" alt="<%- element.Name%>"></a></figure><%}%> <div> <div class="sehir-detay__liste__ust"><strong class="sehir-detay__liste__ust-<%- element.tip%>"> <%- element.tip%> </strong> <p class="sehir-detay__liste__ust--bilgimesaji"> <%- element.adversting%> </p> </div> <h2><a onclick="redeemCoupon(<%- element.SeanceId%>, \'/<%- element.tipForUrl%>/<%- element.SeoUrl%>\')" title="<%- element.FilmName%>"> <%- element.FilmName%> </a></h2> <address> <img src="' + cdnPath + '/dist/assets/img/sehirdetaylocation.svg" alt="Lokasyon Ikonu"> <time datatime=""> <%- element.Time %> </time> <span>·</span><p><%- element.SaloonName%></p></address> </div><button onclick="redeemCoupon(<%- element.SeanceId%>, \'/<%- element.tipForUrl%>/<%- element.SeoUrl%>\')" class="direkBilet" data-tip="<%- element.tipForUrl%>" data-title="<%- element.SeanceId%>">Biletini Al</button></li><% }); %>');
        liste = ListeCompiled({
            data: element
        });
        html += `
                <div class="yeniGun">
                <div class="sehir-detay__liste__tarih">
                    <span>${ay}</span>
                    <b>${gun}</b>
                    <p class="sehir-detay__mobil-tarih">${element[0].SeanceDate}</p>
                </div>
                <ul class="sehir-detay__liste">
                    ${liste}
                </ul>  
                </div>
            `
    });
    $('.sehirdis').append(html);

    $(".sehir-detay__etkinlikler__filtre__arama input").on("keyup", function () {
        let aramaTxt = $(this).val().toLowerCase();
        $(".sehir-detay__liste > li").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(aramaTxt) > -1);
        });
        if ($('.sehir-detay__liste > li:visible').length == 0) {
            $('.etkinlikyok').css('display', 'flex')
        } else {
            $('.etkinlikyok').css('display', 'none')
        }
    });
};


$('.sehir-detay__etkinlikler__filtre__mekanlar, .sehir-detay__etkinlikler__filtre__etkinlikturu').click(function (e) {
    e.stopPropagation();
    $(this).addClass('zindex100')
    $(this).find('div').addClass('mekanfiltreAcik')
})

$('.sehir-detay__etkinlikler__filtre--mobil---altbaslik button').click(function (e) {
    $(this).parent().parent().removeClass('mekanfiltreAcik')
    $('.zindex100').removeClass('zindex100')
    e.stopPropagation();
})

//let mekanfiltreAc = () => {
//    $('.sehir-detay__etkinlikler__filtre').addClass('mekanfiltreAcik')
//}

function Search(term, countryId) {

    $.ajax({

        type: "POST",
        url: "/" + getLangAndRegion() + "/Search/Complete",
        async: false,
        data: { 'term': term, 'countryId': countryId },
        success: function (response) {

            if (response != null) {
                jQuery.each(response, function (i, item) {

                    //if (item.ItemType == "Cinema") {
                    //    item.OrganizerTypeStr = "sinema";
                    //    item.OrganizerTypeUrl = "sinema";
                    //}
                    item.SeoUrl = "/" + item.OrganizerTypeUrl + "/" + item.SeoUrl;
                });

                aramaSonuclari(response);
            }
        },
        error: function () {
        }
    });
}

$(".lettersAndNumbersTop").on("input", function () {
    var term = $(this).val();
    doSearch(term);
});

$(".lettersAndNumbers").on("input", function () {

    var term = $(this).val();
    var countryId = $(this).attr("data-country");

    doSearch(term, countryId);
});


var delayTimer;
function doSearch(term, countryId) {

    if (term.length > 2) {
        clearTimeout(delayTimer);
        delayTimer = setTimeout(function () {
            Search(term, countryId);
        }, 1000);
    }
}

$('.aramasonuclari__tab li').click(function () {
    $('.tbSecili').removeClass('tbSecili')
    $(this).addClass('tbSecili')
})


//#endregion
//# sourceMappingURL=jquery.sticky-sidebar.js.map

// login-register ekranları şifre gizle-göster
$(".openEye").click(function () {

    $(".inputPsw").attr("type", "text");
    $(".closeEye").css("display", "block");
});
$(".closeEye").click(function () {

    $(".inputPsw").attr("type", "password");
    $(".closeEye").css("display", "none");
});


//etkinlik detay seans ekranı

/*#region select */

(function ($) {
    $.fn.BVSelect = function (parameters) {

        // VARIABLES
        var selectorID = $(this).attr("id"); // Selector ID
        var select = $(this); // Native Selector Object
        var randomID = Math.floor(Math.random() * (9999 - 0 + 1)) + 0; // Random ID Generated
        var selectedIDFocus = 0; // Save wich dropdown is currently open
        var selectedMultiple = []; //

        // SETUP LIST
        function SetListBV(options) {
            options.find("option").each(function (index, element) {
                // Separator Element
                if (element.disabled == true) {
                    var is_disabled = "bv_disabled"
                } else {
                    is_disabled = ""
                }
                // Disabled Element   
                if ($(this).data('separator') == true) {
                    var is_separator = "bv_separator"
                } else {
                    is_separator = ""
                }
                // Check for Attachment  
                if ($(this).data("img")) {
                    var has_attachment = "<img src=" + $(this).data('img') + ">";
                } else {
                    if ($(this).data("icon")) {
                        var has_attachment = "<i class='" + $(this).data('icon') + "' aria-hidden='true'></i>";
                    } else {
                        var has_attachment = "";
                    }
                }
                // Apend li to ul
                $("#ul_" + randomID).append("<li class='" + is_disabled + " " + is_separator + "'  > " + has_attachment + " " + $(this).text() + "</li>");
            });

            // ** SELECT OPTION  **
            $("#ul_" + randomID).children().click(function (event) {

                if ($(this).hasClass("nofocus") || $(this).hasClass("bv_disabled")) { } else // if this li is searchbox
                {
                    var index = $(this).index(); // Index of list
                    if ($("#ul_" + randomID + " li").hasClass("nofocus")) {
                        index = index - 1;
                    } // Fix for lists with extra Li (Searchbar)
                    var SelectedNames = "";

                    // Checks if user is holding any below keys
                    if (select.is("[multiple]")) // Check if native select has multiple attribute
                    {
                        event.preventDefault();
                        $("#" + selectorID).removeAttr("selected"); // Removes all selections
                        if (selectedMultiple.indexOf(index) > -1) {
                            $('#' + selectorID + " option:eq(" + index + ")").removeAttr("selected");
                            var index_test = selectedMultiple.indexOf(index);
                            selectedMultiple.splice(index_test, 1);
                        } else {
                            selectedMultiple.push(index);
                        } // Adds to array 

                        // Check if array is empty, if it is, gets the first option
                        if (selectedMultiple.length == 0) {
                            SelectedNames = options.find("option:eq(0)").text();
                        } else {

                            for (var i = 0; i < selectedMultiple.length; i++) {
                                var indexValFromArray = selectedMultiple[i];
                                $('#' + selectorID + " option:eq(" + indexValFromArray + ")").prop('selected', true);
                                if ($('#' + selectorID + " option:eq(" + indexValFromArray + ")").text() != "undefined") // Removes the first selection
                                {
                                    SelectedNames = SelectedNames + ", " + $('#' + selectorID + " option:eq(" + indexValFromArray + ")").text();
                                }
                            }
                            SelectedNames = SelectedNames.substring(2);
                        }
                        // Adds the texto o the main DIV
                        $("#main_" + randomID).html(SelectedNames + " <i id='arrow_" + randomID + "' class='arrows_bv arrow down'></i>");

                    } else {
                        if ($(this).hasClass("bv_disabled")) { } else {
                            $("#main_" + randomID).html($(this).text() + " <i id='arrow_" + randomID + "' class='arrows_bv arrow down'></i>");
                            $("#" + selectorID).removeAttr("selected"); // Removes all selected options in case of used multiple before
                            selectedMultiple = []; // Empty array of Multiple Selected
                            $("#" + selectorID).prop("selectedIndex", index).trigger("change");
                            $("#ul_" + randomID).slideUp("fast");
                            $("#input_" + randomID).val("").keyup();
                            selectedIDFocus = 0;
                        }
                    }
                }
            });

            // ** SEARCHBAR  **
            $("#input_" + randomID).on("keyup", function () {
                var value = this.value.toLowerCase().trim();
                $("#ul_" + randomID + " li").show().filter(function () {
                    if ($(this).hasClass("nofocus") == false) {
                        return $(this).text().toLowerCase().trim().indexOf(value) == -1;
                    }
                }).hide();
            });

            // ** HIDE WHEN CLICK OUTSIDE ** 
            $(document).on('click.bv_mainselect', function (event) {
                if ($(event.target).closest('.bv_mainselect').length === 0) {
                    $("#ul_" + randomID).hide();
                    $("#arrow_" + randomID).removeClass("up").addClass("down");
                    $(".bv_input").val("").keyup();

                    // Reset ViewPort Offset
                    selectedIDFocus = 0;
                    $(".bv_ul_inner").css("position", "absolute");
                    $(".bv_ul_inner").css("bottom", "");
                }
            });
        }

        // ON SCROLL EVENT TO PREVENT OUT OF VIEWPORT
        $(window).scroll(function () {
            // If Dropdown in focus
            if (selectedIDFocus != 0) {
                var currentWindowViewOffSet = $(window).scrollTop() + $(window).height(); // Window Offset
                var currentElementViewOffSet = $("#main_" + randomID).offset().top; // Main Element Offset
                var MainDivOff = $("#ul_" + randomID).height(); // Height of the List
                var DiffBetW = currentWindowViewOffSet - currentElementViewOffSet // Difference between Element and Window
                // If Difference is greater than List's height
                if (DiffBetW > MainDivOff) {
                    FixVerticalViewPort();
                }
            }
        });

        // SETUP BASE DIV
        function SetBaseBV(options, config) {
            options.after($('<div id="bv_' + randomID + '" data-search="' + config.searchbox + '" style="width:' + config.width + ';"></div>').addClass('bv_mainselect ').addClass(options.attr('class') || '').addClass(options.attr('disabled') ? 'disabled' : '').attr('tabindex', options.attr('disabled') ? null : '0'));
            $("#bv_" + randomID).append('<div id="main_' + randomID + '" class="bv_atual bv_background"></div><ul id="ul_' + randomID + '" class="bv_ul_inner bv_background"></ul>');

            if (config.searchbox == true) {
                $("#ul_" + randomID).prepend('<li class="nofocus"><div class="innerinput"><input placeholder="Search..." class="bv_input" id="input_' + randomID + '" type="text"></div</li>');
            }

            var select_width = $("#main_" + randomID).width();
            $("#ul_" + randomID).css("width", select_width + 24 + "px");

            var selected_option = options.find("option:selected").text();
            if (selected_option == "") {
                var selected_option = options.find("option:eq(0)").text();
            }
            $("#main_" + randomID).html(selected_option + "<i id='arrow_" + randomID + "' class='arrows_bv arrow down'></i>");

            // ** MAIN DIV CLICK ** 
            $("#main_" + randomID).click(function () {

                var select_width = $("#main_" + randomID).width();
                $("#ul_" + randomID).css("width", select_width + 24 + "px");

                // Check if it is open, if yes, close it.
                if ($("#ul_" + randomID).css('display') == 'block') {
                    $(".bv_ul_inner").slideUp("fast");
                    $(".arrows_bv").removeClass("up").addClass("down");
                } else {
                    $(".bv_ul_inner").hide();
                    $("#ul_" + randomID).slideDown("fast");
                    $(".arrows_bv").removeClass("up").addClass("down");
                    $("#arrow_" + randomID).removeClass("down").addClass("up");
                    if (parameters.offset == true) {
                        FixVerticalViewPort();
                    }
                }
            });
            // Append List
            SetListBV(options);
        }

        // FIX VIEWPORT OFFSET
        function FixVerticalViewPort() {
            var currentWindowView = $(window).scrollTop() + $(window).height();
            var currentElementView = $("#ul_" + randomID + " li:last-child").offset().top;
            // +50 to fix outer border
            if (Math.round(currentElementView + 50) > Math.round(currentWindowView)) {
                selectedIDFocus = randomID;
                $("#ul_" + randomID).css("position", "fixed");
                $("#ul_" + randomID).css("bottom", "0px");
            } else {
                selectedIDFocus = 0;
                $(".bv_ul_inner").css("position", "absolute");
                $(".bv_ul_inner").css("bottom", "");
            }
        }
        // ** ---------- METHODS ----------- **
        if (typeof parameters == 'string') {

            // ** DESTROY **
            if (parameters == 'destroy') {
                this.each(function () {
                    var divselect = $(this).next('.bv_mainselect');
                    if (divselect.length > 0) {
                        divselect.remove();
                        select.css('display', 'block');
                    }
                });
            }

            // ** UPDATE **  
            if (parameters == 'update') {
                this.each(function () {
                    var current_id = $(this).next(".bv_mainselect").children().attr("id").match(/\d+/);
                    randomID = current_id;

                    // Remove all lines without .nofocus class (search input)
                    $("#ul_" + current_id + " li:not(.nofocus)").remove();
                    $("#main_" + current_id + "").children().off();

                    // Fetches fields and append to main div
                    SetListBV(select);
                });
            }

            // ** GET GENERATED ID **  
            if (parameters == 'getid') {
                this.each(function () {
                    var current_id = $(this).next(".bv_mainselect").children().attr("id").match(/\d+/);
                    randomID = current_id;
                });
                return randomID[0];
            }
        } else {

            // Default Parameters
            var defaults = {
                width: "100%", // Width 100%
                searchbox: false, // Searchbox not included
                offset: true // Fixes Viewport Overflow
            }

            var parameters = $.extend({}, defaults, parameters);
            // Hide Native Select
            $(this).hide();

            // Setup main div
            SetBaseBV(select, parameters);
            return this;
        }
    };
}(jQuery));

/*#end select */

let seciliSehir = JSON.parse(localStorage.getItem('city'))
let sehirDiv = $('.ed-biletler__sehir')

var sehrinizde = 'ŞEHRİNİZDE';

if (localStorage.getItem('city')) {
    $('.sehrini-kesfet__sehirvar').css('display', 'flex')
    $('.sehrini-kesfet__sehiryok').css('display', 'none')
    if (langCode == "tr") {
        $('.header__sehirsec span, .sehrini-kesfet__konum span').text('Seçili Şehir')

    }
    else {
        $('.header__sehirsec span, .sehrini-kesfet__konum span').text('Seleted City')
        sehrinizde = 'IN YOUR CITY'
    }
    $('.header__sehirsec strong, .sehrini-kesfet__konum strong').html(seciliSehir.name)
    $('.ed-biletler__sehir[data-sehir="' + seciliSehir.name + '"]').css('order', 1)
    $('.ed-biletler__sehir__title', '.ed-biletler__sehir[data-sehir="' + seciliSehir.name + '"]').append('<strong>' + sehrinizde + '</strong>')

    $('#sehrini-kesfet__linkler_Etkinlikler').attr("href", '/' + getLangAndRegion() + '/sehrineozel/' + seciliSehir.url);
    $('#sehrini-kesfet__linkler_Mekanlar').attr("href", '/' + getLangAndRegion() + '/tum-mekanlar?cityId=' + seciliSehir.id);

} else {
    $('.sehrini-kesfet__sehirvar').css('display', 'none')
    $('.sehrini-kesfet__sehiryok').css('display', 'flex')
    $('.header__sehirsec a').hide()



}

$('#sehir__listesi').BVSelect();
$('#sehir__listesi').on('change', function () {
    $('.ed-biletler__title__filtre button').removeClass('secili')
    sehir_filtrele($(this).val())
    $('.ed-biletler__title__filtre button:contains("' + $(this).val() + '")').addClass('secili')
})





$('.ed-biletler__title__filtre button').click(function () {
    $('.bv_mainselect li:contains("' + $(this).text() + '")').click()
    $('.ed-biletler__title__filtre button').removeClass('secili')
    $(this).addClass('secili')
    sehir_filtrele($(this).text())
    $(this).text() == "Tümü" && sehirDiv.show()
})

const sehir_filtrele = (sehir) => {
    sehirDiv.hide()
    sehir == "Tümü" && sehirDiv.show()
    $('*[data-sehir="' + sehir + '"]').show()
}

if (isMobile) {
    $('.header__menu > ul > li').on('click', function () {
        if ($(this).find("ul").length) {
            $('.mobile-menu').addClass('mobil-menu-acik')
            $('.mobile-menu__overlay').fadeIn()
            $('.mobile-menu strong').html($('span:first', this).text())
            $('.mobile-menu ul').html($('ul', this).html())

        }
    })
    $('.mobile-menu button, .mobile-menu__overlay').on('click', function () {
        $('.mobile-menu').removeClass('mobil-menu-acik')
        $('.mobile-menu__overlay').fadeOut()
    })
    if (!localStorage.getItem('city')) {
        $('.kategori--mobil--filtrele').css('bottom', '130px')
    }
}


$('.kategori__mobil__filtre__kapat, .kategori__overlay').on('click', function () {
    $('.kategori__mobil__filtre').removeClass('filtre-acik')
    $('.kategori__overlay').fadeOut()
})

const kategori_filtre = () => {
    $('.kategori__mobil__filtre').addClass('filtre-acik')
    $('.kategori__overlay').fadeIn()
}

if (typeof controller !== 'undefined' && typeof action !== 'undefined' && (controller == "List" && action == "Index")) {

    var cityId;
    var loc;
    var type;
    var date;
    var Isweekend = false;
    //-- filtre
    $(".filtre__mekanlar_sehir  .filterCheck").on("change", function (e) {

        $('.filtre__mekanlar_sehir  .filterCheck').not(this).prop('checked', false);

        cityId = $(this).parent().parent().data('id');
        $('.categoriesHiddenCity').val(cityId);

        $('.categoriesHiddenLoc').val(0);

        $(".etkinliklerDis form.search").submit();

    });
    $(".filtre__mekanlar_mekan  .filterCheck").on("change", function (e) {

        $('.filtre__mekanlar_mekan .filterCheck').not(this).prop('checked', false);

        loc = $(this).parent().parent().data('id');
        $('.categoriesHiddenLoc').val(loc);
        /*   alert($('.categoriesHiddenCity').val() + "-" + $('.categoriesHiddenLoc').val())*/

        $(".etkinliklerDis form.search").submit();

    });
    $(".filtre__etkinlikturu_tur  .filterCheck").on("change", function (e) {

        $('.filtre__etkinlikturu_tur .filterCheck').not(this).prop('checked', false);

        type = $(this).parent().parent().data('id');
        $('.categoriesHiddenFilmtype').val(type);
        $(".etkinliklerDis form.search").submit();

    });
    $(".filtre__etkinlikturu_tarih .filterCheck").on("change", function (e) {

        $('.filtre__etkinlikturu_tarih .filterCheck').not(this).prop('checked', false);

        date = $(this).parent().parent().data('value');
        $('.categoriesHiddenDate').val(date);
        $(".etkinliklerDis form.search").submit();

    });
    $(".checkboxIsweekend").change(function () {
        if (this.checked) {
            $('.categoriesHiddenIsweekend').val('true');

        }
        $(".etkinliklerDis form.search").submit();

    });

    //  --------- temizle  butonları
    $('.categoriesSehirTemizle, .categoriesSehirTemizleSelected').click(function () {
        $(".checkboxCityId").prop("check", false);
        $('.categoriesHiddenCity').val(0);
        $('.categoriesHiddenLoc').val(0);
        $('.cateorySeciliSehirText').html('Lütfen Şehir Seçin');
        $('.categoryOrganizerType').val(organizerType);

        var DateText = $('.checkboxDate:checked').parent().parent().data('tur');
        $('.cateorySeciliDateText').html(DateText);

        $(".etkinliklerDis form.search").submit();

    })

    $(".categoriesMekanTemizle,.categoriesMekanTemizleSelected").click(function () {

        $(".checkboxLoc").prop("check", false);
        $('.categoriesHiddenLoc').val(0);

        $(".etkinliklerDis form.search").submit();


    });

    $('.categoriesTypeTemizle,.categoriesTypeTemizleSelected').click(function () {

        $(".checkboxFilmTypeId").prop("check", false);
        $('.categoriesHiddenFilmtype').val(0);
        $("#filmTypeIdSeletedButton").attr("id", "");

        $(".etkinliklerDis form.search").submit();

    });

    $('.categoriesTarihTemizle,.categoriesTarihTemizleSelected').click(function () {

        $(".checkboxDate").prop("check", false);

        $('.categoriesHiddenDate').val(0);
        $('.categoriesHiddenIsweekend').val(false);


        $(".etkinliklerDis form.search").submit();

    })



}

//---mobil filtre
$("#categoriesPageCitySelect").on("change", function (e) {

    $('#location-title').removeClass("closed");
    var city = $(this).find(":selected").val();

    $.getJSON("/Dynamic/GetLocationFromCity?cityId=" + city + "&organizerType=" + organizerType, function (result) {
        $("#cinema-list-fields").val("");

        var $city = $('#categoriesPageLocSelect');
        $city.empty();
        $city.append('<option id="0"  value="0" name = "loc" >'+SelectVenue+'</option>');

        $.each(result, function (i, data) {

            $city.append('<option data-id="' + data.Id + '" @(item.Id == Model.Loc ? "selected" : "")  value="' + data.Id + '" name = "" >' + data.Text + '</option>');
            /*        $city.append('<option data-id="' + data.Id + '"value="' + data.Id + '" name = "" >' + data.Text + '</option>');*/

        });

    });
});

$(".filmTypesFilterButton").click(function () {

    $('.filmTypesFilterButton').each(function (i, obj) {
        $(this).css("background", "#ffffff")

    });
    $(this).css("background", "#f8e71c")
    $(this).attr("id", "filmTypeIdSeletedButton");


});
$(".categoriesTodayOrYesterday").click(function () {

    $(".categoriesTodayOrYesterday").css("background", "#ffffff")
    $("#categoriesWeekendFilter").css("background", "#ffffff")

    $(".categoriesTodayOrYesterday").attr("id", "");
    $(this).css("background", "#f8e71c")
    $(this).attr("id", "categoriesTodayOrYesterdayId");

    $("#categoriesPageDateSelect").find(":selected").val(0);
    $("#categoriesPageDateSelect").find(":selected").text('Tarih Seçiniz');

    /*    $("#categoriesPageLocSelect").val($("#categoriesPageLocSelect option:first").val());*/

});
$("#categoriesWeekendFilter").click(function () {
    $(".categoriesTodayOrYesterday").css("background", "#ffffff")

    $(this).css("background", "#f8e71c")
    $(this).val(true);

});
$(".kategori__mobil__filtre__uygula").click(function () {

    cityId = $("#categoriesPageCitySelect").find(":selected").val();
    loc = $("#categoriesPageLocSelect").find(":selected").val();
    date = $("#categoriesPageDateSelect").find(":selected").val();
    if (date == 0) {
        date = $("#categoriesTodayOrYesterdayId").val();
    }
    filmtype = $("#filmTypeIdSeletedButton").val();
    if (filmtype === 'undefined') {
        filmtype = $("#filmTypeIdForFilter").val()
    }

    /*   alert(cityId + "-" + loc + "-" + date + "-" + filmtype + "-")*/

    $('.categoriesHiddenCity').val(cityId);
    $('.categoriesHiddenLoc').val(loc);
    $('.categoriesHiddenDate').val(date);
    $('.categoriesHiddenFilmtype').val(filmtype);

    $("#cityIdForFilter").val(cityId);
    $("#locForFilter").val(loc);
    $("#dateForFilter").val(date);
    $("#filmTypeIdForFilter").val(filmtype);
    // $("#thisweekendForFilter").val(isweekend);


    //mobil filtrede sehir seçince komple sehir seçilsin
    if (cityId != 0 && cityId != null) {
        usercity = { id: cityId, name: $("#categoriesPageCitySelect").find(":selected").text(), code: 0 };
        localStorage.setItem("city", JSON.stringify(usercity));
    }
    $(".etkinliklerDis form.search").submit();


});


$(".CategoryMobilFiltreyiTemizle").click(function () {

    $('.categoriesHiddenCity').val(0);
    $('.categoriesHiddenLoc').val(0);
    $('.categoriesHiddenDate').val(0);
    $('.categoriesHiddenFilmtype').val(0);

    $("#cityIdForFilter").val(0);
    $("#locForFilter").val(0);
    $("#dateForFilter").val(0);
    $("#filmTypeIdForFilter").val(0);
    // $("#thisweekendForFilter").val(isweekend);

    $(".etkinliklerDis form.search").submit();


});

function CheckUndefined(value) {

    console.log(value);
    if (typeof value === "undefined") {
        return '0';
    }
    return value;

}


$('.devaminiyukle').on('click', function () {

    var page = $('#categoryPage').val();
    var OrganizerType = $('#categoryOrganizerType').val();


    cityId = $('.categoriesHiddenCity').val();
    loc = $('.categoriesHiddenLoc').val();
    filmTypeId = $('.categoriesHiddenFilmtype').val();
    date = $('.categoriesHiddenDate').val();
    thisweekend = false;




    /* console.log(page + '-' + cityId + '-' + filmTypeId + '-' + loc + '-' + thisweekend + '-' + date);*/

    $.ajax({
        type: "POST",
        url: '/List/GetGrouppedListPage',
        data: {
            'page': page,
            'index': 15,
            'OrganizerType': OrganizerType,
            'cityId': cityId,
            'date': date,
            'loc': loc,
            'filmTypeId': filmTypeId,
            'thisweekend': thisweekend

        },
        dataType: "json",
        beforeSend: function () {
            $("#categoryLoading").text("");
            $("#categoryLoading").html('<span style = "height:32px;"> <img src="' + cdnPath + '/Content/newsite/assets/images/ajax-loader.gif"></span>');

        },
        success: function (result) {

            $("#categoryLoading span").css("display", "none");
            $("#categoryLoading span").css("margin-top", "0px");
            $("#categoryLoading").html('DAHA FAZLA YÜKLE');



            if (result.length != 0) {
                $.each(result, function (i, item) {

                    $("#kategori__etkinlikler ul").append('<li><figure><a href="/' + item.OrganizerTypeUrl + '/' + item.SeoUrl + '" title=' + item.Name + '><img src="' + cdnPath + item.ImageUrl + '" alt="alt"></a> </figure><h3><a href="/@(Model.Organizer != null ? Model.Organizer.Url : Model.BaseUrl)/@item.SeoUrl" title=' + item.Name + '>' + item.Name + '</a></h3><address><b>' + item.CityName + '</b>,' + item.SaloonName + '</address><span>' + item.Date + '</span> </li>')

                });


                if (result.length < 15) {
                    $('.devaminiyukle').hide();
                }
            }
            else {

                $('.devaminiyukle').hide();
            }
            $('#categoryPage').val(parseInt(page) + 1);
        },
        error: function () {
            console.log('A error');
        }
    });

});







//if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
//    $(window).on("scroll", function () {
//        var distanceFromTop = $(window).scrollTop();
//        if (distanceFromTop > 960) {
//            $(".yn_date__container").css({ position: "fixed", top: 0, "border-top-right-radius": "0", "border-top-left-radius": "0" });
//            $(".yn_date").css({ "border-top-right-radius": "0", "border-top-left-radius": " 0" });
//            $(".yn_cinemaList").css("margin-top", "190px");
//        } else {
//            $(".yn_date__container").css({ position: "relative", "border-top-right-radius": "12px", "border-top-left-radius": "12px" });
//            $(".yn_date").css({ "border-top-right-radius": "12px", "border-top-left-radius": "12px" });
//            $(".yn_cinemaList").css("margin-top", "0");
//        }
//    });
//}
//else {
//    $(window).on("scroll", function () {
//        var distanceFromTop = $(window).scrollTop();
//        if (distanceFromTop > 1410) {
//            $(".yn_date__container").css({ position: "fixed", top: 0 });
//            /* $(".yn_cinema").css("margin-top", "80px");*/
//            $(".yn_date__container").css("width", "calc(100% - 40px)");
//        } else {
//            $(".yn_date__container").css({ position: "relative" });
//            $(".yn_cinema").css("margin-top", "0");
//            $(".yn_date__container").css("width", "100%");
//        }
//    });
//}
$(document).ready(function () {
    $(".yn_header form > input").on("keyup", function () {
        var value = $(this).val().toLowerCase();
        $(".yn_cinema_info_title > h2").filter(function () {
            $(this)
                .parent()
                .parent()
                .parent()
                .toggle($(this).text().toLowerCase().indexOf(value) > -1);
        });
    });
});

$(document).ready(function () {
    var data = JSON.parse(localStorage.getItem("city"));
    $(".yn_header_city").text(data.name);
});

var didScroll;
var lastScrollTop = 0;
var delta = 5;
var navbarHeight = $(".header").outerHeight();
$(window).scroll(function (event) {
    didScroll = true;
});
setInterval(function () {
    if (didScroll) {
        hasScrolled();
        didScroll = false;
    }
}, 250);
function hasScrolled() {
    var st = $(this).scrollTop();
    if (Math.abs(lastScrollTop - st) <= delta) return;
    if (st > lastScrollTop && st > navbarHeight) {
        $(".header").removeClass("nav-down").addClass("nav-up");
    } else {
        if (st + $(window).height() < $(document).height()) {
            $(".header").removeClass("nav-up").addClass("nav-down");
        }
    }
    lastScrollTop = st;
}

/* Header Language Select Start */
if (controller != "Seat" && controller != "odeme") {

    //yeni
    $(".header__right__dilSec__btn").click(function () {
        $(".header__right__dilSec__list").toggle();
    });

    $(".header__right__dilSec__list li").click(function () {
        var seciliDil = $(this).attr("data-language");
        console.log(seciliDil);
        var currentLang = $(".header__right__dilSec__btn img").data("lang");
        if (seciliDil != currentLang) {
            $('#hdnCultureLang').val(seciliDil);
            $(".header__right__dilSec form").submit();
        } else {
            $(".header__right__dilSec__list").toggle();
        }
    });
}

function copyToClipboard(copyText, seanceId) {

    navigator.clipboard.writeText(copyText);

    $("#copySVG-" + seanceId).hide();
    $("#checkSVG-" + seanceId).show();

    var clipboardTimer = 0;
    clearTimeout(clipboardTimer);
    clipboardTimer = setTimeout(function () {

        $("#checkSVG-" + seanceId).hide();
        $("#copySVG-" + seanceId).show();
    }, 2000);
}







$('.yeni_sehir_btn button').on('click', function () {
    let scity = $(this).text()
    $('.cityModal').hide()
    $('.cityList').find($(`*[data-name="${scity}"]`)).click()

})


if (localStorage.getItem('city') === null) {
    $('.yeni_sehir_sec').show()
    $('.yn_cinemaList').hide()
} else {
    $('.yeni_sehir_sec').hide()
    $('.yn_cinemaList').show()
}


$(document).ready(function () {
    $("#yn_dateList a").on("click", function (e) {
        LoadSeances(manageCityStates(), $(this).data("date"));

        $("#yn_dateList a").removeClass("yn_active");
        $(this).toggleClass("yn_active");
    });
});

$(document).ready(function () {
    $('.goseances').on('click', function () {
        if (localStorage.getItem("city") === null) {
            $('html, body').animate({
                scrollTop: $(".yeni_sehir_sec").offset().top - 55
            }, 1000);
        } else {
            $('html, body').animate({
                scrollTop: $(".yn_cinemaList").offset().top - 55
            }, 1000);
        }
    })


    let dateCount = $(".yn_date a").length;
    {
        if (dateCount < 5) {
            $(".yn_date__right").css("display", "none");
            $(".yn_date__left").css("display", "none");
        }
    }
});

$(function () {
    let currentScrollPage = 0;
    let dateCount = $(".yn_date a").length;

    $(".yn_date__left").click(function (event) {
        event.preventDefault();
        if (currentScrollPage > 0) {
            currentScrollPage--;
            if (currentScrollPage === 0) {
                $(".yn_date__left").css("opacity", ".3");
            } else {
                $(".yn_date__left").css("opacity", "1");
            }
            if (currentScrollPage === Math.floor(dateCount / 4)) {
                $(".yn_date__right").css("opacity", ".3");
            } else {
                $(".yn_date__right").css("opacity", "1");
            }
        }
        $(".yn_date").animate(
            {
                scrollLeft: "-=253px",
            },
            "slow"
        );
    });

    $(".yn_date__right").click(function (event) {
        event.preventDefault();
        if (currentScrollPage < Math.floor(dateCount / 4)) {
            currentScrollPage++;
            if (currentScrollPage === 0) {
                $(".yn_date__left").css("opacity", ".3");
            } else {
                $(".yn_date__left").css("opacity", "1");
            }
            if (currentScrollPage === Math.floor(dateCount / 4)) {
                $(".yn_date__right").css("opacity", ".3");
            } else {
                $(".yn_date__right").css("opacity", "1");
            }
        }
        $(".yn_date").animate(
            {
                scrollLeft: "+=253px",
            },
            "slow"
        );
    });
});

$(".yn_date").on("scroll", function () {
    var scrollPos = $(this).scrollLeft();
    if (scrollPos == 0) {
        $(".yn_date__left").css("opacity", 0.5);
    } else {
        $("button").css("opacity", 1);
    }
});

$('.yds_filter_body_action > b, .yds_filter_body_action > span').on("click", function () {
    $('.yds_cinema_anchor').hide()
    $('.yds_filter_body_action_list').show()
    $('body').css('overflow', 'hidden')
})

const mobilefilter = () => {
    $('.yds_cinema_anchor').show()
    $('.yds_filter_body_action_list').hide()
    $('body').css('overflow', 'visible')
}
$('.yds_gitmeden-kontrol').click(function () {
    $('.yds_gitmeden-content').is(":visible") ? $('.yds_gitmeden-content').css('display', 'flex') : $('.yds_gitmeden-content').css('display', 'none')
})

$('.yds_filter_body_action_list input').on('click', function () {
    $('.yds_order select').val('NewComments')
})